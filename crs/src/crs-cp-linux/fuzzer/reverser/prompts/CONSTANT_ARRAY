For loops of compile-time constant iterations, we want to represent the data generated
by the loop body in a command and add an array with the known iterations to the grammar.

Test harness:
<harness>
int harness( uint8_t *blob, uint32_t blob_size)
{
    int index = 0;
    uint32_t command = 0;
    uint32_t size = 0;

    if ( blob == NULL ) {
        return -1;
    }

    for ( uint32_t i = 0; i < 10; i++) {
        if ( blob_size - index < 4 ) {
            printf("[ERROR] ran out of commands\n");
            close(g_fd);
            return -1;
        }

        memcpy(&command, blob + index, 4);
        index += 4;

        switch ( command ) {
          case 0:
            if ( blob_size - index < 4 ) {
              printf("[ERROR] create_user error\n");
              close(g_fd);
              return -1;
            }
            memcpy(&size, blob + index, 4);
            index += 4;
            if ( blob_size - index < size ) {
              printf("[ERROR] create_user error\n");
              close(g_fd);
              return -1;
            }
            if (create_user(blob + index, size) < 0) {
              printf("[ERROR] create_user error\n");
              close(g_fd);
              return -1;
            }
            index += size;
            break;
          case 1:
            if ( blob_size - index < 4 ) {
              printf("[ERROR] login error\n");
              close(g_fd);
              return -1;
            }
            memcpy(&size, blob + index, 4);
            index += 4;
            if ( blob_size - index < size ) {
              printf("[ERROR] login error\n");
              close(g_fd);
              return -1;
            }
            if (login(blob + index, size) < 0) {
              printf("[ERROR] login error\n");
              close(g_fd);
              return -1;
            }
            index += size;
            break;
          default:
            printf("[ERROR] Unknown command: %x\n", command);
            return -1;
        }
    }

    close(g_fd);
    return 0;
}
</harness>

Test language:
<testlang>
INPUT ::= COMMAND[10]

COMMAND ::= CREATE_USER
          | LOGIN

CREATE_USER ::= SIZE { size: 4 }
                USER { size: SIZE } 

LOGIN ::= SIZE { size: 4 }
          DATA { size: SIZE }
</testlang>