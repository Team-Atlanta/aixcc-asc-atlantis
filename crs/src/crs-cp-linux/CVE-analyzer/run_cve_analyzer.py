import json
import sys
import os
import subprocess
import faiss
import argparse
from sklearn.feature_extraction.text import TfidfVectorizer
from scipy import sparse
import re
import logging
import configparser

config = configparser.ConfigParser()
config.read('config.ini')

cve_collection = {}
patch_revert_collection  = {}
poc_collection = {}

def get_filenames_by_diff(diff):
    filenames = []
    for line in diff.split("\n"):
        if line.startswith("+++ ") or line.startswith("--- "):
            file_dir = line.split()[1].split("/")
            if len(file_dir) > 1:
                filename = "/".join(file_dir[1:])
                filenames.append(filename)
    return filenames

def run_command(command, cwd=None):
    """Runs a system command and returns its output."""
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, cwd=cwd, encoding="cp437")
    return result.stdout, result.stderr
def get_commit_content(kernel,commit):
    #print 'get_commit_content',kernel,commit
    string1="cd "+kernel+";git show --pretty=format: "+commit
    logging.info(string1)
    (p_buf, err)=run_command(string1)
    if any(line.startswith('Merge') for line in p_buf):
        for line in p_buf:
            if line.startswith('Merge'):
                oldcommit=line.split(" ")[1]
                break
        string1="cd "+kernel+"; git diff "+oldcommit+" "+commit
        (p_buf, err)=run_command(string1)
    return p_buf
def get_commit_diff_content(kernel, commit):
    string1="cd "+kernel+";git show --pretty=format: "+commit
    logging.info(string1)
    (p_buf, err)=run_command(string1)
    if any(line.startswith('Merge') for line in p_buf):
        for line in p_buf:
            if line.startswith('Merge'):
                oldcommit=line.split(" ")[1]
                break
        string1="cd "+kernel+"; git diff "+oldcommit+" "+commit
        (p_buf, err)=run_command(string1)
    diff_buf = ""
    for line in p_buf.split("\n"):
        if line.startswith("+") or line.startswith("-"):
            if line.startswith("+++ ") or line.startswith("--- "):
                continue
            diff_buf += line
            diff_buf += "\n"
    return diff_buf
def is_merge_commit(repo_dir, commit_num):
    check_cmd = "cd " + repo_dir + " && git cat-file -p "+commit_num
    try:
        (result, err) = run_command(check_cmd)
        lines = result.split("\n")
        count = 0
        for line in lines:
            if line.startswith("parent"):
                count += 1
                if count > 1:
                    return True
    except:
        return False
    return False
def get_filenames(kernel_dir, commit_num):
    modified_files = []
    if is_merge_commit(kernel_dir, commit_num):
        show_file_cmd = "cd "+kernel_dir+" && git log -m -1 --name-only --pretty=\"format:\" "+commit_num
        logging.info(show_file_cmd)
        (result,err) = run_command(show_file_cmd)
        logging.info(f"result = {result}")
        first_trunk = result.split("\n\n")[0]
        modified_files = first_trunk.split("\n")
    else:
        show_file_cmd = "cd "+kernel_dir+" && git show --name-only "+commit_num
        logging.info(show_file_cmd)
        (out, err) = run_command(show_file_cmd)
        #print(f"out = {out}")
        last_trunk = out.strip().split("\n\n")[-1]
        modified_files = []
        if (".c" in last_trunk or ".h" in last_trunk) and ":" not in last_trunk:
            modified_files = last_trunk.split("\n")
            #print(modified_files)
    return modified_files
def ignore_subject(challenge_dir, commit_num):
    show_subject_cmd = "cd "+challenge_dir+" && git log "+commit_num + " -n 1 --pretty=format:%s"
    (subject, err) = run_command(show_subject_cmd)
    if "[IGNORE]" in subject:
        return True

def is_subset(small, large):
    new_set = set()
    for item in large.split("\n"):
        new_item = item[1:].strip()
        new_set.add(new_item)
        #print(f"new_set.add {new_item}")
    for item in small.split("\n"):
        new_item = item[1:].strip()
        #print(f"new_item : {new_item}")
        if new_item not in new_set:
            return False
    return True
class Repo():
    def __init__ (self):
        self.dir = config.get('Config', 'challenge_repo').strip()
    def show_all_commits(self):
        show_commit_cmd = "cd "+self.dir+" && git log --format=\"%H\""
        (commits,err) = run_command(show_commit_cmd)
        return commits
class CVE_DB():
    def __init__ (self):
        self.cve_commit_data = []
        self.cve_json = []
        self.linux_main_dir = config.get('Config', 'challenge_repo').strip()
        self.patch_revert_dir = config.get('Config', 'patch_revert_dir').strip()
        self.poc_dir = config.get('Config', 'poc_dir').strip()
    def build_faiss_index(self):
        for patch_revert_file in os.listdir(self.patch_revert_dir):
            patch_revert_filename = self.patch_revert_dir+"/"+patch_revert_file
            with open(patch_revert_filename) as file:
                #print(patch_revert_filename)
                cve_num = patch_revert_file.split("_")[0]
                patch_revert_code = file.read()
                patch_revert = {}
                patch_revert["diff"] = patch_revert_code
                patch_revert["cve_id"] = cve_num
                patch_revert["commit_id"] = patch_revert_file.split("_")[1][:12]
                self.cve_commit_data.append(patch_revert_code)
                self.cve_json.append(patch_revert)
        vectorizer = TfidfVectorizer()
        tfidf_matrix = vectorizer.fit_transform(self.cve_commit_data).toarray()

        # Build the Faiss index
        d = tfidf_matrix.shape[1]
        index = faiss.IndexFlatL2(d)
        index.add(tfidf_matrix)
        return index, vectorizer
    def check_commit_similarity_faiss(self,new_commit,  index, vectorizer, k=1):
        new_commit_data = get_commit_content(self.linux_main_dir, new_commit)
        new_commit_vector = vectorizer.transform([new_commit_data]).toarray()
        D, I = index.search(new_commit_vector, k)
        similar_commits = []
        for i, d in zip(I[0], D[0]):
            jstr = json.dumps(self.cve_json[i])
            commit_id = jstr.split("commit_id")[1].split("cve_id")[0].split("\"")[2]
            cve_id = jstr.split("cve_id")[1].split("\"")[2]
            if d < 0.7:  # Adjust the threshold as needed
                similar_commits.append((commit_id, 1 - d, cve_id))
        return similar_commits
    def compare_patch_revert(self, patch_reverts, challenge_dir, commit_num):
        diff_context = get_commit_diff_content(challenge_dir, commit_num.strip())
        subset_cve = ""
        subset = False
        for patch in patch_reverts:
            patch_diff_only = patch["diff_only"]
            if is_subset(diff_context,patch_diff_only):
                subset = True
                subset_cve = patch["cve_id"]
        return subset_cve
    def retrive_patch_reverts(self, filename):
        if filename not in patch_revert_collection:
            return []
        result = patch_revert_collection[filename]
        return result
    def build_patch_revert_collection(self):
    #For each files appears in the patch, store the file name with the diff code.
    #Reverted patch file example: CVE-2021-43267_fa40d9734a57bcbfa79a280189799f76c88f7bb0_patch-revert.diff
        patch_num = 0
        for patch_revert_file in os.listdir(self.patch_revert_dir):
            patch_revert_filename = self.patch_revert_dir+"/"+patch_revert_file
            with open(patch_revert_filename) as file:
                #print(patch_revert_filename)
                patch_revert_code = file.read()
                patch_revert_diff = ""
                for line in patch_revert_code.split("\n"):
                    if line.startswith("+") or line.startswith("-"):
                        if line.startswith("+++ ") or line.startswith("--- "):
                            continue
                        patch_revert_diff += line
                        patch_revert_diff += "\n"
                cve_num = patch_revert_file.split("_")[0]
                commit_num = patch_revert_file.split("_")[1]
                commit_files = get_filenames_by_diff(patch_revert_code)
                logging.info(f"commit_files = {commit_files}")
                for file_item in commit_files:
                    if ".c" not in file_item and ".h" not in file_item:
                        continue

                    patch_revert = {}
                    patch_revert["diff"] = patch_revert_code
                    patch_revert["diff_only"] = patch_revert_diff
                    patch_revert["cve_id"] = cve_num
                    patch_revert["_id"] = patch_num
                    #patch_revert["file"] = file_item.strip()
                    logging.info(f"patch_revert = {patch_revert}")
                    file = file_item.strip()
                    patch_num += 1
                    if file not in patch_revert_collection:
                        patch_revert_collection[file]=[]
                    patch_revert_collection[file].append(patch_revert)

                #result = patch_revert_collection.insert_one(patch_revert)
    def build_poc_collection(self):
        for dirpath, dirnames, filenames in os.walk(self.poc_dir):
            for filename in filenames:
                if os.path.splitext(filename)[1] == ".c" and "CVE" in filename:
                    module = os.path.join(dirpath, filename)
                    with open(module) as file:
                        cve_id = filename.split(".c")[0].strip()
                        poc_code = file.read()
                        poc_collection[cve_id] = poc_code
if __name__ == "__main__":
    cve_database = CVE_DB()
    challenge_repo = Repo()
    cve_database.build_patch_revert_collection()
    cve_database.build_poc_collection()

    index, vectorizer = cve_database.build_faiss_index()

    all_commit = challenge_repo.show_all_commits()
    commit_list = all_commit.split("\n")
    commit_list.reverse()
    commit_list = commit_list[2:]

    ans = {}
    for commit_num in commit_list:
        if ignore_subject(challenge_repo.dir, commit_num):
            continue
        similar_commits = cve_database.check_commit_similarity_faiss(commit_num[:12], index, vectorizer)
        if similar_commits:
            for commit_id, similarity, cve_id in similar_commits:
                logging.info(commit_num)
                logging.info(f"Commit ID: {commit_id}, CVE ID: {cve_id}, Similarity: {similarity:.2f}")
                ans[commit_num] = cve_id
        else:
            files=get_filenames(challenge_repo.dir, commit_num)
            patch_reverts = []
            seens = set()
            for file in files:
                if file == "README" or file == ".config":
                    continue
                logging.info(f"retrive diff for file : {file}")
                patches = cve_database.retrive_patch_reverts(file)
                for entry in patches:
                    id = entry["_id"]
                    if id not in seens:
                        seens.add(id)
                        patch_reverts.append(entry)
            cve_ans = cve_database.compare_patch_revert(patch_reverts, challenge_repo.dir, commit_num)
            if cve_ans:
                ans[commit_num] = cve_ans
    print(json.dumps(ans))
