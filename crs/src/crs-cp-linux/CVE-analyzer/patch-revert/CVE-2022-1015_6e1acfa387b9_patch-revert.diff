diff --git a/net/netfilter/nf_tables_api.c b/net/netfilter/nf_tables_api.c
index 1f5a0eece0d1..d71a33ae39b3 100644
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -9275,23 +9275,17 @@ int nft_parse_u32_check(const struct nlattr *attr, int max, u32 *dest)
 }
 EXPORT_SYMBOL_GPL(nft_parse_u32_check);
 
-static unsigned int nft_parse_register(const struct nlattr *attr, u32 *preg)
+static unsigned int nft_parse_register(const struct nlattr *attr)
 {
 	unsigned int reg;
 
 	reg = ntohl(nla_get_be32(attr));
 	switch (reg) {
 	case NFT_REG_VERDICT...NFT_REG_4:
-		*preg = reg * NFT_REG_SIZE / NFT_REG32_SIZE;
-		break;
-	case NFT_REG32_00...NFT_REG32_15:
-		*preg = reg + NFT_REG_SIZE / NFT_REG32_SIZE - NFT_REG32_00;
-		break;
+		return reg * NFT_REG_SIZE / NFT_REG32_SIZE;
 	default:
-		return -ERANGE;
+		return reg + NFT_REG_SIZE / NFT_REG32_SIZE - NFT_REG32_00;
 	}
-
-	return 0;
 }
 
 /**
@@ -9333,10 +9327,7 @@ int nft_parse_register_load(const struct nlattr *attr, u8 *sreg, u32 len)
 	u32 reg;
 	int err;
 
-	err = nft_parse_register(attr, &reg);
-	if (err < 0)
-		return err;
-
+	reg = nft_parse_register(attr);
 	err = nft_validate_register_load(reg, len);
 	if (err < 0)
 		return err;
@@ -9391,10 +9382,7 @@ int nft_parse_register_store(const struct nft_ctx *ctx,
 	int err;
 	u32 reg;
 
-	err = nft_parse_register(attr, &reg);
-	if (err < 0)
-		return err;
-
+	reg = nft_parse_register(attr);
 	err = nft_validate_register_store(ctx, reg, data, type, len);
 	if (err < 0)
 		return err;
