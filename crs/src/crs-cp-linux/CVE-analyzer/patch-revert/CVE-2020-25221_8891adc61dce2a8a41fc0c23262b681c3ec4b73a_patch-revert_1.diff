diff --git a/tools/testing/selftests/x86/test_vsyscall.c b/tools/testing/selftests/x86/test_vsyscall.c
index 65c141ebfbbd..c41f24b517f4 100644
--- a/tools/testing/selftests/x86/test_vsyscall.c
+++ b/tools/testing/selftests/x86/test_vsyscall.c
@@ -462,17 +462,6 @@ static int test_vsys_x(void)
 	return 0;
 }
 
-/*
- * Debuggers expect ptrace() to be able to peek at the vsyscall page.
- * Use process_vm_readv() as a proxy for ptrace() to test this.  We
- * want it to work in the vsyscall=emulate case and to fail in the
- * vsyscall=xonly case.
- *
- * It's worth noting that this ABI is a bit nutty.  write(2) can't
- * read from the vsyscall page on any kernel version or mode.  The
- * fact that ptrace() ever worked was a nice courtesy of old kernels,
- * but the code to support it is fairly gross.
- */
 static int test_process_vm_readv(void)
 {
 #ifdef __x86_64__
@@ -488,12 +477,8 @@ static int test_process_vm_readv(void)
 	remote.iov_len = 4096;
 	ret = process_vm_readv(getpid(), &local, 1, &remote, 1, 0);
 	if (ret != 4096) {
-		/*
-		 * We expect process_vm_readv() to work if and only if the
-		 * vsyscall page is readable.
-		 */
-		printf("[%s]\tprocess_vm_readv() failed (ret = %d, errno = %d)\n", vsyscall_map_r ? "FAIL" : "OK", ret, errno);
-		return vsyscall_map_r ? 1 : 0;
+		printf("[OK]\tprocess_vm_readv() failed (ret = %d, errno = %d)\n", ret, errno);
+		return 0;
 	}
 
 	if (vsyscall_map_r) {
@@ -503,9 +488,6 @@ static int test_process_vm_readv(void)
 			printf("[FAIL]\tIt worked but returned incorrect data\n");
 			return 1;
 		}
-	} else {
-		printf("[FAIL]\tprocess_rm_readv() succeeded, but it should have failed in this configuration\n");
-		return 1;
 	}
 #endif
 
