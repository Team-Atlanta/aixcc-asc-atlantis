diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index c5e8ecb96426..b6ddf23d3833 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -41,7 +41,6 @@
 #include <linux/nsproxy.h>
 #include <linux/slab.h>
 #include <linux/jhash.h>
-#include <linux/siphash.h>
 #include <net/net_namespace.h>
 #include <net/snmp.h>
 #include <net/ipv6.h>
@@ -1485,24 +1484,17 @@ static void rt6_exception_remove_oldest(struct rt6_exception_bucket *bucket)
 static u32 rt6_exception_hash(const struct in6_addr *dst,
 			      const struct in6_addr *src)
 {
-	static siphash_key_t rt6_exception_key __read_mostly;
-	struct {
-		struct in6_addr dst;
-		struct in6_addr src;
-	} __aligned(SIPHASH_ALIGNMENT) combined = {
-		.dst = *dst,
-	};
-	u64 val;
+	static u32 seed __read_mostly;
+	u32 val;
 
-	net_get_random_once(&rt6_exception_key, sizeof(rt6_exception_key));
+	net_get_random_once(&seed, sizeof(seed));
+	val = jhash2((const u32 *)dst, sizeof(*dst)/sizeof(u32), seed);
 
 #ifdef CONFIG_IPV6_SUBTREES
 	if (src)
-		combined.src = *src;
+		val = jhash2((const u32 *)src, sizeof(*src)/sizeof(u32), val);
 #endif
-	val = siphash(&combined, sizeof(combined), &rt6_exception_key);
-
-	return hash_64(val, FIB6_EXCEPTION_BUCKET_SIZE_SHIFT);
+	return hash_32(val, FIB6_EXCEPTION_BUCKET_SIZE_SHIFT);
 }
 
 /* Helper function to find the cached rt in the hash table
