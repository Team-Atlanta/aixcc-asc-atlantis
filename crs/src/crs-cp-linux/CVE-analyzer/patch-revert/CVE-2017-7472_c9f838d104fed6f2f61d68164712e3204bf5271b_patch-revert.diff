diff --git a/security/keys/keyctl.c b/security/keys/keyctl.c
index 4ad3212adebe..ab082a2e8fdd 100644
--- a/security/keys/keyctl.c
+++ b/security/keys/keyctl.c
@@ -1258,8 +1258,8 @@ long keyctl_reject_key(key_serial_t id, unsigned timeout, unsigned error,
  * Read or set the default keyring in which request_key() will cache keys and
  * return the old setting.
  *
- * If a thread or process keyring is specified then it will be created if it
- * doesn't yet exist.  The old setting will be returned if successful.
+ * If a process keyring is specified then this will be created if it doesn't
+ * yet exist.  The old setting will be returned if successful.
  */
 long keyctl_set_reqkey_keyring(int reqkey_defl)
 {
@@ -1284,8 +1284,11 @@ long keyctl_set_reqkey_keyring(int reqkey_defl)
 
 	case KEY_REQKEY_DEFL_PROCESS_KEYRING:
 		ret = install_process_keyring_to_cred(new);
-		if (ret < 0)
-			goto error;
+		if (ret < 0) {
+			if (ret != -EEXIST)
+				goto error;
+			ret = 0;
+		}
 		goto set;
 
 	case KEY_REQKEY_DEFL_DEFAULT:
diff --git a/security/keys/process_keys.c b/security/keys/process_keys.c
index 9139b18fc863..b6fdd22205b1 100644
--- a/security/keys/process_keys.c
+++ b/security/keys/process_keys.c
@@ -128,18 +128,13 @@ int install_user_keyrings(void)
 }
 
 /*
- * Install a thread keyring to the given credentials struct if it didn't have
- * one already.  This is allowed to overrun the quota.
- *
- * Return: 0 if a thread keyring is now present; -errno on failure.
+ * Install a fresh thread keyring directly to new credentials.  This keyring is
+ * allowed to overrun the quota.
  */
 int install_thread_keyring_to_cred(struct cred *new)
 {
 	struct key *keyring;
 
-	if (new->thread_keyring)
-		return 0;
-
 	keyring = keyring_alloc("_tid", new->uid, new->gid, new,
 				KEY_POS_ALL | KEY_USR_VIEW,
 				KEY_ALLOC_QUOTA_OVERRUN,
@@ -152,9 +147,7 @@ int install_thread_keyring_to_cred(struct cred *new)
 }
 
 /*
- * Install a thread keyring to the current task if it didn't have one already.
- *
- * Return: 0 if a thread keyring is now present; -errno on failure.
+ * Install a fresh thread keyring, discarding the old one.
  */
 static int install_thread_keyring(void)
 {
@@ -165,6 +158,8 @@ static int install_thread_keyring(void)
 	if (!new)
 		return -ENOMEM;
 
+	BUG_ON(new->thread_keyring);
+
 	ret = install_thread_keyring_to_cred(new);
 	if (ret < 0) {
 		abort_creds(new);
@@ -175,17 +170,17 @@ static int install_thread_keyring(void)
 }
 
 /*
- * Install a process keyring to the given credentials struct if it didn't have
- * one already.  This is allowed to overrun the quota.
+ * Install a process keyring directly to a credentials struct.
  *
- * Return: 0 if a process keyring is now present; -errno on failure.
+ * Returns -EEXIST if there was already a process keyring, 0 if one installed,
+ * and other value on any other error
  */
 int install_process_keyring_to_cred(struct cred *new)
 {
 	struct key *keyring;
 
 	if (new->process_keyring)
-		return 0;
+		return -EEXIST;
 
 	keyring = keyring_alloc("_pid", new->uid, new->gid, new,
 				KEY_POS_ALL | KEY_USR_VIEW,
@@ -199,9 +194,11 @@ int install_process_keyring_to_cred(struct cred *new)
 }
 
 /*
- * Install a process keyring to the current task if it didn't have one already.
+ * Make sure a process keyring is installed for the current process.  The
+ * existing process keyring is not replaced.
  *
- * Return: 0 if a process keyring is now present; -errno on failure.
+ * Returns 0 if there is a process keyring by the end of this function, some
+ * error otherwise.
  */
 static int install_process_keyring(void)
 {
@@ -215,18 +212,14 @@ static int install_process_keyring(void)
 	ret = install_process_keyring_to_cred(new);
 	if (ret < 0) {
 		abort_creds(new);
-		return ret;
+		return ret != -EEXIST ? ret : 0;
 	}
 
 	return commit_creds(new);
 }
 
 /*
- * Install the given keyring as the session keyring of the given credentials
- * struct, replacing the existing one if any.  If the given keyring is NULL,
- * then install a new anonymous session keyring.
- *
- * Return: 0 on success; -errno on failure.
+ * Install a session keyring directly to a credentials struct.
  */
 int install_session_keyring_to_cred(struct cred *cred, struct key *keyring)
 {
@@ -261,11 +254,8 @@ int install_session_keyring_to_cred(struct cred *cred, struct key *keyring)
 }
 
 /*
- * Install the given keyring as the session keyring of the current task,
- * replacing the existing one if any.  If the given keyring is NULL, then
- * install a new anonymous session keyring.
- *
- * Return: 0 on success; -errno on failure.
+ * Install a session keyring, discarding the old one.  If a keyring is not
+ * supplied, an empty one is invented.
  */
 static int install_session_keyring(struct key *keyring)
 {
