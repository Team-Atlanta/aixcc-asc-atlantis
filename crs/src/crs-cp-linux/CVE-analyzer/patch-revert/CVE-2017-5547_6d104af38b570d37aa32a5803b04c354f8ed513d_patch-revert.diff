diff --git a/drivers/hid/hid-corsair.c b/drivers/hid/hid-corsair.c
index 5971907a23b1..717704e9ae07 100644
--- a/drivers/hid/hid-corsair.c
+++ b/drivers/hid/hid-corsair.c
@@ -148,11 +148,7 @@ static enum led_brightness k90_backlight_get(struct led_classdev *led_cdev)
 	struct usb_interface *usbif = to_usb_interface(dev->parent);
 	struct usb_device *usbdev = interface_to_usbdev(usbif);
 	int brightness;
-	char *data;
-
-	data = kmalloc(8, GFP_KERNEL);
-	if (!data)
-		return -ENOMEM;
+	char data[8];
 
 	ret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0),
 			      K90_REQUEST_STATUS,
@@ -162,22 +158,16 @@ static enum led_brightness k90_backlight_get(struct led_classdev *led_cdev)
 	if (ret < 0) {
 		dev_warn(dev, "Failed to get K90 initial state (error %d).\n",
 			 ret);
-		ret = -EIO;
-		goto out;
+		return -EIO;
 	}
 	brightness = data[4];
 	if (brightness < 0 || brightness > 3) {
 		dev_warn(dev,
 			 "Read invalid backlight brightness: %02hhx.\n",
 			 data[4]);
-		ret = -EIO;
-		goto out;
+		return -EIO;
 	}
-	ret = brightness;
-out:
-	kfree(data);
-
-	return ret;
+	return brightness;
 }
 
 static enum led_brightness k90_record_led_get(struct led_classdev *led_cdev)
@@ -263,11 +253,7 @@ static ssize_t k90_show_macro_mode(struct device *dev,
 	struct usb_interface *usbif = to_usb_interface(dev->parent);
 	struct usb_device *usbdev = interface_to_usbdev(usbif);
 	const char *macro_mode;
-	char *data;
-
-	data = kmalloc(2, GFP_KERNEL);
-	if (!data)
-		return -ENOMEM;
+	char data[8];
 
 	ret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0),
 			      K90_REQUEST_GET_MODE,
@@ -277,8 +263,7 @@ static ssize_t k90_show_macro_mode(struct device *dev,
 	if (ret < 0) {
 		dev_warn(dev, "Failed to get K90 initial mode (error %d).\n",
 			 ret);
-		ret = -EIO;
-		goto out;
+		return -EIO;
 	}
 
 	switch (data[0]) {
@@ -292,15 +277,10 @@ static ssize_t k90_show_macro_mode(struct device *dev,
 	default:
 		dev_warn(dev, "K90 in unknown mode: %02hhx.\n",
 			 data[0]);
-		ret = -EIO;
-		goto out;
+		return -EIO;
 	}
 
-	ret = snprintf(buf, PAGE_SIZE, "%s\n", macro_mode);
-out:
-	kfree(data);
-
-	return ret;
+	return snprintf(buf, PAGE_SIZE, "%s\n", macro_mode);
 }
 
 static ssize_t k90_store_macro_mode(struct device *dev,
@@ -340,11 +320,7 @@ static ssize_t k90_show_current_profile(struct device *dev,
 	struct usb_interface *usbif = to_usb_interface(dev->parent);
 	struct usb_device *usbdev = interface_to_usbdev(usbif);
 	int current_profile;
-	char *data;
-
-	data = kmalloc(8, GFP_KERNEL);
-	if (!data)
-		return -ENOMEM;
+	char data[8];
 
 	ret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0),
 			      K90_REQUEST_STATUS,
@@ -354,22 +330,16 @@ static ssize_t k90_show_current_profile(struct device *dev,
 	if (ret < 0) {
 		dev_warn(dev, "Failed to get K90 initial state (error %d).\n",
 			 ret);
-		ret = -EIO;
-		goto out;
+		return -EIO;
 	}
 	current_profile = data[7];
 	if (current_profile < 1 || current_profile > 3) {
 		dev_warn(dev, "Read invalid current profile: %02hhx.\n",
 			 data[7]);
-		ret = -EIO;
-		goto out;
+		return -EIO;
 	}
 
-	ret = snprintf(buf, PAGE_SIZE, "%d\n", current_profile);
-out:
-	kfree(data);
-
-	return ret;
+	return snprintf(buf, PAGE_SIZE, "%d\n", current_profile);
 }
 
 static ssize_t k90_store_current_profile(struct device *dev,
