#!/usr/bin/env python3

import sys
import argparse
import subprocess
from pathlib import Path
import logging
import coloredlogs

coloredlogs.install(fmt='%(asctime)s %(levelname)s %(message)s')

def kernel_img(kernel_dir) : return kernel_dir / "arch/x86/boot/bzImage"

def run(cmd, cwd = None):
    subprocess.run(cmd, cwd = cwd, stdin = subprocess.DEVNULL)

def build_poc(poc_dir):
    logging.info(f"Build POC at {poc_dir}")
    run(["make"], cwd = str(poc_dir))
    poc = poc_dir / "out" / poc_dir.name
    if poc.exists(): return poc
    else:
        logging.error(f"Fail to build POC ({poc} does not exists)")
        sys.exit(-1)

def execute_poc(poc, kernel_dir):
    logging.info(f"Execute POC ({poc}) on the Linux kernel ({kernel_dir})")
    args  = ["virtme-run", "--memory", "2G", "--mods=auto", "--kopt", "panic=-1"]
    args += ["--kopt", "panic_on_warn=1"]
    args += ["--verbose", "--show-boot-console"]
    args += ["--kimg", str(kernel_img(kernel_dir))]
    args += ["--rodir", f"/tmp/poc/={poc.parent}"]
    args += ["--script-sh", f"/tmp/poc/{poc.name}"]
    run(args)

def main(poc_dir, kernel_dir):
    if not poc_dir.exists():
        logging.error(f"POC dir ({poc_dir}) does not exists")
        sys.exit(-1)
    if not kernel_dir.exists():
        logging.error(f"Kernel dir ({kernel_dir}) does not exists")
        sys.exit(-1)
    if not kernel_img(kernel_dir).exists():
        logging.error(f"Kernel is not compiled")
        sys.exit(-1)
    poc = build_poc(poc_dir)
    execute_poc(poc, kernel_dir)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--poc", help="POC dir", required=True)
    parser.add_argument("--kernel", help="the vulnerable kernel src dir", required=True)
    args = parser.parse_args()
    main(Path(args.poc), Path(args.kernel))
