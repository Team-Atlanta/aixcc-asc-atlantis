#!/usr/bin/env python3

import os
import subprocess
import argparse
from pathlib import Path
import yaml
import glob
from multiprocessing import Pool

POC_DIR =  Path(os.path.dirname(os.path.realpath(__file__))) / "POCs"

def run(cmd, cwd = None, timeout=None):
    ret =  subprocess.run(cmd, cwd = cwd, stdin = subprocess.DEVNULL,
                                          stderr = subprocess.PIPE,
                                          stdout = subprocess.PIPE,
                                          timeout=timeout)
    out = ret.stdout + ret.stderr
    return out.decode("utf-8", errors="ignore").strip()

def kernel_img(kernel_dir) : return kernel_dir / "arch/x86/boot/bzImage"

def execute_poc(poc, kernel, sanitizers):
    args  = ["virtme-run", "--memory", "2G", "--mods=auto", "--kopt", "panic=-1"]
    args += ["--kopt", "panic_on_warn=1"]
    args += ["--verbose", "--show-boot-console"]
    args += ["--kimg", str(kernel_img(kernel))]
    args += ["--rodir", f"/tmp/poc/={poc.parent}"]
    args += ["--script-sh", f"/tmp/poc/{poc.name}"]
    out = ""
    try:
        out = run(args, timeout=120)
    except:
        try:
            out = run(args, timeout=120)
        except:
            return False
    for (_, s) in sanitizers.items():
        if s in out: return True
    return False

def save_poc(poc, out_dir):
    run (["cp", str(poc), str(out_dir / poc.name)])

class Runner:
    def __init__(self, proj, init, latest, out):
        with open(proj, "r") as f:
            info = yaml.safe_load(f)
            self.sanitizers = info["sanitizers"]
        self.init_kernel = init
        self.latest_kernel = latest
        self.out_dir = out

    def check_poc(self, poc):
        poc = Path(poc)
        bin = poc / "out" / poc.name
        if not bin.exists(): return
        if not execute_poc(bin, self.latest_kernel, self.sanitizers): return
        if (self.init_kernel == None) or (not execute_poc(bin, self.init_kernel, self.sanitizers)):
            save_poc(bin, self.out_dir)

def main(proj, init_kernel, latest_kernel, out_dir, ncpu):
    os.makedirs(out_dir, exist_ok = True)
    runner = Runner(proj, init_kernel, latest_kernel, out_dir)
    pocs = glob.glob(f"{POC_DIR}/CVE-*")
    if ncpu > len(pocs): ncpu = len(pocs)
    with Pool(ncpu) as p:
        p.map(runner.check_poc, pocs)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--proj", help="project.yaml", required = True, type = Path)
    parser.add_argument("--outdir", help="outdir", required = True, type = Path)
    parser.add_argument("--init-kernel", help="the kernel under the first commit", type = Path)
    parser.add_argument("--latest-kernel", help="the latest kernel under the latest commit", required = True, type = Path)
    parser.add_argument("--ncpu", help="number of cores", type = int, default=1)
    args = parser.parse_args()

    main(args.proj, args.init_kernel, args.latest_kernel, args.outdir, args.ncpu)
