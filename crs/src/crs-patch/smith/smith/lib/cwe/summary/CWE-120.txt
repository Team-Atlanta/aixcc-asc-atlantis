CWE-120 describes a common software vulnerability referred to as 'Buffer Copy without Checking Size of Input,' more popularly known as the 'Classic Buffer Overflow.' This weakness occurs when a program copies data from an input buffer to an output buffer without verifying if the input buffer's size surpasses that of the output buffer, leading to an overflow. Buffer overflows can cause various issues, including memory corruption, arbitrary code execution, crashes, and other behaviors that can compromise the security and stability of software applications.

The essence of this vulnerability lies in the improper handling of buffer sizes, where a program fails to enforce bounds checking on input, thus allowing more data to be written into a buffer than it can hold. This oversight can lead to overwriting adjacent memory spaces, potentially leading to unauthorized code execution or causing the program to behave unexpectedly. The issue is prevalent in lower-level programming languages like C and C++ that do not automatically manage memory, making it a classic problem that has plagued software development for decades. Effective mitigation involves adhering to secure coding practices such as input validation, using safer library functions that prevent overflows, applying compiler and runtime protections, and employing modern programming languages that inherently mitigate such vulnerabilities.