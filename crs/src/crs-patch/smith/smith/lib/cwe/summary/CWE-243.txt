CWE-243 describes the security weakness that occurs when the `chroot()` system call, meant for creating a "chroot jail," is used without subsequently changing the working directory of the process. This can lead to a scenario where relative path access allows an attacker to bypass the intended restrictions of the chroot jail and gain access to files outside of it. Essentially, the flaw lies in the misuse of the `chroot()` function, which, although designed to limit a process's file system access to a specific directory tree, does not inherently change the process's current working directory. As a result, without an explicit directive to change the working directory to the root of the chroot jail (typically done with `chdir("/")` immediately following `chroot()`), processes may still reference and potentially access files outside the intended secure environment through relative paths. This vulnerability is significant because chroot jails are often used to add an extra layer of security, such as in FTP servers, to limit the damage that can be done if the server is compromised. The vulnerability is introduced at the implementation phase, particularly when developers do not fully adhere to security specifications or misunderstand the security properties of the `chroot()` system call. The potential impact of exploiting this weakness includes unauthorized reading of files or directories outside the chroot jail, which could lead to compromised confidentiality of data. Detection methods with a high degree of effectiveness include Automated Static Analysis tools that analyze source code for patterns indicative of this flaw.