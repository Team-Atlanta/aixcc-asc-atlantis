CWE-1045 describes a scenario where a parent class is defined with a virtual destructor, but one or more of its child classes are not implementing a virtual destructor. This configuration can compromise the reliability of an application by preventing it from executing necessary cleanup operations. Specifically, if objects are deleted through pointers to the base class, destructors of derived classes are not called, leading to potential resource leaks such as memory leaks (identified under CWE-401), when the destructor of the child class fails to release resources or perform important termination tasks. It is highlighted that such a situation not only represents poor coding practices but also constitutes a quality issue that could indirectly facilitate the introduction of security vulnerabilities or hinder their detection. The issue falls under the category of "Insufficient Adherence to Expected Conventions" at a more abstract level and is flagged as a concern in terms of application reliability and maintainability, as per classifications by related CISQ (Consortium for IT Software Quality) measures. The problem is accentuated when such code paths are accessible to attackers, amplifying the importance of adhering to proper inheritance and destructor practices in object-oriented programming, especially in languages like C++.