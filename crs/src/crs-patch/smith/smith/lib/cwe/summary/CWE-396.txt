CWE-396: Declaration of Catch for Generic Exception is a software weakness where overly broad exceptions are caught, leading to complex error handling code that may conceal security vulnerabilities. This practice defies the purpose of using typed exceptions in programming languages by obscuring exceptions that require specific handling or shouldn't be caught at certain points in a program's execution. It becomes particularly problematic as a program evolves and begins throwing new types of exceptions, which then go unaddressed due to the broad catch. For example, in Java, opting to catch a high-level Exception class instead of specific exception types can inadvertently handle exceptions not intended by the programmer, such as NullPointerExceptions or ClassCastException, especially if new exceptions are added to the `doExchange()` method. This practice violates non-repudiation by hiding activities or altering execution logic and is considered a bad programming practice that can lead to various negative consequences, including the masking of actual errors and unexpected program behavior. Automated static analysis tools can effectively detect instances of this CWE by analyzing source or compiled code without execution, thus helping prevent the introduction of this weakness during the implementation phase.