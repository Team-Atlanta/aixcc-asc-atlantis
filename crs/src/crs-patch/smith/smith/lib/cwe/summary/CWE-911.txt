CWE-911 describes a software weakness concerning the improper update of reference counts, which are used to manage the allocation and deallocation of resources, such as memory. Reference counts track how many objects hold a reference to a particular resource; when this count hits zero, indicating no objects use the resource, it can be safely reclaimed. However, if an application fails to update or incorrectly updates the reference count, it can lead to two types of critical issues. Firstly, premature deallocation might occur if a resource's reference count is erroneously reduced to zero while still in use, potentially leading to resource conflicts, data corruption, or unauthorized access. Conversely, if objects cease using a resource but its count remains above zero due to mismanagement, the resource might never be released, leading to memory leaks and resource exhaustion. These issues are not language-specific and have been identified in various programming environments, including but not limited to C and C++, with a medium likelihood of exploitation. Examples in the wild (CVE-2002-0574, CVE-2004-0114, etc.) demonstrate diverse exploitation scenarios ranging from memory leaks and unauthorized access to denial of service and code execution, pointing to the critical need for accurate reference count management in software development to maintain resource integrity and application security.