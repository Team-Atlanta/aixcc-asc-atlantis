CWE-367, known as the "Time-of-check Time-of-use (TOCTOU) Race Condition," describes a vulnerability that occurs when a program checks the state of a resource and then uses that resource after a temporal gap, during which the state of the resource can change in a way that invalidates the integrity of the check. This vulnerability leads to the program making decisions based on outdated information, thus performing actions that assume a false state of the environment. Such vulnerabilities are particularly concerning when an attacker has the capability to influence the state of the resource between the check and the use instances. This can lead to various security issues, including unauthorized access to or modification of resources. The TOCTOU problem is not language-specific and can occur in various contexts where shared resources—like files, memory, or variables in multithreaded applications—are used without proper synchronization mechanisms in place. Mitigation strategies involve minimizing the window period between check and use, using atomic operations where possible, rechecking state post-use, or implementing locking mechanisms to ensure the resource state remains consistent between check and use phases.