CWE-833, known as "Deadlock," outlines a critical issue where multiple threads or executable segments in a product wait for each other to release a necessary lock, ultimately leading to deadlock. This base level weakness is detailed enough to provide specific methods for detection and prevention, yet mostly independent of a particular resource or technology. Deadlocks can significantly impact availability by causing threads of execution to "hang," prevent tasks from completing, or even lead to CPU consumption issues if a lock check occurs in a tight loop. Various observed examples of this weakness include issues within operating systems, libraries, and web servers, triggering deadlocks through invalid instructions, simultaneous function calls, or operations performed on resources during removal. Deadlocks are linked to Improper Locking (CWE-667) and Improper Synchronization (CWE-662), showcasing how resource locking problems can lead to severe consequences, such as denial of service through resource consumption or system crashes. Deadlocks not only pose a theoretical risk but have also been evidenced in real-world vulnerabilities across multiple platforms and applications.