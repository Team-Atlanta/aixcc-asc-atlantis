CWE-698, Execution After Redirect (EAR), identifies a software weakness where a web application issues a redirect to another location but continues to execute additional code afterwards instead of exiting immediately. This flaw is categorized as a Base level weakness, meaning it provides enough detail for specific detection and prevention methodologies and describes issues across behavior, property, technology, language, and resources. The problem lies in the application's control flow, where unintended code may run after a redirect operation, potentially allowing unauthorized code execution or altering the execution logic. Common consequences include the ability for attackers to bypass authentication, perform DoS attacks, or execute unauthorized commands, affecting confidentiality, integrity, and availability.

For example, a scenario demonstrates the vulnerability when a PHP script attempts to redirect unauthorized users but still proceeds to execute further code, making sensitive server status information accessible even after a redirect. This could lead to information disclosure or denial of service (DoS) conditions. Notably, such weaknesses have been cited in various CVE records, highlighting real-world exploits where EAR allowed attackers to access sensitive application configurations or perform unauthorized actions. Detection tactics primarily center around black box testing methods, which may not always reveal the issue if the tester's browser adheres to the redirect, obscuring potential malicious outputs.