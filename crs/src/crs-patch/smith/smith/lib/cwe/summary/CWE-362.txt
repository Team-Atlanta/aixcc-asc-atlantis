The Common Weakness Enumeration (CWE) -362 refers to a "Concurrent Execution using Shared Resource with Improper Synchronization", commonly known as a 'Race Condition'. This occurs when a code sequence requiring temporary, exclusive access to a shared resource is run concurrently with other code but lacks appropriate synchronization. A timing window exists where the shared resource may be modified by another concurrently-running code sequence, creating security implications especially if the code operates security-critical functions. Properties of atomicity and exclusivity are violated in race conditions - the code sequence isn't given exclusive access to the shared resource and isn't behaviorally atomic. To mitigate such weaknesses, programmers can use synchronization primitives in supported languages or reduce the usage of shared resources. Detection methods include fuzz testing, robustness testing, and fault injection. Particularly, thread-safe functions, mutex usage, atomic operations are recommended while avoiding double-check locking.