Wrap-around error, identified as CWE-128, describes a condition where a value exceeds the maximum limit for its type and consequently "wraps around" to a smaller, potentially negative, or undefined value. This kind of error is considered a base level weakness, indicating that while it is somewhat independent of the technology or resource in use, it contains enough detail for specific detection and prevention methods to be applied. This error primarily results from how computers handle addition; if a data type is incremented beyond its maximum capacity, the execution continues as if additional space is available, leading to unintended negative values or wrap-around due to the binary representation of numbers. This weakness is mostly prevalent in languages like C and C++, where manual memory management and data type handling expose the risk of such overflow conditions.

The consequences of a wrap-around error can vary, affecting the software's availability, integrity, and confidentiality. They can lead to undefined behavior, including crashes, infinite loops, or data corruption, and in some cases, may be exploited to execute unauthorized code or commands due to buffer overflow resulting from the wrap-around. It is medium likely to be exploited and can be mitigated through careful validation of all incremented variables or by choosing programming languages less susceptible to these issues. This CWE is part of several CWE categories related to incorrect calculation and numeric errors and has mappings in various security and computing taxonomy systems, underscoring its importance in the realm of software development and security.