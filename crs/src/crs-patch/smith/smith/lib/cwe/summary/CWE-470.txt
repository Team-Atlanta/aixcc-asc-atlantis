CWE-470, titled "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')," describes a vulnerability where a product uses external input to determine which classes or methods to instantiate or invoke via reflection but fails to prevent improper or unexpected classes or methods from being selected. This security weakness can lead to unanticipated control flow paths that bypass authentication or access control checks, manifesting in unintended product behavior. If an attacker can influence this behavior, particularly by uploading files into the product's classpath (CWE-427) or modifying the classpath (CWE-426), they might introduce new, malicious behaviors into the application. The problem is exacerbated if the application uses reflection without adequate validation of the input, as it opens up possibilities for executing unauthorized commands, altering execution logic, causing denial of service, or leaking sensitive information through error messages.

Common methods to mitigate this issue involve refactoring code to avoid the use of reflection, employing strict input validation techniques such as allowlists, and ensuring that user-controlled inputs are not used to select and load classes or code dynamically. Demonstration examples highlight scenarios where insecure reflection practices can lead to significant security vulnerabilities, emphasizing the need for developers to be vigilant about how external inputs are used in conjunction with reflection. Effective detection methods include automated static analysis, which can identify potentially vulnerable patterns by analyzing code without execution. This CWE is critical for maintaining software integrity, confidentiality, and availability, and robust mitigation practices are essential for securing applications against reflection-based attacks.