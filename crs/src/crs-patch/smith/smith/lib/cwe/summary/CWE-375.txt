CWE-375 identifies a critical weakness associated with returning mutable objects to untrusted callers, potentially leading to security vulnerabilities. This weakness, classified under Base level abstraction, involves scenarios where functions return references to mutable data, which external code—having called the function—can alter. This alteration might occur if the data wasn't cloned before being sent, leading to modifications that could break assumptions about the class's internal state, particularly regarding its integrity and access control. Such modifications can affect memory and data integrity, posing a medium likelihood of exploitation. Demonstrative examples show that even private class members, like a patient list in a clinical trial class in Java, can be modified unknowingly when returned directly, bypassing encapsulation and expected behavior. To mitigate this vulnerability, it's recommended to declare data intended to remain unaltered as constant or immutable and to clone mutable data before returning references to it, ensuring that the class retains a valid copy of its data unaffected by external changes. This weakness is relevant to various platforms, including programming languages like C, C++, Java, and C#, and maps to several taxonomies and guidelines aimed at promoting secure coding practices, indicating its wide-reaching implications across software development.