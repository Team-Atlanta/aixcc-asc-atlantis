CWE-328 refers to the vulnerability arising from the use of weak hash functions in cryptographic systems. A hash function maps arbitrarily sized data to a fixed-size digest, under the conditions that it is not invertible and deterministic (the same input generates the same output consistently). For cryptographic purposes, a hash function must also ensure resistance against attacks such as preimage (determining the original input from the hash), second preimage (finding a different input that produces the same hash), and birthday attacks (finding multiple inputs that yield the same hash under feasible conditions). Algorithms that fail these conditions are considered weak, potentially allowing adversaries to compromise the security system. This weakness can be exploited in various scenarios, such as password storage without salting, leading to vulnerabilities like the creation of rainbow tables for reversing password hashes.

Weak hash usage not only undermines cryptographic integrity but also enables bypassing of security mechanisms, posing threats across various software and hardware contexts, regardless of the specific technology employed. Historical instances include inadequate protection due to reliance on compromised algorithms like SHA-1 or MD5, and noted vulnerabilities in operational technology systems where weak hashing contributed to significant security lapses. Mitigation strategies involve employing adaptive hash functions that allow for configurable computational effort, thereby enhancing resistance against brute force and other forms of attacks. Prominent recommendations for secure hashing practices include the use of algorithms such as bcrypt, scrypt, and PBKDF2, each offering mechanisms to thwart common cryptographic attacks through techniques like salting and iterative hash calculations.