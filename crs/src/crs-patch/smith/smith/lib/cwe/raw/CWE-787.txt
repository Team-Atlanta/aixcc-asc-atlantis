CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-787: Out-of-bounds Write
 
 Weakness ID: 787
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product writes data past the end, or before the beginning, of the intended buffer.
 + Extended Description
 Typically, this can result in corruption of data, a crash, or code execution. The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the
 boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results.
 + Alternate Terms
 Memory Corruption: Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is invalid, when the root cause is something other than a
                    sequential copy of excessive data from a fixed starting location. This may include issues such as incorrect pointer arithmetic, accessing invalid pointers due to incomplete
                    initialization or memory release, etc.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID          Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory Buffer
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        121     Stack-based
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Buffer Overflow
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        122     Heap-based
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Buffer Overflow
 ParentOf                                                                                  BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           123     Write-what-where
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Condition
 ParentOf                                                                                  BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           124     Buffer
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Underwrite
                                                                                                                                                                                                                                                                                                                                                                             ('Buffer
                                                                                                                                                                                                                                                                                                                                                                             Underflow')
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           822     Untrusted
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Pointer
                                                                                                                                                                                                                                                                                                                                                                             Dereference
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           823     Use of
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Out-of-range
                                                                                                                                                                                                                                                                                                                                                                             Pointer Offset
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           824     Access of
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Uninitialized
                                                                                                                                                                                                                                                                                                                                                                             Pointer
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           825     Expired Pointer
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Dereference
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1218    Memory Buffer Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Data Protection Measures" (CWE-1340)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Often Prevalent)

 C++ (Often Prevalent)

 Class: Assembly (Undetermined Prevalence)

 Technologies

 Class: ICS/OT (Often Prevalent)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands
 Availability
 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 The following code attempts to save four different identification numbers into an array.

 (bad code)
 Example Language: C 
 int id_sequence[3];

 /* Populate the id array. */

 id_sequence[0] = 123;
 id_sequence[1] = 234;
 id_sequence[2] = 345;
 id_sequence[3] = 456;

 Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds.

 Example 2

 In the following code, it is possible to request that memcpy move a much larger segment of memory than assumed:

 (bad code)
 Example Language: C 
 int returnChunkSize(void *) {

 /* if chunk info is valid, return the size of usable memory,

 * else, return -1 to indicate an error

 */
 ...
 }
 int main() {
 ...
 memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));
 ...
 }

 If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to
 memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the
 destination buffer (CWE-787, CWE-788).

 Example 3

 This code takes an IP address from the user and verifies that it is well formed. It then looks up the hostname and copies it into a buffer.

 (bad code)
 Example Language: C 
 void host_lookup(char *user_supplied_addr){
 struct hostent *hp;
 in_addr_t *addr;
 char hostname[64];
 in_addr_t inet_addr(const char *cp);

 /*routine that ensures user_supplied_addr is in the right format for conversion */

 validate_addr_form(user_supplied_addr);
 addr = inet_addr(user_supplied_addr);
 hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);
 strcpy(hostname, hp->h_name);
 }

 This function allocates a buffer of 64 bytes to store the hostname. However, there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which
 resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.

 Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).

 Example 4

 This code applies an encoding procedure to an input string and stores it into a buffer.

 (bad code)
 Example Language: C 
 char * copy_input(char *user_supplied_string){
 int i, dst_index;
 char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);
 if ( MAX_SIZE <= strlen(user_supplied_string) ){
 die("user string too long, die evil hacker!");
 }
 dst_index = 0;
 for ( i = 0; i < strlen(user_supplied_string); i++ ){
 if( '&' == user_supplied_string[i] ){
 dst_buf[dst_index++] = '&';
 dst_buf[dst_index++] = 'a';
 dst_buf[dst_index++] = 'm';
 dst_buf[dst_index++] = 'p';
 dst_buf[dst_index++] = ';';
 }
 else if ('<' == user_supplied_string[i] ){

 /* encode to &lt; */
 }
 else dst_buf[dst_index++] = user_supplied_string[i];
 }
 return dst_buf;
 }

 The programmer attempts to encode the ampersand character in the user-controlled string. However, the length of the string is validated before the encoding procedure is applied. Furthermore, the
 programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the
 string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.

 Example 5

 In the following C/C++ code, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while
 statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.

 (bad code)
 Example Language: C 
 char* trimTrailingWhitespace(char *strMessage, int length) {
 char *retMessage;
 char *message = malloc(sizeof(char)*(length+1));

 // copy input string to a temporary string
 char message[length+1];
 int index;
 for (index = 0; index < length; index++) {
 message[index] = strMessage[index];
 }
 message[index] = '\0';

 // trim trailing whitespace
 int len = index-1;
 while (isspace(message[len])) {
 message[len] = '\0';
 len--;
 }

 // return string without trailing whitespace
 retMessage = message;
 return retMessage;
 }

 However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character
 string and will call the isspace() function on an address outside of the bounds of the local buffer.

 Example 6

 The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the
 elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.

 (bad code)
 Example Language: C 
 int i;
 unsigned int numWidgets;
 Widget **WidgetList;

 numWidgets = GetUntrustedSizeValue();
 if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {
 ExitError("Incorrect number of widgets requested!");
 }
 WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));
 printf("WidgetList ptr=%p\n", WidgetList);
 for(i=0; i<numWidgets; i++) {
 WidgetList[i] = InitializeWidget();
 }
 WidgetList[numWidgets] = NULL;
 showWidgets(WidgetList);

 However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL
 pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is
 assigned. Depending on the environment and compilation settings, this could cause memory corruption.

 Example 7

 The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring "Replace Me" in destBuf with the string stored in srcBuf. It does so by
 using the function strstr(), which returns a pointer to the found substring in destBuf. Using pointer arithmetic, the starting index of the substring is found.

 (bad code)
 Example Language: C 
 int main() {
 ...
 char *result = strstr(destBuf, "Replace Me");
 int idx = result - destBuf;
 strcpy(&destBuf[idx], srcBuf);
 ...
 }

 In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number. If idx
 is negative, this will result in a buffer underwrite of destBuf.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2021-21220          Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.
 CVE-2021-28664          GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.
 CVE-2020-17087          Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA
                         KEV.
 CVE-2020-1054           Out-of-bounds write in kernel-mode driver, as exploited in the wild per CISA KEV.
 CVE-2020-0041           Escape from browser sandbox using out-of-bounds write due to incorrect bounds check, as exploited in the wild per CISA KEV.
 CVE-2020-0968           Memory corruption in web browser scripting engine, as exploited in the wild per CISA KEV.
 CVE-2020-0022           chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787)
 CVE-2019-1010006        Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).
 CVE-2009-1532           malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption
 CVE-2009-0269           chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.
 CVE-2002-2227           Unchecked length of SSLv2 challenge value leads to buffer underflow.
 CVE-2007-4580           Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)
 CVE-2007-4268           Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)
 CVE-2009-2550           Classic stack-based buffer overflow in media player using a long entry in a playlist
 CVE-2009-2403           Heap-based buffer overflow in media player using a long entry in a playlist
 + Potential Mitigations
 Phase: Requirements

 Strategy: Language Selection

 Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow
 protection, but the protection can be disabled by the programmer.

 Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.

 Phase: Architecture and Design

 Strategy: Libraries or Frameworks

 Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone
 string-handling functions.

 Note: This is not a complete solution, since many buffer overflows are not related to strings.
 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat
 FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.

 D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.

 Effectiveness: Defense in Depth

 Note:

 This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to
 exit the application.

 Phase: Implementation

 Consider adhering to the following rules when allocating and managing an application's memory:

   • Double check that the buffer is as large as specified.
   • When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the
     string.
   • Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.
   • If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.

 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it
 can prevent an attacker from reliably jumping to exploitable code.

 Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default
 memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot
 be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.

 For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].

 Effectiveness: Defense in Depth

 Note: These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337
 ]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]
 Phase: Operation

 Strategy: Environment Hardening

 Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [
 REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.

 For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].

 Effectiveness: Defense in Depth

 Note: This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases
 in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
 Phase: Implementation

 Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.

 Effectiveness: Moderate

 Note: This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).
 + Detection Methods
 Automated Static Analysis

 This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.

 Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which
 warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid
 or other special privileges.

 Effectiveness: High

 Note: Detection techniques for buffer-related errors are more mature than for most other weakness types.
 Automated Dynamic Analysis

 This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness
 testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1200    Weaknesses in
                                                                                                                                                                                                                      the 2019 CWE
                                                                                                                                                                                                                      Top 25 Most
                                                                                                                                                                                                                      Dangerous
                                                                                                                                                                                                                      Software Errors
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1337    Weaknesses in
                                                                                                                                                                                                                      the 2021 CWE
                                                                                                                                                                                                                      Top 25 Most
                                                                                                                                                                                                                      Dangerous
                                                                                                                                                                                                                      Software
                                                                                                                                                                                                                      Weaknesses
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1350    Weaknesses in
                                                                                                                                                                                                                      the 2020 CWE
                                                                                                                                                                                                                      Top 25 Most
                                                                                                                                                                                                                      Dangerous
                                                                                                                                                                                                                      Software
                                                                                                                                                                                                                      Weaknesses
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1366    ICS
                                                                                                                                                                                                                      Communications:
                                                                                                                                                                                                                      Frail Security
                                                                                                                                                                                                                      in Protocols
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1387    Weaknesses in
                                                                                                                                                                                                                      the 2022 CWE
                                                                                                                                                                                                                      Top 25 Most
                                                                                                                                                                                                                      Dangerous
                                                                                                                                                                                                                      Software
                                                                                                                                                                                                                      Weaknesses
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1399    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Memory Safety
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1425    Weaknesses in
                                                                                                                                                                                                                      the 2023 CWE
                                                                                                                                                                                                                      Top 25 Most
                                                                                                                                                                                                                      Dangerous
                                                                                                                                                                                                                      Software
                                                                                                                                                                                                                      Weaknesses
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                 Fit                                                                 Mapped Node Name
 ISA/IEC 62443                    Part 3-3                                    Req SR 3.5
 ISA/IEC 62443                    Part 4-1                                    Req SI-1
 ISA/IEC 62443                    Part 4-1                                    Req SI-2
 ISA/IEC 62443                    Part 4-1                                    Req SVV-1
 ISA/IEC 62443                    Part 4-1                                    Req SVV-3
 ISA/IEC 62443                    Part 4-2                                    Req CR 3.5
 + References
 [REF-1029] Aleph One. "Smashing The Stack For Fun And Profit". 1996-11-08. <http://phrack.org/issues/49/14.html>.
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 5, "Stack Overruns" Page 129. 2nd Edition. Microsoft Press. 2002-12-04. <https://www.microsoftpressstore.com/store/
 writing-secure-code-9780735617223>.
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 5, "Heap Overruns" Page 138. 2nd Edition. Microsoft Press. 2002-12-04. <https://www.microsoftpressstore.com/store/
 writing-secure-code-9780735617223>.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 5: Buffer Overruns." Page 89. McGraw-Hill. 2010.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 3, "Nonexecutable Stack", Page 76. 1st Edition. Addison Wesley. 2006.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 5, "Protection Mechanisms", Page 189. 1st Edition. Addison Wesley. 2006.
 [REF-90] "Buffer UNDERFLOWS: What do you know about it?". Vuln-Dev Mailing List. 2004-01-10. <https://seclists.org/vuln-dev/2004/Jan/22>. URL validated: 2023-04-07.
 [REF-56] Microsoft. "Using the Strsafe.h Functions". <https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN>. URL validated: 2023-04-07.
 [REF-57] Matt Messier and John Viega. "Safe C String Library v1.0.3". <http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html>. URL validated:
 2023-04-07.
 [REF-58] Michael Howard. "Address Space Layout Randomization in Windows Vista". <https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista
 >. URL validated: 2023-04-07.
 [REF-60] "PaX". <https://en.wikipedia.org/wiki/Executable_space_protection#PaX>. URL validated: 2023-04-07.
 [REF-61] Microsoft. "Understanding DEP as a mitigation technology part 1". <https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/>. URL validated:
 2023-04-07.
 [REF-64] Grant Murphy. "Position Independent Executables (PIE)". Red Hat. 2012-11-28. <https://www.redhat.com/en/blog/position-independent-executables-pie>. URL validated: 2023-04-07.
 [REF-1332] John Richard Moser. "Prelink and address space randomization". 2006-07-05. <https://lwn.net/Articles/190139/>. URL validated: 2023-04-26.
 [REF-1333] Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh. "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR". 2016. <http://www.cs.ucr.edu/~nael/pubs/micro16.pdf>. URL
 validated: 2023-04-26.
 [REF-1334] D3FEND. "Stack Frame Canary Validation (D3-SFCV)". 2023. <https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/>. URL validated: 2023-04-26.
 [REF-1335] D3FEND. "Segment Address Offset Randomization (D3-SAOR)". 2023. <https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/>. URL validated: 2023-04-26.
 [REF-1336] D3FEND. "Process Segment Execution Prevention (D3-PSEP)". 2023. <https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/>. URL validated: 2023-04-26.
 [REF-1337] Alexander Sotirov and Mark Dowd. "Bypassing Browser Memory Protections: Setting back browser security by 10 years". Memory information leaks. 2008. <https://www.blackhat.com/
 presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf>. URL validated: 2023-04-26.
 + Content History
                                                                                            + Submissions
    Submission Date                                                         Submitter                                                                            Organization
 2009-10-21             CWE Content Team                                                                                                   MITRE
 (CWE 1.6, 2009-10-29)

                                                                                           + Contributions
   Contribution Date                                                       Contributor                                                                           Organization
 2023-04-25             "Mapping CWE to 62443" Sub-Working Group                                                                           CWE-CAPEC ICS/OT SIG
                        Suggested mappings to ISA/IEC 62443.
                                                                                           + Modifications
   Modification Date                                                         Modifier                                                                            Organization
 2010-02-16             CWE Content Team                                                                                                   MITRE
                        updated Demonstrative_Examples
 2010-09-27             CWE Content Team                                                                                                   MITRE
                        updated Relationships
 2011-06-01             CWE Content Team                                                                                                   MITRE
                        updated Common_Consequences
 2014-06-23             CWE Content Team                                                                                                   MITRE
                        updated Demonstrative_Examples
 2015-12-07             CWE Content Team                                                                                                   MITRE
                        updated Relationships
 2018-03-27             CWE Content Team                                                                                                   MITRE
                        updated Description
 2019-09-19             CWE Content Team                                                                                                   MITRE
                        updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, References, Relationships,
                        Time_of_Introduction
 2020-02-24             CWE Content Team                                                                                                   MITRE
                        updated Observed_Examples, Relationships
 2020-06-25             CWE Content Team                                                                                                   MITRE
                        updated Observed_Examples
 2020-08-20             CWE Content Team                                                                                                   MITRE
                        updated Alternate_Terms, Demonstrative_Examples, Observed_Examples, Relationships
 2020-12-10             CWE Content Team                                                                                                   MITRE
                        updated Relationships
 2021-03-15             CWE Content Team                                                                                                   MITRE
                        updated Demonstrative_Examples
 2021-07-20             CWE Content Team                                                                                                   MITRE
                        updated Demonstrative_Examples, Potential_Mitigations, Relationships
 2022-06-28             CWE Content Team                                                                                                   MITRE
                        updated Observed_Examples, Relationships
 2022-10-13             CWE Content Team                                                                                                   MITRE
                        updated Applicable_Platforms
 2023-01-31             CWE Content Team                                                                                                   MITRE
                        updated Alternate_Terms, Demonstrative_Examples, Description
 2023-04-27             CWE Content Team                                                                                                   MITRE
                        updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
 2023-06-29             CWE Content Team                                                                                                   MITRE
                        updated Mapping_Notes, Relationships, Taxonomy_Mappings
 2024-02-29             CWE Content Team                                                                                                   MITRE
 (CWE 4.14, 2024-02-29) updated Demonstrative_Examples
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

