CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-807: Reliance on Untrusted Inputs in a Security Decision
 
 Weakness ID: 807
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.
 + Extended Description
 
 Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other
 attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the
 software.

 Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.

 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID          Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          693     Protection
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Mechanism Failure
 ParentOf                                                                                   BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                             302     Authentication
                                                                                                                           typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                    Bypass by
                                                                                                                                                                                                                                                                                                                                                                                Assumed-Immutable
                                                                                                                                                                                                                                                                                                                                                                                Data
 ParentOf                                                                                VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                         350     Reliance on
                                                                                                                                describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                         Reverse DNS
                                                                                                                                                                                                                                                                                                                                                                                Resolution for a
                                                                                                                                                                                                                                                                                                                                                                                Security-Critical
                                                                                                                                                                                                                                                                                                                                                                                Action
 ParentOf                                                                                VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                         784     Reliance on
                                                                                                                                describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                         Cookies without
                                                                                                                                                                                                                                                                                                                                                                                Validation and
                                                                                                                                                                                                                                                                                                                                                                                Integrity
                                                                                                                                                                                                                                                                                                                                                                                Checking in a
                                                                                                                                                                                                                                                                                                                                                                                Security Decision
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1006    Bad Coding Practices
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1012    Cross Cutting
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
          Phase                                                                                             Note
 Architecture and Design COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Confidentiality    Technical Impact: Bypass Protection Mechanism; Gain Privileges or Assume Identity; Varies by Context
 Access Control
 Availability       Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can
 Other              range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or
                    modification of sensitive data, system crash, or execution of arbitrary code.
 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 The following code excerpt reads a value from a browser cookie to determine the role of the user.

 (bad code)
 Example Language: Java 
 Cookie[] cookies = request.getCookies();
 for (int i =0; i< cookies.length; i++) {
 Cookie c = cookies[i];
 if (c.getName().equals("role")) {
 userRole = c.getValue();
 }
 }

 Example 2

 The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.

 (bad code)
 Example Language: PHP 
 $auth = $_COOKIES['authenticated'];
 if (! $auth) {
 if (AuthenticateUser($_POST['user'], $_POST['password']) == "success") {
 // save the cookie to send out in future responses
 setcookie("authenticated", "1", time()+60*60*2);
 }
 else {
 ShowLoginScreen();
 die("\n");
 }
 }
 DisplayMedicalHistory($_POST['patient_ID']);

 The programmer expects that the AuthenticateUser() check will always be applied, and the "authenticated" cookie will only be set when authentication succeeds. The programmer even diligently specifies
 a 2-hour expiration for the cookie.

 However, the attacker can set the "authenticated" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has
 bypassed the authentication.

 Example 3

 In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.

 (bad code)
 Example Language: Java 
 Cookie[] cookies = request.getCookies();
 for (int i =0; i< cookies.length; i++) {
 Cookie c = cookies[i];
 if (c.getName().equals("authenticated") && Boolean.TRUE.equals(c.getValue())) {
 authenticated = true;
 }
 }

 Example 4

 The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.

 (bad code)
 Example Language: C 
 struct hostent *hp;struct in_addr myaddr;
 char* tHost = "trustme.example.com";
 myaddr.s_addr=inet_addr(ip_addr_string);

 hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);
 if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {
 trusted = true;
 } else {
 trusted = false;
 }
 (bad code)
 Example Language: Java 
 String ip = request.getRemoteAddr();
 InetAddress addr = InetAddress.getByName(ip);
 if (addr.getCanonicalHostName().endsWith("trustme.com")) {
 trusted = true;
 }
 (bad code)
 Example Language: C# 
 IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);
 IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);
 if (hostInfo.HostName.EndsWith("trustme.com")) {
 trusted = true;
 }

 IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged
 IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically
 attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the
 Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2009-1549           Attacker can bypass authentication by setting a cookie to a specific value.
 CVE-2009-1619           Attacker can bypass authentication and gain admin privileges by setting an "admin" cookie to 1.
 CVE-2009-0864           Content management system allows admin privileges by setting a "login" cookie to "OK."
 CVE-2008-5784           e-dating application allows admin privileges by setting the admin cookie to 1.
 CVE-2008-6291           Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to "admin."
 + Potential Mitigations
 Phase: Architecture and Design

 Strategy: Attack Surface Reduction

 Store state information and sensitive data on the server side only.

 Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to
 affect state directly in any way other than through legitimate actions leading to state transitions.

 If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message
 authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the
 integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).

 Phase: Architecture and Design

 Strategy: Libraries or Frameworks

 Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 With a stateless protocol such as HTTP, use a framework that maintains the state for you.

 Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].

 Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.

 Phase: Architecture and Design

 For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks
 by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
 Phases: Operation; Implementation

 Strategy: Environment Hardening

 When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of
 implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
 Phases: Architecture and Design; Implementation

 Strategy: Attack Surface Reduction

 Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups,
 query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained
 indirectly through API calls.

 Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to
 keep critical information about the user's session on the server side instead of recording it within external data.

 + Detection Methods
 Manual Static Analysis

 Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false
 positives if all potentially-vulnerable operations can be assessed within limited time constraints.

 Effectiveness: High

 Note: The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software.
 Automated Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Bytecode Weakness Analysis - including disassembler + source code weakness analysis
   • Binary Weakness Analysis - including disassembler + source code weakness analysis

 Effectiveness: SOAR Partial

 Manual Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies

 Effectiveness: SOAR Partial

 Dynamic Analysis with Automated Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Web Application Scanner
   • Web Services Scanner
   • Database Scanners

 Effectiveness: SOAR Partial

 Dynamic Analysis with Manual Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Fuzz Tester
   • Framework-based Fuzzer
   • Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious

 Effectiveness: SOAR Partial

 Manual Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Manual Source Code Review (not inspections)

 Effectiveness: High

 Automated Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Source code Weakness Analyzer
   • Context-configured Source Code Weakness Analyzer

 Effectiveness: SOAR Partial

 Architecture or Design Review

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
   • Formal Methods / Correct-By-Construction

 Cost effective for partial coverage:

   • Attack Modeling

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            803     2010 Top 25 -
                                                                                                                                                                                                                      Porous Defenses
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            859     The CERT Oracle
                                                                                                                                                                                                                      Secure Coding
                                                                                                                                                                                                                      Standard for
                                                                                                                                                                                                                      Java (2011)
                                                                                                                                                                                                                      Chapter 16 -
                                                                                                                                                                                                                      Platform
                                                                                                                                                                                                                      Security (SEC)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            866     2011 Top 25 -
                                                                                                                                                                                                                      Porous Defenses
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            878     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      10 -
                                                                                                                                                                                                                      Environment
                                                                                                                                                                                                                      (ENV)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1348    OWASP Top Ten
                                                                                                                                                                                                                      2021 Category
                                                                                                                                                                                                                      A04:2021 -
                                                                                                                                                                                                                      Insecure Design
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1365    ICS
                                                                                                                                                                                                                      Communications:
                                                                                                                                                                                                                      Unreliability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1373    ICS Engineering
                                                                                                                                                                                                                      (Construction/
                                                                                                                                                                                                                      Deployment):
                                                                                                                                                                                                                      Trust Model
                                                                                                                                                                                                                      Problems
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1413    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Protection
                                                                                                                                                                                                                      Mechanism
                                                                                                                                                                                                                      Failure
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID          Fit                                                                 Mapped Node Name
 The CERT Oracle Secure Coding    SEC09-J                       Do not base security checks on untrusted sources
 Standard for Java (2011)
 + References
 [REF-754] Frank Kim. "Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision". SANS Software Security Institute. 2010-03-05. <https://www.sans.org/blog/
 top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/>. URL validated: 2023-04-07.
 [REF-529] "HMAC". Wikipedia. 2011-08-18. <https://en.wikipedia.org/wiki/HMAC>. URL validated: 2023-04-07.
 [REF-756] Scott Mitchell. "Understanding ASP.NET View State". Microsoft. 2004-05-15. <https://learn.microsoft.com/en-us/previous-versions/dotnet/articles/ms972976(v=msdn.10)?redirectedfrom=MSDN>.
 URL validated: 2023-04-07.
 [REF-45] OWASP. "OWASP Enterprise Security API (ESAPI) Project". <http://www.owasp.org/index.php/ESAPI>.
 + Content History
                                                                                            + Submissions
          Submission Date                                                    Submitter                                                                      Organization
 2010-01-18                         CWE Content Team                                                                            MITRE
 (CWE 1.8, 2010-02-16)

                                                                                           + Modifications
         Modification Date                                                   Modifier                                                                       Organization
 2010-06-21                         CWE Content Team                                                                            MITRE
                                    updated Common_Consequences, Potential_Mitigations, References
 2010-09-27                         CWE Content Team                                                                            MITRE
                                    updated Potential_Mitigations
 2011-06-01                         CWE Content Team                                                                            MITRE
                                    updated Common_Consequences
 2011-06-27                         CWE Content Team                                                                            MITRE
                                    updated Common_Consequences, Relationships
 2011-09-13                         CWE Content Team                                                                            MITRE
                                    updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
 2012-05-11                         CWE Content Team                                                                            MITRE
                                    updated Demonstrative_Examples, References, Relationships
 2012-10-30                         CWE Content Team                                                                            MITRE
                                    updated Potential_Mitigations
 2013-07-17                         CWE Content Team                                                                            MITRE
                                    updated Relationships
 2014-02-18                         CWE Content Team                                                                            MITRE
                                    updated Potential_Mitigations
 2014-07-30                         CWE Content Team                                                                            MITRE
                                    updated Detection_Factors
 2017-01-19                         CWE Content Team                                                                            MITRE
                                    updated Related_Attack_Patterns
 2017-11-08                         CWE Content Team                                                                            MITRE
                                    updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings
 2019-01-03                         CWE Content Team                                                                            MITRE
                                    updated Taxonomy_Mappings
 2020-02-24                         CWE Content Team                                                                            MITRE
                                    updated Relationships
 2021-10-28                         CWE Content Team                                                                            MITRE
                                    updated Relationships
 2022-04-28                         CWE Content Team                                                                            MITRE
                                    updated Relationships
 2023-01-31                         CWE Content Team                                                                            MITRE
                                    updated Description
 2023-04-27                         CWE Content Team                                                                            MITRE
                                    updated Potential_Mitigations, References, Relationships
 2023-06-29                         CWE Content Team                                                                            MITRE
                                    updated Mapping_Notes, Relationships
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

