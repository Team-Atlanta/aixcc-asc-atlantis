CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-272: Least Privilege Violation
 
 Weakness ID: 272
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID      Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        271     Privilege
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Dropping
                                                                                                                                                                                                                                                                                                                                                                             /
                                                                                                                                                                                                                                                                                                                                                                             Lowering
                                                                                                                                                                                                                                                                                                                                                                             Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 265     Privilege Issues
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1011    Authorize Actors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation REALIZATION: This weakness is caused during implementation of an architectural security tactic.
 Operation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Gain Privileges or Assume Identity; Read Application Data; Read Files or Directories
 Access Control
 Confidentiality    An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly
                    likely in conjunction with another flaw, such as a buffer overflow.
 + Demonstrative Examples
 
 Example 1

 The following example demonstrates the weakness.

 (bad code)
 Example Language: C 
 setuid(0);
 // Do some important stuff
 setuid(old_uid);
 // Do some non privileged stuff.

 Example 2

 The following example demonstrates the weakness.

 (bad code)
 Example Language: Java 
 AccessController.doPrivileged(new PrivilegedAction() {
 public Object run() {
 // privileged code goes here, for example:
 System.loadLibrary("awt");
 return null;
 // nothing to return
 }

 Example 3

 The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files
 located elsewhere. The code then opens a file specified by the user and processes the contents of the file.

 (bad code)
 Example Language: C 
 chroot(APP_HOME);
 chdir("/");
 FILE* data = fopen(argv[1], "r+");
 ...

 Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the
 application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack
 because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially
 reduced.

 + Potential Mitigations
 Phases: Architecture and Design; Operation

 Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.
 Phase: Architecture and Design

 Strategy: Separation of Privilege

 Follow the principle of least privilege when assigning access rights to entities in a software system.
 Phase: Architecture and Design

 Strategy: Separation of Privilege

 Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when
 interfacing with a compartment outside of the safe area.

 Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers
 should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.

 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Compare binary / bytecode to application permission manifest

 Effectiveness: SOAR Partial

 Dynamic Analysis with Automated Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Host-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria

 Effectiveness: SOAR Partial

 Manual Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Manual Source Code Review (not inspections)

 Cost effective for partial coverage:

   • Focused Manual Spotcheck - Focused manual analysis of source

 Effectiveness: High

 Automated Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Source code Weakness Analyzer
   • Context-configured Source Code Weakness Analyzer

 Effectiveness: SOAR Partial

 Automated Static Analysis

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Permission Manifest Analysis

 Effectiveness: SOAR Partial

 Architecture or Design Review

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
   • Formal Methods / Correct-By-Construction

 Cost effective for partial coverage:

   • Attack Modeling

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 254     7PK - Security Features
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 748     CERT C Secure Coding Standard (2008) Appendix - POSIX (POS)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 859     The CERT Oracle Secure Coding Standard for Java (2011) Chapter 16 -
                                                                                                                                 Platform Security (SEC)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 901     SFP Primary Cluster: Privilege
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1149    SEI CERT Oracle Secure Coding Standard for Java - Guidelines 15.
                                                                                                                                 Platform Security (SEC)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1396    Comprehensive Categorization: Access Control
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Notes
 
 Other

 If system privileges are not dropped when it is reasonable to do so, this is not a vulnerability by itself. According to the principle of least privilege, access should be allowed only when it is
 absolutely necessary to the function of a given system, and only for the minimal necessary amount of time. Any further allowance of privilege widens the window of time during which a successful
 exploitation of the system will provide an attacker with that same privilege. If at all possible, limit the allowance of system privilege to small, simple sections of code that may be called
 atomically.

 When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and
 return to the privilege level of the invoking user.

 Maintenance

 CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID       Fit                                                                Mapped Node Name
 7 Pernicious Kingdoms                                   Least Privilege Violation
 CLASP                                                   Failure to drop privileges when reasonable
 CERT C Secure Coding             POS02-C                Follow the principle of least privilege
 The CERT Oracle Secure Coding    SEC00-J                Do not allow privileged blocks to leak sensitive information across a trust boundary
 Standard for Java (2011)
 The CERT Oracle Secure Coding    SEC01-J                Do not allow tainted variables in privileged blocks
 Standard for Java (2011)
 Software Fault Patterns          SFP36                  Privilege
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-17        Using Malicious Files
 CAPEC-35        Leverage Executable Code in Non-Executable Files
 CAPEC-76        Manipulating Web Input to File System Calls
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 + Content History
                                                                                            + Submissions
         Submission Date                                                         Submitter                                                                       Organization
 2006-07-19                       7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                           + Modifications
        Modification Date                                                        Modifier                                                                        Organization
 2008-07-01                       Eric Dalci                                                                                              Cigital
                                  updated Time_of_Introduction
 2008-09-08                       CWE Content Team                                                                                        MITRE
                                  updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
 2008-10-14                       CWE Content Team                                                                                        MITRE
                                  updated Maintenance_Notes
 2008-11-24                       CWE Content Team                                                                                        MITRE
                                  updated Relationships, Taxonomy_Mappings
 2009-03-10                       CWE Content Team                                                                                        MITRE
                                  updated Demonstrative_Examples
 2009-05-27                       CWE Content Team                                                                                        MITRE
                                  updated Demonstrative_Examples
 2009-12-28                       CWE Content Team                                                                                        MITRE
                                  updated Potential_Mitigations
 2010-06-21                       CWE Content Team                                                                                        MITRE
                                  updated Potential_Mitigations
 2010-12-13                       CWE Content Team                                                                                        MITRE
                                  updated Other_Notes
 2011-06-01                       CWE Content Team                                                                                        MITRE
                                  updated Common_Consequences, Relationships, Taxonomy_Mappings
 2012-05-11                       CWE Content Team                                                                                        MITRE
                                  updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
 2012-10-30                       CWE Content Team                                                                                        MITRE
                                  updated Potential_Mitigations
 2014-07-30                       CWE Content Team                                                                                        MITRE
                                  updated Detection_Factors, Taxonomy_Mappings
 2017-11-08                       CWE Content Team                                                                                        MITRE
                                  updated Applicable_Platforms, Causal_Nature, Common_Consequences, Demonstrative_Examples, Modes_of_Introduction, Relationships
 2019-01-03                       CWE Content Team                                                                                        MITRE
                                  updated Relationships, Taxonomy_Mappings
 2020-02-24                       CWE Content Team                                                                                        MITRE
                                  updated Detection_Factors, References, Relationships
 2020-12-10                       CWE Content Team                                                                                        MITRE
                                  updated Potential_Mitigations
 2021-03-15                       CWE Content Team                                                                                        MITRE
                                  updated Demonstrative_Examples
 2023-04-27                       CWE Content Team                                                                                        MITRE
                                  updated Relationships, Time_of_Introduction
 2023-06-29                       CWE Content Team                                                                                        MITRE
                                  updated Mapping_Notes
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

