CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-489: Active Debug Code
 
 Weakness ID: 489
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.
 + Extended Description
 A common development practice is to add "back door" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry
 points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.
 + Alternate Terms
 Leftover debug code: This term originates from Seven Pernicious Kingdoms
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID          Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          710     Improper
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Adherence to
                                                                                                                                                                                                                                                                                                                                                                                Coding Standards
 ParentOf                                                                                VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                         11      ASP.NET
                                                                                                                                describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                         Misconfiguration:
                                                                                                                                                                                                                                                                                                                                                                                Creating Debug
                                                                                                                                                                                                                                                                                                                                                                                Binary
 CanPrecede                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                             215     Insertion of
                                                                                                                           typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                    Sensitive
                                                                                                                                                                                                                                                                                                                                                                                Information Into
                                                                                                                                                                                                                                                                                                                                                                                Debugging Code
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1006    Bad Coding Practices
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
         Phase                                                                                             Note
 Implementation        In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a
                       production server, this oversight during the "software process" allows attackers access to debug functionality.
 Build and Compilation
 Operation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 Technologies

 Class: Not Technology-Specific (Undetermined Prevalence)

 Class: ICS/OT (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Confidentiality    Technical Impact: Bypass Protection Mechanism; Read Application Data; Gain Privileges or Assume Identity; Varies by Context
 Integrity
 Availability       The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the
 Access Control     settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the
 Other              web application and server, as well as confidential information that either of these access.
 + Demonstrative Examples
 
 Example 1

 Debug code can be used to bypass authentication. For example, suppose an application has a login script that receives a username and a password. Assume also that a third, optional, parameter, called
 "debug", is interpreted by the script as requesting a switch to debug mode, and that when this parameter is given the username and password are not checked. In such a case, it is very simple to
 bypass the authentication process if the special behavior of the application regarding the debug parameter is known. In a case where the form is:

 (bad code)
 Example Language: HTML 
 <FORM ACTION="/authenticate_login.cgi">
 <INPUT TYPE=TEXT name=username>
 <INPUT TYPE=PASSWORD name=password>
 <INPUT TYPE=SUBMIT>
 </FORM>

 Then a conforming link will look like:

 (informative)
  
 http://TARGET/authenticate_login.cgi?username=...&password=...

 An attacker can change this to:

 (attack code)
  
 http://TARGET/authenticate_login.cgi?username=&password=&debug=1

 Which will grant the attacker access to the site, bypassing the authentication process.

 + Potential Mitigations
 Phases: Build and Compilation; Distribution

 Remove debug code before deploying the application.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Indirect   (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 485     7PK - Encapsulation
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 731     OWASP Top Ten 2004 Category A10 - Insecure Configuration Management
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1002    SFP Secondary Cluster: Unexpected Entry Points
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1371    ICS Supply Chain: Poorly Documented or Undocumented Features
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1412    Comprehensive Categorization: Poor Coding Practices
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Notes
 
 Other

 In J2EE a main method may be a good indicator that debug code has been left in the application, although there may not be any direct security impact.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                            Fit                                                                Mapped Node Name
 7 Pernicious Kingdoms                                                                             Leftover Debug Code
 OWASP Top Ten 2004               A10            CWE More Specific                                 Insecure Configuration Management
 Software Fault Patterns          SFP28                                                            Unexpected access points
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-121       Exploit Non-Production Interfaces
 CAPEC-661       Root/Jailbreak Detection Evasion via Debugging
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 + Content History
                                                                                           + Submissions
                 Submission Date                                                         Submitter                                                               Organization
 2006-07-19                                      7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
                Modification Date                                                        Modifier                                                                Organization
 2008-07-01                                      Eric Dalci                                                                                Cigital
                                                 updated Potential_Mitigations, Time_of_Introduction
 2008-08-01                                                                                                                                KDM Analytics
                                                 added/updated white box definitions
 2008-09-08                                      CWE Content Team                                                                          MITRE
                                                 updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
 2009-07-27                                      CWE Content Team                                                                          MITRE
                                                 updated Demonstrative_Examples
 2009-10-29                                      CWE Content Team                                                                          MITRE
                                                 updated Common_Consequences
 2011-06-01                                      CWE Content Team                                                                          MITRE
                                                 updated Common_Consequences
 2011-06-27                                      CWE Content Team                                                                          MITRE
                                                 updated Common_Consequences
 2012-05-11                                      CWE Content Team                                                                          MITRE
                                                 updated Relationships
 2012-10-30                                      CWE Content Team                                                                          MITRE
                                                 updated Potential_Mitigations
 2014-06-23                                      CWE Content Team                                                                          MITRE
                                                 updated Description, Modes_of_Introduction, Other_Notes, Time_of_Introduction
 2014-07-30                                      CWE Content Team                                                                          MITRE
                                                 updated Relationships, Taxonomy_Mappings
 2017-11-08                                      CWE Content Team                                                                          MITRE
                                                 updated Applicable_Platforms, Relationships, White_Box_Definitions
 2019-01-03                                      CWE Content Team                                                                          MITRE
                                                 updated Weakness_Ordinalities
 2019-06-20                                      CWE Content Team                                                                          MITRE
                                                 updated Related_Attack_Patterns
 2020-02-24                                      CWE Content Team                                                                          MITRE
                                                 updated Description, Name, References, Relationships
 2021-03-15                                      CWE Content Team                                                                          MITRE
                                                 updated Related_Attack_Patterns
 2021-07-20                                      CWE Content Team                                                                          MITRE
                                                 updated Alternate_Terms
 2023-01-31                                      CWE Content Team                                                                          MITRE
                                                 updated Applicable_Platforms, Description, Relationships
 2023-04-27                                      CWE Content Team                                                                          MITRE
                                                 updated Detection_Factors, Relationships
 2023-06-29                                      CWE Content Team                                                                          MITRE
                                                 updated Mapping_Notes
                                                                                       + Previous Entry Names
                   Change Date                                                                                   Previous Entry Name
 2020-02-24                                      Leftover Debug Code
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

