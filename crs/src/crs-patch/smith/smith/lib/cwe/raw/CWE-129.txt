CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-129: Improper Validation of Array Index
 
 Weakness ID: 129
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level
 weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within
 the array.
 + Alternate Terms
 out-of-bounds array index
    index-out-of-range
   array index underflow
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID        Name
 ChildOf                                                                                   BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           1285    Improper
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Validation
                                                                                                                                                                                                                                                                                                                                                                             of Specified
                                                                                                                                                                                                                                                                                                                                                                             Index,
                                                                                                                                                                                                                                                                                                                                                                             Position, or
                                                                                                                                                                                                                                                                                                                                                                             Offset in
                                                                                                                                                                                                                                                                                                                                                                             Input
 CanPrecede                                                                            ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 CanPrecede                                                                            VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        789     Memory
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Allocation
                                                                                                                                                                                                                                                                                                                                                                             with
                                                                                                                                                                                                                                                                                                                                                                             Excessive
                                                                                                                                                                                                                                                                                                                                                                             Size Value
 CanPrecede                                                                                BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           823     Use of
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Out-of-range
                                                                                                                                                                                                                                                                                                                                                                             Pointer
                                                                                                                                                                                                                                                                                                                                                                             Offset
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        20      Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Input
                                                                                                                                                                                                                                                                                                                                                                             Validation
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Often Prevalent)

 C++ (Often Prevalent)

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: DoS: Crash, Exit, or Restart
 Integrity
 Availability       Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash,
                    if the values are outside of the valid memory area.
                    Technical Impact: Modify Memory
 Integrity
                    If the memory corrupted is data, rather than instructions, the system will continue to function with improper values.
                    Technical Impact: Modify Memory; Read Memory
 Confidentiality
 Integrity          Use of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., "buffer
                    overflows" are not always the result. This may result in the exposure or modification of sensitive data.
 Integrity          Technical Impact: Execute Unauthorized Code or Commands
 Confidentiality
 Availability       If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and
                    possibly without the use of large inputs if a precise index can be controlled.
 Integrity          Technical Impact: DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Read Memory; Modify Memory
 Availability
 Confidentiality    A single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being
                    performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution.
 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 In the code snippet below, an untrusted integer value is used to reference an object in an array.

 (bad code)
 Example Language: Java 
 public String getValue(int index) {
 return array[index];
 }

 If index is outside of the range of the array, this may result in an ArrayIndexOutOfBounds Exception being raised.

 Example 2

 The following example takes a user-supplied value to allocate an array of objects and then operates on the array.

 (bad code)
 Example Language: Java 
 private void buildList ( int untrustedListSize ){
 if ( 0 > untrustedListSize ){
 die("Negative value supplied for list size, die evil hacker!");
 }
 Widget[] list = new Widget [ untrustedListSize ];
 list[0] = new Widget();
 }

 This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size
 0 and then try to store a new Widget in the first location, causing an exception to be thrown.

 Example 3

 In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method

 (bad code)
 Example Language: C 
 int getValueFromArray(int *array, int len, int index) {

 int value;

 // check that the array index is less than the maximum

 // length of the array
 if (index < len) {
 // get the value at the specified index of the array
 value = array[index];
 }
 // if array index is invalid then output error message

 // and return value indicating error
 else {
 printf("Value is: %d\n", array[index]);
 value = -1;
 }

 return value;
 }

 However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be
 accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the
 maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.

 (good code)
 Example Language: C 

 ...

 // check that the array index is within the correct

 // range of values for the array
 if (index >= 0 && index < len) {

 ...

 Example 4

 The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the
 message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index.

 (bad code)
 Example Language: C 

 /* capture the sizes of all messages */
 int getsizes(int sock, int count, int *sizes) {
 ...
 char buf[BUFFER_SIZE];
 int ok;
 int num, size;

 // read values from socket and added to sizes array
 while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)
 {
 // continue read from socket until buf only contains '.'
 if (DOTLINE(buf))
 break;
 else if (sscanf(buf, "%d %d", &num, &size) == 2)
 sizes[num - 1] = size;
 }
 ...
 }

 In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper
 validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array
 index should be validated to ensure that it is within the allowable range of indices for the array as in the following code.

 (good code)
 Example Language: C 

 /* capture the sizes of all messages */
 int getsizes(int sock, int count, int *sizes) {
 ...
 char buf[BUFFER_SIZE];
 int ok;
 int num, size;

 // read values from socket and added to sizes array
 while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)
 {

 // continue read from socket until buf only contains '.'
 if (DOTLINE(buf))
 break;

 else if (sscanf(buf, "%d %d", &num, &size) == 2) {
 if (num > 0 && num <= (unsigned)count)
 sizes[num - 1] = size;

 else

 /* warn about possible attempt to induce buffer overflow */
 report(stderr, "Warning: ignoring bogus data for message sizes returned by server.\n");
 }
 }
 ...
 }

 Example 5

 In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value
 of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method
 which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index.

 (bad code)
 Example Language: Java 

 // Method called from servlet to obtain product information
 public String displayProductSummary(int index) {
 String productSummary = new String("");

 try {
 String productSummary = getProductSummary(index);


 } catch (Exception ex) {...}

 return productSummary;
 }

 public String getProductSummary(int index) {
 return products[index];
 }

 In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the
 application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code.

 (good code)
 Example Language: Java 

 // Method called from servlet to obtain product information
 public String displayProductSummary(int index) {
 String productSummary = new String("");

 try {
 String productSummary = getProductSummary(index);


 } catch (Exception ex) {...}

 return productSummary;
 }

 public String getProductSummary(int index) {
 String productSummary = "";

 if ((index >= 0) && (index < MAX_PRODUCTS)) {
 productSummary = products[index];
 }
 else {
 System.err.println("index is out of bounds");
 throw new IndexOutOfBoundsException();
 }

 return productSummary;
 }

 An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of
 bounds.

 (good code)
 Example Language: Java 
 ArrayList productArray = new ArrayList(MAX_PRODUCTS);
 ...
 try {
 productSummary = (String) productArray.get(index);
 } catch (IndexOutOfBoundsException ex) {...}

 Example 6

 The following example asks a user for an offset into an array to select an item.

 (bad code)
 Example Language: C 

 int main (int argc, char **argv) {
 char *items[] = {"boat", "car", "truck", "train"};
 int index = GetUntrustedOffset();
 printf("You selected %s\n", items[index-1]);
 }

 The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).

 + Observed Examples
        Reference                                                                                        Description
 CVE-2005-0369           large ID in packet used as array index
 CVE-2001-1009           negative array index as argument to POP LIST command
 CVE-2003-0721           Integer signedness error leads to negative array index
 CVE-2004-1189           product does not properly track a count and a maximum number, which can lead to resultant array index overflow.
 CVE-2007-5756           Chain: device driver for packet-capturing software allows access to an unintended IOCTL with resultant array index error.
 CVE-2005-2456           Chain: array index error (CWE-129) leads to deadlock (CWE-833)
 + Potential Mitigations
 Phase: Architecture and Design

 Strategy: Input Validation

 Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of
 weaknesses that could arise from misusing the framework itself (CWE-1173).
 Phase: Architecture and Design

 For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks
 by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.

 Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that
 should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid
 input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.

 Phase: Requirements

 Strategy: Language Selection

 Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is
 accessed.

 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it
 can prevent an attacker from reliably jumping to exploitable code.

 Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default
 memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot
 be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.

 For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].

 Effectiveness: Defense in Depth

 Note: These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337
 ]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]
 Phase: Operation

 Strategy: Environment Hardening

 Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [
 REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.

 For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].

 Effectiveness: Defense in Depth

 Note: This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases
 in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
 Phase: Implementation

 Strategy: Input Validation

 Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not
 strictly conform to specifications, or transform it into something that does.

 When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency
 across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not
 valid if the input is only expected to contain colors such as "red" or "blue."

 Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers
 enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.

 When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the
 minimum as well as the maximum of the range of acceptable values.

 Phase: Implementation

 Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction
 between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to
 buffer overflows, providing a large argument in a call to native code might trigger an overflow.
 Phases: Architecture and Design; Operation

 Strategy: Environment Hardening

 Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a
 single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as
 the database administrator, especially in day-to-day operations.
 Phases: Architecture and Design; Operation

 Strategy: Sandbox or Jail

 Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in
 a particular directory or which commands can be executed by the software.

 OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows
 the software to specify restrictions on file operations.

 This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.

 Be careful to avoid CWE-243 and other weaknesses related to jails.

 Effectiveness: Limited

 Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as
 restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Resultant  (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)
            The most common condition situation leading to an out-of-bounds array index is the use of loop index variables as buffer indexes. If the end condition for the loop is subject to a
            flaw, the index can grow or shrink unbounded, therefore causing a buffer overflow or underflow. Another common situation leading to this condition is the use of a function's return
            value, or the resulting value of a calculation directly as an index in to a buffer.
 + Detection Methods
 Automated Static Analysis

 This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.

 Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which
 warnings should be investigated first. For example, an analysis tool might report array index errors that originate from command line arguments in a program that is not expected to run with
 setuid or other special privileges.

 Effectiveness: High

 Note: This is not a perfect solution, since 100% accuracy and coverage are not feasible.
 Automated Dynamic Analysis

 This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness
 testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
 Black Box

 Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.
 + Affected Resources
 
   • Memory

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            738     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      5 - Integers
                                                                                                                                                                                                                      (INT)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            740     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      7 - Arrays
                                                                                                                                                                                                                      (ARR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            802     2010 Top 25 -
                                                                                                                                                                                                                      Risky Resource
                                                                                                                                                                                                                      Management
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            867     2011 Top 25 -
                                                                                                                                                                                                                      Weaknesses On
                                                                                                                                                                                                                      the Cusp
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            872     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      04 - Integers
                                                                                                                                                                                                                      (INT)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            874     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      06 - Arrays and
                                                                                                                                                                                                                      the STL (ARR)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            970     SFP Secondary
                                                                                                                                                                                                                      Cluster: Faulty
                                                                                                                                                                                                                      Buffer Access
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1131    CISQ Quality
                                                                                                                                                                                                                      Measures (2016)
                                                                                                                                                                                                                      - Security
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1160    SEI CERT C
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      06. Arrays
                                                                                                                                                                                                                      (ARR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1179    SEI CERT Perl
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      01. Input
                                                                                                                                                                                                                      Validation and
                                                                                                                                                                                                                      Data
                                                                                                                                                                                                                      Sanitization
                                                                                                                                                                                                                      (IDS)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1308    CISQ Quality
                                                                                                                                                                                                                      Measures -
                                                                                                                                                                                                                      Security
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1340    CISQ Data
                                                                                                                                                                                                                      Protection
                                                                                                                                                                                                                      Measures
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1399    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Memory Safety
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Notes
 
 Relationship

 This weakness can precede uncontrolled memory allocation (CWE-789) in languages that automatically expand an array when an index is used that is larger than the size of the array, such as JavaScript.

 Theoretical

 An improperly validated array index might lead directly to the always-incorrect behavior of "access of array using out-of-bounds index."
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID             Fit                                                                 Mapped Node Name
 CLASP                                                                Unchecked array indexing
 PLOVER                                                               INDEX - Array index overflow
 CERT C Secure Coding             ARR00-C                             Understand how arrays work
 CERT C Secure Coding             ARR30-C        CWE More Specific    Do not form or use out-of-bounds pointers or array subscripts
 CERT C Secure Coding             ARR38-C                             Do not add or subtract an integer to a pointer if the resulting value does not refer to a valid array element
 CERT C Secure Coding             INT32-C                             Ensure that operations on signed integers do not result in overflow
 SEI CERT Perl Coding Standard    IDS32-PL       Imprecise            Validate any integer that is used as an array index
 OMG ASCSM                        ASCSM-CWE-129
 Software Fault Patterns          SFP8                                Faulty Buffer Access
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-100       Overflow Buffers
 + References
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 5, "Array Indexing Errors" Page 144. 2nd Edition. Microsoft Press. 2002-12-04. <https://www.microsoftpressstore.com/store/
 writing-secure-code-9780735617223>.
 [REF-96] Jason Lam. "Top 25 Series - Rank 14 - Improper Validation of Array Index". SANS Software Security Institute. 2010-03-12. <https://web.archive.org/web/20100316064026/http://blogs.sans.org
 /appsecstreetfighter/2010/03/12/top-25-series-rank-14-improper-validation-of-array-index/>. URL validated: 2023-04-07.
 [REF-58] Michael Howard. "Address Space Layout Randomization in Windows Vista". <https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista
 >. URL validated: 2023-04-07.
 [REF-60] "PaX". <https://en.wikipedia.org/wiki/Executable_space_protection#PaX>. URL validated: 2023-04-07.
 [REF-61] Microsoft. "Understanding DEP as a mitigation technology part 1". <https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/>. URL validated:
 2023-04-07.
 [REF-76] Sean Barnum and Michael Gegick. "Least Privilege". 2005-09-14. <https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege>.
 URL validated: 2023-04-07.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 5: Buffer Overruns." Page 89. McGraw-Hill. 2010.
 [REF-64] Grant Murphy. "Position Independent Executables (PIE)". Red Hat. 2012-11-28. <https://www.redhat.com/en/blog/position-independent-executables-pie>. URL validated: 2023-04-07.
 [REF-962] Object Management Group (OMG). "Automated Source Code Security Measure (ASCSM)". ASCSM-CWE-129. 2016-01. <http://www.omg.org/spec/ASCSM/1.0/>.
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 [REF-1332] John Richard Moser. "Prelink and address space randomization". 2006-07-05. <https://lwn.net/Articles/190139/>. URL validated: 2023-04-26.
 [REF-1333] Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh. "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR". 2016. <http://www.cs.ucr.edu/~nael/pubs/micro16.pdf>. URL
 validated: 2023-04-26.
 [REF-1335] D3FEND. "Segment Address Offset Randomization (D3-SAOR)". 2023. <https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/>. URL validated: 2023-04-26.
 [REF-1336] D3FEND. "Process Segment Execution Prevention (D3-PSEP)". 2023. <https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/>. URL validated: 2023-04-26.
 [REF-1337] Alexander Sotirov and Mark Dowd. "Bypassing Browser Memory Protections: Setting back browser security by 10 years". Memory information leaks. 2008. <https://www.blackhat.com/
 presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf>. URL validated: 2023-04-26.
 + Content History
                                                                                           + Submissions
      Submission Date                                                 Submitter                                                                          Organization
 2006-07-19                CLASP
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
     Modification Date                                                Modifier                                                                           Organization
 2008-07-01                Sean Eidemiller                                                                                 Cigital
                           added/updated demonstrative examples
 2008-09-08                CWE Content Team                                                                                MITRE
                           updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
 2008-11-24                CWE Content Team                                                                                MITRE
                           updated Relationships, Taxonomy_Mappings
 2009-01-12                CWE Content Team                                                                                MITRE
                           updated Common_Consequences
 2009-10-29                CWE Content Team                                                                                MITRE
                           updated Description, Name, Relationships
 2009-12-28                CWE Content Team                                                                                MITRE
                           updated Applicable_Platforms, Common_Consequences, Observed_Examples, Other_Notes, Potential_Mitigations, Theoretical_Notes, Weakness_Ordinalities
 2010-02-16                CWE Content Team                                                                                MITRE
                           updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations, References, Related_Attack_Patterns,
                           Relationships
 2010-04-05                CWE Content Team                                                                                MITRE
                           updated Related_Attack_Patterns
 2010-06-21                CWE Content Team                                                                                MITRE
                           updated Common_Consequences, Potential_Mitigations, References
 2010-09-27                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations, Relationship_Notes, Relationships
 2010-12-13                CWE Content Team                                                                                MITRE
                           updated Demonstrative_Examples, Observed_Examples, Potential_Mitigations
 2011-03-29                CWE Content Team                                                                                MITRE
                           updated Common_Consequences, Demonstrative_Examples, Weakness_Ordinalities
 2011-06-01                CWE Content Team                                                                                MITRE
                           updated Common_Consequences
 2011-06-27                CWE Content Team                                                                                MITRE
                           updated Relationships
 2011-09-13                CWE Content Team                                                                                MITRE
                           updated Relationships, Taxonomy_Mappings
 2012-05-11                CWE Content Team                                                                                MITRE
                           updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
 2012-10-30                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations
 2014-02-18                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations, References
 2014-07-30                CWE Content Team                                                                                MITRE
                           updated Relationships, Taxonomy_Mappings
 2015-12-07                CWE Content Team                                                                                MITRE
                           updated Relationships
 2017-11-08                CWE Content Team                                                                                MITRE
                           updated Causal_Nature, References, Relationships, Taxonomy_Mappings
 2018-03-27                CWE Content Team                                                                                MITRE
                           updated References
 2019-01-03                CWE Content Team                                                                                MITRE
                           updated References, Relationships, Taxonomy_Mappings
 2019-09-19                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations
 2020-02-24                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations, Relationships, Taxonomy_Mappings
 2020-06-25                CWE Content Team                                                                                MITRE
                           updated Demonstrative_Examples, Potential_Mitigations, Relationships, Type
 2020-08-20                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations, Relationships
 2020-12-10                CWE Content Team                                                                                MITRE
                           updated Relationships
 2021-03-15                CWE Content Team                                                                                MITRE
                           updated References, Relationships
 2022-10-13                CWE Content Team                                                                                MITRE
                           updated References, Relationships, Taxonomy_Mappings
 2023-04-27                CWE Content Team                                                                                MITRE
                           updated Potential_Mitigations, References, Relationships
 2023-06-29                CWE Content Team                                                                                MITRE
                           updated Mapping_Notes
                                                                                       + Previous Entry Names
        Change Date                                                                                   Previous Entry Name
 2009-10-29                Unchecked Array Indexing
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

