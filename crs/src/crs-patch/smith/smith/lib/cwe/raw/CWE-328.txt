CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-328: Use of Weak Hash
 
 Weakness ID: 328
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input
 (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).
 + Extended Description
 
 A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:

  1. The algorithm is not invertible (also called "one-way" or "not reversible")
  2. The algorithm is deterministic; the same input produces the same digest every time

 Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the
 following:

  1. the original input (preimage attack), given only the digest
  2. another input that can produce the same digest (2nd preimage attack), given the original input
  3. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times

 What is regarded as "reasonable" varies by context and threat model, but in general, "reasonable" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of
 all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.

 Any algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.

 In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt
 for storing passwords (that are sufficiently short) could enable an adversary to create a "rainbow table" [REF-637] to recover the password under certain conditions; this attack works against such
 hash functions as MD5, SHA-1, and SHA-2.

 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID        Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        326     Inadequate
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Encryption
                                                                                                                                                                                                                                                                                                                                                                             Strength
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        327     Use of a
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Broken or
                                                                                                                                                                                                                                                                                                                                                                             Risky
                                                                                                                                                                                                                                                                                                                                                                             Cryptographic
                                                                                                                                                                                                                                                                                                                                                                             Algorithm
 ParentOf                                                                                  BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           916     Use of
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Password Hash
                                                                                                                                                                                                                                                                                                                                                                             With
                                                                                                                                                                                                                                                                                                                                                                             Insufficient
                                                                                                                                                                                                                                                                                                                                                                             Computational
                                                                                                                                                                                                                                                                                                                                                                             Effort
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 310     Cryptographic Issues
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1013    Encrypt Data
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
          Phase                                                                                             Note
 Architecture and Design COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 Technologies

 Class: ICS/OT (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Access Control     Technical Impact: Bypass Protection Mechanism

 + Demonstrative Examples
 
 Example 1

 In both of these examples, a user is logged in if their given password matches a stored password:

 (bad code)
 Example Language: C 
 unsigned char *check_passwd(char *plaintext) {
 ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );
 //Login if hash matches stored hash
 if (equal(ctext, secret_password())) {
 login_user();
 }
 }
 (bad code)
 Example Language: Java 
 String plainText = new String(plainTextIn);
 MessageDigest encer = MessageDigest.getInstance("SHA");
 encer.update(plainTextIn);
 byte[] digest = password.digest();
 //Login if hash matches stored hash
 if (equal(digest,secret_password())) {
 login_user();
 }

 This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to
 their account. Note this code also uses SHA-1, which is a weak hash (CWE-328). It also does not use a salt (CWE-759).

 Example 2

 In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [
 REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since
 these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.

 At least one OT product used weak hashes.

 Example 3

 The example code below is taken from the JTAG access control mechanism of the Hack@DAC'21 buggy OpenPiton SoC [REF-1360]. Access to JTAG allows users to access sensitive information in the system.
 Hence, access to JTAG is controlled using cryptographic authentication of the users. In this example (see the vulnerable code source), the password checker uses HMAC-SHA256 for authentication. It
 takes a 512-bit secret message from the user, hashes it using HMAC, and compares its output with the expected output to determine the authenticity of the user.

 (bad code)
 Example Language: Verilog 
 ...
 logic [31:0] data_d, data_q
 logic [512-1:0] pass_data;
 ...
 Write: begin
 ...
 if (pass_mode) begin
 pass_data = { {60{8'h00}}, data_d};
 state_d = PassChk;
 pass_mode = 1'b0;
 ...
 end
 ...

 The vulnerable code shows an incorrect implementation of the HMAC authentication where it only uses the least significant 32 bits of the secret message for the authentication (the remaining 480 bits
 are hard coded as zeros). As a result, the system is susceptible to brute-force attacks where the attacker only needs to determine 32 bits of the secret message instead of 512 bits, weakening the
 cryptographic protocol.

 To mitigate, remove the zero padding and use all 512 bits of the secret message for HMAC authentication [REF-1361].

 (good code)
 Example Language: Verilog 
 ...
 logic [512-1:0] data_d, data_q
 logic [512-1:0] pass_data;
 ...
 Write: begin
 ...
 if (pass_mode) begin
 pass_data = data_d;
 state_d = PassChk;
 pass_mode = 1'b0;
 ...
 end
 ...
 + Observed Examples
        Reference                                                                                        Description
 CVE-2022-30320          Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.
 CVE-2005-4900           SHA-1 algorithm is not collision-resistant.
 CVE-2020-25685          DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.
 CVE-2012-6707           blogging product uses MD5-based algorithm for passwords.
 CVE-2019-14855          forging of certificate signatures using SHA-1 collisions.
 CVE-2017-15999          mobile app for backup sends SHA-1 hash of password in cleartext.
 CVE-2006-4068           Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.
 + Potential Mitigations
 Phase: Architecture and Design

 Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of
 memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such
 as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be
 reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.

 Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the
 most effective, they are all stronger than using salts with hash functions with very little computing overhead.

 Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control
 over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.

 Effectiveness: High

 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 934     OWASP Top Ten 2013 Category A6 - Sensitive Data Exposure
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 958     SFP Secondary Cluster: Broken Cryptography
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1029    OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1346    OWASP Top Ten 2021 Category A02:2021 - Cryptographic Failures
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1402    Comprehensive Categorization: Encryption
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Notes
 
 Maintenance

 Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve
 relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID             Fit                                                                 Mapped Node Name
 PLOVER                                                               Reversible One-Way Hash
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-461       Web Services API Signature Forgery Leveraging Hash Function Extension Weakness
 CAPEC-68        Subvert Code-signing Facilities
 + References
 [REF-289] Alexander Sotirov et al.. "MD5 considered harmful today". <http://www.phreedom.org/research/rogue-ca/>. URL validated: 2023-04-07.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 2, "Common Vulnerabilities of Integrity", Page 47. 1st Edition. Addison Wesley. 2006.
 [REF-291] Johnny Shelley. "bcrypt". <http://bcrypt.sourceforge.net/>.
 [REF-292] Colin Percival. "Tarsnap - The scrypt key derivation function and encryption utility". <http://www.tarsnap.com/scrypt.html>.
 [REF-293] B. Kaliski. "RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0". 5.2 PBKDF2. 2000. <https://www.rfc-editor.org/rfc/rfc2898>. URL validated: 2023-04-07.
 [REF-294] Coda Hale. "How To Safely Store A Password". 2010-01-31. <https://codahale.com/how-to-safely-store-a-password/>. URL validated: 2023-04-07.
 [REF-295] Brian Krebs. "How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)". 2012-06-11. <https://krebsonsecurity.com/2012/06/
 how-companies-can-beef-up-password-security/>. URL validated: 2023-04-07.
 [REF-296] Solar Designer. "Password security: past, present, future". 2012. <https://www.openwall.com/presentations/PHDays2012-Password-Security/>. URL validated: 2023-04-07.
 [REF-297] Troy Hunt. "Our password hashing has no clothes". 2012-06-26. <https://www.troyhunt.com/our-password-hashing-has-no-clothes/>. URL validated: 2023-04-07.
 [REF-298] Joshbw. "Should we really use bcrypt/scrypt?". 2012-06-08. <https://web.archive.org/web/20120629144851/http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/>. URL
 validated: 2023-04-07.
 [REF-637] "Rainbow table". Wikipedia. 2009-03-03. <https://en.wikipedia.org/wiki/Rainbow_table>. URL validated: 2023-04-07.
 [REF-1243] Bruce Schneier. "Cryptanalysis of SHA-1". 2005-02-18. <https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html>. URL validated: 2021-10-25.
 [REF-1244] Dan Goodin. "At death's door for years, widely used SHA1 function is now dead". Ars Technica. 2017-02-23. <https://arstechnica.com/information-technology/2017/02/
 at-deaths-door-for-years-widely-used-sha1-function-is-now-dead/>. URL validated: 2021-10-25.
 [REF-1283] Forescout Vedere Labs. "OT:ICEFALL: The legacy of "insecure by design" and its implications for certifications and risk management". 2022-06-20. <https://www.forescout.com/resources/
 ot-icefall-report/>.
 [REF-1360] "dmi_jtag.sv". 2021. <https://github.com/HACK-EVENT/hackatdac21/blob/71103971e8204de6a61afc17d3653292517d32bf/piton/design/chip/tile/ariane/src/riscv-dbg/src/dmi_jtag.sv#L82>. URL
 validated: 2023-07-15.
 [REF-1361] "fix cwe_1205 in dmi_jtag.sv". 2021. <https://github.com/HACK-EVENT/hackatdac21/blob/c4f4b832218b50c406dbf9f425d3b654117c1355/piton/design/chip/tile/ariane/src/riscv-dbg/src/
 dmi_jtag.sv#L82>. URL validated: 2023-07-22.
 + Content History
                                                                                           + Submissions
              Submission Date                                                     Submitter                                                                 Organization
 2006-07-19                                 PLOVER
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
             Modification Date                                                    Modifier                                                                  Organization
 2008-09-08                                 CWE Content Team                                                                      MITRE
                                            updated Relationships, Observed_Example, Taxonomy_Mappings
 2008-10-14                                 CWE Content Team                                                                      MITRE
                                            updated Description
 2009-01-12                                 CWE Content Team                                                                      MITRE
                                            updated Description, References
 2009-10-29                                 CWE Content Team                                                                      MITRE
                                            updated Relationships
 2011-06-01                                 CWE Content Team                                                                      MITRE
                                            updated Common_Consequences
 2012-05-11                                 CWE Content Team                                                                      MITRE
                                            updated References, Related_Attack_Patterns, Relationships
 2012-10-30                                 CWE Content Team                                                                      MITRE
                                            updated Demonstrative_Examples, Potential_Mitigations, References
 2014-02-18                                 CWE Content Team                                                                      MITRE
                                            updated Potential_Mitigations, References
 2014-06-23                                 CWE Content Team                                                                      MITRE
                                            updated Relationships
 2014-07-30                                 CWE Content Team                                                                      MITRE
                                            updated Relationships
 2017-11-08                                 CWE Content Team                                                                      MITRE
                                            updated Applicable_Platforms, Modes_of_Introduction, References, Relationships
 2018-03-27                                 CWE Content Team                                                                      MITRE
                                            updated Relationships
 2021-03-15                                 CWE Content Team                                                                      MITRE
                                            updated Demonstrative_Examples
 2021-10-28                                 CWE Content Team                                                                      MITRE
                                            updated Description, Maintenance_Notes, Name, Observed_Examples, References, Relationships
 2022-10-13                                 CWE Content Team                                                                      MITRE
                                            updated Demonstrative_Examples, Observed_Examples, References
 2023-01-31                                 CWE Content Team                                                                      MITRE
                                            updated Applicable_Platforms
 2023-04-27                                 CWE Content Team                                                                      MITRE
                                            updated Detection_Factors, References, Relationships
 2023-06-29                                 CWE Content Team                                                                      MITRE
                                            updated Mapping_Notes, Relationships
 2024-02-29                                 CWE Content Team                                                                      MITRE
 (CWE 4.14, 2024-02-29)                     updated Demonstrative_Examples, Description, References
                                                                                       + Previous Entry Names
                Change Date                                                                                   Previous Entry Name
 2021-10-28                                 Reversible One-Way Hash
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

