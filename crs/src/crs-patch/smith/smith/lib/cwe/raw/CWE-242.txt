CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-242: Use of Inherently Dangerous Function
 
 Weakness ID: 242
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product calls a function that can never be guaranteed to work safely.
 + Extended Description
 Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is
 unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >>
 operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized
 input to the >> operator and overflow the destination buffer.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        1177    Use of
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Prohibited
                                                                                                                                                                                                                                                                                                                                                                             Code
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1228    API / Function Errors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Other              Technical Impact: Varies by Context

 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 The code below calls gets() to read information into a buffer.

 (bad code)
 Example Language: C 
 char buf[BUFSIZE];
 gets(buf);

 The gets() function in C is inherently unsafe.

 Example 2

 The code below calls the gets() function to read in data from the command line.

 (bad code)
 Example Language: C 
 char buf[24];
 printf("Please enter your name and press <Enter>\n");
 gets(buf);
 ...
 }

 However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size,
 resulting in an overflow condition.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2007-4004           FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow
 + Potential Mitigations
 Phases: Implementation; Requirements

 Ban the use of dangerous functions. Use their safe equivalent.
 Phase: Testing

 Use grep or static analysis tools to spot usage of dangerous functions.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 227     7PK - API Abuse
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 748     CERT C Secure Coding Standard (2008) Appendix - POSIX (POS)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1001    SFP Secondary Cluster: Use of an Improper API
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1171    SEI CERT C Coding Standard - Guidelines 50. POSIX (POS)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1412    Comprehensive Categorization: Poor Coding Practices
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                                   Fit                                                                 Mapped Node Name
 7 Pernicious Kingdoms                                                                                            Dangerous Functions
 CERT C Secure Coding             POS33-C        CWE More Abstract                                                Do not use vfork()
 Software Fault Patterns          SFP3                                                                            Use of an improper API
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 [REF-194] Herbert Schildt. "Herb Schildt's C++ Programming Cookbook". Chapter 5. Working with I/O. McGraw-Hill Osborne Media. 2008-04-28.
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 5, "gets and fgets" Page 163. 2nd Edition. Microsoft Press. 2002-12-04. <https://www.microsoftpressstore.com/store/
 writing-secure-code-9780735617223>.
 + Content History
                                                                                           + Submissions
            Submission Date                                                         Submitter                                                                    Organization
 2006-07-19                             7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
           Modification Date                                                         Modifier                                                                    Organization
 2008-07-01                             Sean Eidemiller                                                                                    Cigital
                                        added/updated demonstrative examples
 2008-07-01                             Eric Dalci                                                                                         Cigital
                                        updated Potential_Mitigations
 2008-09-08                             CWE Content Team                                                                                   MITRE
                                        updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings, Type, Weakness_Ordinalities
 2008-11-24                             CWE Content Team                                                                                   MITRE
                                        updated Relationships, Taxonomy_Mappings
 2009-10-29                             CWE Content Team                                                                                   MITRE
                                        updated Description, Other_Notes, References
 2010-02-16                             CWE Content Team                                                                                   MITRE
                                        updated Demonstrative_Examples, References, Relationships
 2010-04-05                             CWE Content Team                                                                                   MITRE
                                        updated Relationships
 2011-06-01                             CWE Content Team                                                                                   MITRE
                                        updated Common_Consequences
 2011-06-27                             CWE Content Team                                                                                   MITRE
                                        updated Common_Consequences
 2012-05-11                             CWE Content Team                                                                                   MITRE
                                        updated Relationships
 2012-10-30                             CWE Content Team                                                                                   MITRE
                                        updated Potential_Mitigations
 2014-07-30                             CWE Content Team                                                                                   MITRE
                                        updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
 2017-11-08                             CWE Content Team                                                                                   MITRE
                                        updated Causal_Nature, References, Relationships, Taxonomy_Mappings
 2018-03-27                             CWE Content Team                                                                                   MITRE
                                        updated References
 2019-01-03                             CWE Content Team                                                                                   MITRE
                                        updated Relationships
 2020-02-24                             CWE Content Team                                                                                   MITRE
                                        updated References, Relationships
 2020-12-10                             CWE Content Team                                                                                   MITRE
                                        updated Demonstrative_Examples
 2021-03-15                             CWE Content Team                                                                                   MITRE
                                        updated Demonstrative_Examples
 2023-01-31                             CWE Content Team                                                                                   MITRE
                                        updated Description
 2023-04-27                             CWE Content Team                                                                                   MITRE
                                        updated Detection_Factors, Relationships
 2023-06-29                             CWE Content Team                                                                                   MITRE
                                        updated Mapping_Notes
 2024-02-29                             CWE Content Team                                                                                   MITRE
 (CWE 4.14, 2024-02-29)                 updated Observed_Examples
                                                                                       + Previous Entry Names
              Change Date                                                                                   Previous Entry Name
 2008-01-30                             Dangerous Functions
 2008-04-11                             Use of Inherently Dangerous Functions
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

