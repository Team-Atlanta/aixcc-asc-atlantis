CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-786: Access of Memory Location Before Start of Buffer
 
 Weakness ID: 786
 Vulnerability Mapping: DISCOURAGEDThis CWE ID should not be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.
 + Extended Description
 This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or
 when a negative index is used.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 ParentOf                                                                                  BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           124     Buffer
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Underwrite
                                                                                                                                                                                                                                                                                                                                                                             ('Buffer
                                                                                                                                                                                                                                                                                                                                                                             Underflow')
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        127     Buffer
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Under-read
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1218    Memory Buffer Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Data Protection Measures" (CWE-1340)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Read Memory
 Confidentiality
                    For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current
                    buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.
 Integrity          Technical Impact: Modify Memory; DoS: Crash, Exit, or Restart
 Availability
                    Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.
                    Technical Impact: Modify Memory; Execute Unauthorized Code or Commands
 Integrity
                    If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions,
                    the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy.
 + Demonstrative Examples
 
 Example 1

 In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while
 statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.

 (bad code)
 Example Language: C 
 char* trimTrailingWhitespace(char *strMessage, int length) {
 char *retMessage;
 char *message = malloc(sizeof(char)*(length+1));

 // copy input string to a temporary string
 char message[length+1];
 int index;
 for (index = 0; index < length; index++) {
 message[index] = strMessage[index];
 }
 message[index] = '\0';

 // trim trailing whitespace
 int len = index-1;
 while (isspace(message[len])) {
 message[len] = '\0';
 len--;
 }

 // return string without trailing whitespace
 retMessage = message;
 return retMessage;
 }

 However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character
 string and will call the isspace() function on an address outside of the bounds of the local buffer.

 Example 2

 The following example asks a user for an offset into an array to select an item.

 (bad code)
 Example Language: C 

 int main (int argc, char **argv) {
 char *items[] = {"boat", "car", "truck", "train"};
 int index = GetUntrustedOffset();
 printf("You selected %s\n", items[index-1]);
 }

 The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).

 Example 3

 The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring "Replace Me" in destBuf with the string stored in srcBuf. It does so by
 using the function strstr(), which returns a pointer to the found substring in destBuf. Using pointer arithmetic, the starting index of the substring is found.

 (bad code)
 Example Language: C 
 int main() {
 ...
 char *result = strstr(destBuf, "Replace Me");
 int idx = result - destBuf;
 strcpy(&destBuf[idx], srcBuf);
 ...
 }

 In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number. If idx
 is negative, this will result in a buffer underwrite of destBuf.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2002-2227           Unchecked length of SSLv2 challenge value leads to buffer underflow.
 CVE-2007-4580           Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)
 CVE-2007-1584           Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.
 CVE-2007-0886           Buffer underflow resultant from encoded data that triggers an integer overflow.
 CVE-2006-6171           Product sets an incorrect buffer size limit, leading to "off-by-two" buffer underflow.
 CVE-2006-4024           Negative value is used in a memcpy() operation, leading to buffer underflow.
 CVE-2004-2620           Buffer underflow due to mishandled special characters
 + Detection Methods
 Fuzzing

 Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with
 random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly
 indicate bugs, which helps developers to diagnose the issues.

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1160    SEI CERT C
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      06. Arrays
                                                                                                                                                                                                                      (ARR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1399    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Memory Safety
 + Vulnerability Mapping Notes
 Usage: DISCOURAGED

 (this CWE ID should not be used to map to real-world vulnerabilities)
 Reasons: Potential Deprecation, Frequent Misuse

 Rationale:

 The CWE entry might be misused when lower-level CWE entries might be available. It also overlaps existing CWE entries and might be deprecated in the future.
 Comments:

 If the "Access" operation is known to be a read or a write, then investigate children of entries such as CWE-787: Out-of-bounds Write and CWE-125: Out-of-bounds Read.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                   Fit                                                                 Mapped Node Name
 CERT C Secure Coding             ARR30-C        CWE More Specific                Do not form or use out-of-bounds pointers or array subscripts
 + Content History
                                                                                            + Submissions
             Submission Date                                                     Submitter                                                                   Organization
 2009-10-21                               CWE Content Team                                                                        MITRE
 (CWE 1.6, 2009-10-29)

                                                                                           + Modifications
            Modification Date                                                    Modifier                                                                    Organization
 2011-06-01                               CWE Content Team                                                                        MITRE
                                          updated Common_Consequences
 2012-05-11                               CWE Content Team                                                                        MITRE
                                          updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Relationships
 2017-11-08                               CWE Content Team                                                                        MITRE
                                          updated Common_Consequences, Demonstrative_Examples, Taxonomy_Mappings
 2019-01-03                               CWE Content Team                                                                        MITRE
                                          updated Relationships
 2020-02-24                               CWE Content Team                                                                        MITRE
                                          updated Relationships
 2020-08-20                               CWE Content Team                                                                        MITRE
                                          updated Relationships
 2020-12-10                               CWE Content Team                                                                        MITRE
                                          updated Relationships
 2023-01-31                               CWE Content Team                                                                        MITRE
                                          updated Description
 2023-04-27                               CWE Content Team                                                                        MITRE
                                          updated Detection_Factors, Relationships
 2023-06-29                               CWE Content Team                                                                        MITRE
                                          updated Mapping_Notes
 2024-02-29                               CWE Content Team                                                                        MITRE
 (CWE 4.14, 2024-02-29)                   updated Demonstrative_Examples
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

