CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-391: Unchecked Error Condition
 
 Weakness ID: 391
 Vulnerability Mapping: PROHIBITEDThis CWE ID must not be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 [PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior
 unnoticed.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        754     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Check for
                                                                                                                                                                                                                                                                                                                                                                             Unusual or
                                                                                                                                                                                                                                                                                                                                                                             Exceptional
                                                                                                                                                                                                                                                                                                                                                                             Conditions
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 389     Error Conditions, Return Values, Status Codes
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1020    Verify Message Integrity
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          703     Improper
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Check or
                                                                                                                                                                                                                                                                                                                                                                                Handling of
                                                                                                                                                                                                                                                                                                                                                                                Exceptional
                                                                                                                                                                                                                                                                                                                                                                                Conditions
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Data Protection Measures" (CWE-1340)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          703     Improper
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Check or
                                                                                                                                                                                                                                                                                                                                                                                Handling of
                                                                                                                                                                                                                                                                                                                                                                                Exceptional
                                                                                                                                                                                                                                                                                                                                                                                Conditions
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation REALIZATION: This weakness is caused during implementation of an architectural security tactic.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Varies by Context; Unexpected State; Alter Execution Logic
 Other
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 The following code excerpt ignores a rarely-thrown exception from doExchange().

 (bad code)
 Example Language: Java 
 try {
 doExchange();
 }
 catch (RareException e) {

 // this can never happen
 }

 If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially
 frustrating any later attempt to explain the program's behavior.

 + Potential Mitigations
 Phase: Requirements

 The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions
 suffer from the up call version of the weak base class problem.
 Phase: Requirements

 A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.
 Phase: Implementation

 Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 388     7PK - Errors
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 728     OWASP Top Ten 2004 Category A7 - Improper Error Handling
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 743     CERT C Secure Coding Standard (2008) Chapter 10 - Input Output
                                                                                                                                 (FIO)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 746     CERT C Secure Coding Standard (2008) Chapter 13 - Error Handling
                                                                                                                                 (ERR)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 876     CERT C++ Secure Coding Section 08 - Memory Management (MEM)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 877     CERT C++ Secure Coding Section 09 - Input Output (FIO)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 880     CERT C++ Secure Coding Section 12 - Exceptions and Error Handling
                                                                                                                                 (ERR)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 962     SFP Secondary Cluster: Unchecked Status Condition
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1159    SEI CERT C Coding Standard - Guidelines 05. Floating Point (FLP)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1167    SEI CERT C Coding Standard - Guidelines 12. Error Handling (ERR)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1171    SEI CERT C Coding Standard - Guidelines 50. POSIX (POS)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1181    SEI CERT Perl Coding Standard - Guidelines 03. Expressions (EXP)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1405    Comprehensive Categorization: Improper Check or Handling of
                                                                                                                                 Exceptional Conditions
 + Vulnerability Mapping Notes
 Usage: PROHIBITED

 (this CWE ID must not be used to map to real-world vulnerabilities)
 Reasons: Potential Deprecation, Frequent Misuse, Frequent Misinterpretation

 Rationale:

 This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts. It combines information from three different taxonomies, but each taxonomy is talking about a
 slightly different issue.
 Comments:

 Consider CWE-252, CWE-1069, CWE-248, or other entries under CWE-754: Improper Check for Unusual or Exceptional Conditions or CWE-755: Improper Handling of Exceptional Conditions.
 Suggestions:
     CWE-ID                                                                                            Comment
 CWE-252         Unchecked Return Value
 CWE-1069        Empty Exception Block
 CWE-248         Uncaught Exception
 + Notes
 
 Other

 When a programmer ignores an exception, they implicitly state that they are operating under one of two assumptions:

   • This method call can never fail.
   • It doesn't matter if this call fails.

 Maintenance

 This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts. It currently combines information from three different taxonomies, but each taxonomy is talking about
 a slightly different issue. CWE analysts might map to this entry based on any of these issues. 7PK has "Empty Catch Block" which has an association with empty exception block (CWE-1069); in this
 case, the exception has performed the check, but does not handle. In PLOVER there is "Unchecked Return Value" which is CWE-252, but unlike "Empty Catch Block" there isn't even a check of the issue -
 and "Unchecked Error Condition" implies lack of a check. For CLASP, "Uncaught Exception" (CWE-248) is associated with incorrect error propagation - uncovered in CWE 3.2 and earlier, at least. There
 are other issues related to error handling and checks.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                 Fit                                                                 Mapped Node Name
 PLOVER                                                                       Unchecked Return Value
 7 Pernicious Kingdoms                                                        Empty Catch Block
 CLASP                                                                        Uncaught exception
 OWASP Top Ten 2004               A7             CWE More Specific            Improper Error Handling
 CERT C Secure Coding             ERR00-C                                     Adopt and implement a consistent and comprehensive error-handling policy
 CERT C Secure Coding             ERR33-C        CWE More Abstract            Detect and handle standard library errors
 CERT C Secure Coding             ERR34-C        CWE More Abstract            Detect errors when converting a string to a number
 CERT C Secure Coding             FLP32-C        Imprecise                    Prevent or detect domain and range errors in math functions
 CERT C Secure Coding             POS54-C        CWE More Abstract            Detect and handle POSIX library errors
 SEI CERT Perl Coding Standard    EXP31-PL       Imprecise                    Do not suppress or ignore exceptions
 Software Fault Patterns          SFP4                                        Unchecked Status Condition
 + References
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 + Content History
                                                                                            + Submissions
           Submission Date                                                  Submitter                                                                     Organization
 2006-07-19                           PLOVER
 (CWE Draft 3, 2006-07-19)

                                                                                           + Modifications
          Modification Date                                                  Modifier                                                                     Organization
 2008-07-01                           Eric Dalci                                                                             Cigital
                                      updated Time_of_Introduction
 2008-08-01                                                                                                                  KDM Analytics
                                      added/updated white box definitions
 2008-08-15                                                                                                                  Veracode
                                      Suggested OWASP Top Ten 2004 mapping
 2008-09-08                           CWE Content Team                                                                       MITRE
                                      updated Maintenance_Notes, Relationships, Other_Notes, Taxonomy_Mappings
 2008-11-24                           CWE Content Team                                                                       MITRE
                                      updated Relationships, Taxonomy_Mappings
 2009-05-27                           CWE Content Team                                                                       MITRE
                                      updated Demonstrative_Examples
 2009-07-17                           KDM Analytics
                                      Improved the White_Box_Definition
 2009-07-27                           CWE Content Team                                                                       MITRE
                                      updated White_Box_Definitions
 2011-06-01                           CWE Content Team                                                                       MITRE
                                      updated Common_Consequences
 2011-06-27                           CWE Content Team                                                                       MITRE
                                      updated Common_Consequences
 2011-09-13                           CWE Content Team                                                                       MITRE
                                      updated Relationships, Taxonomy_Mappings
 2012-05-11                           CWE Content Team                                                                       MITRE
                                      updated Relationships
 2012-10-30                           CWE Content Team                                                                       MITRE
                                      updated Potential_Mitigations
 2014-06-23                           CWE Content Team                                                                       MITRE
                                      updated Other_Notes
 2014-07-30                           CWE Content Team                                                                       MITRE
                                      updated Relationships, Taxonomy_Mappings
 2017-11-08                           CWE Content Team                                                                       MITRE
                                      updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings, White_Box_Definitions
 2019-01-03                           CWE Content Team                                                                       MITRE
                                      updated Relationships, Taxonomy_Mappings
 2019-06-20                           CWE Content Team                                                                       MITRE
                                      updated Description, Maintenance_Notes
 2020-02-24                           CWE Content Team                                                                       MITRE
                                      updated References
 2020-08-20                           CWE Content Team                                                                       MITRE
                                      updated Relationships
 2020-12-10                           CWE Content Team                                                                       MITRE
                                      updated Relationships
 2021-03-15                           CWE Content Team                                                                       MITRE
                                      updated Description, Relationships
 2021-07-20                           CWE Content Team                                                                       MITRE
                                      updated Relationships
 2023-04-27                           CWE Content Team                                                                       MITRE
                                      updated Detection_Factors, Relationships, Time_of_Introduction
 2023-06-29                           CWE Content Team                                                                       MITRE
                                      updated Mapping_Notes
 2024-02-29                           CWE Content Team                                                                       MITRE
 (CWE 4.14, 2024-02-29)               updated Mapping_Notes
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

