CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-916: Use of Password Hash With Insufficient Computational Effort
 
 Weakness ID: 916
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.
 + Extended Description
 
 Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password,
 computing its hash, and comparing it to the stored hash.

 Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's
 workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the
 hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the
 entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an
 efficient hash algorithm helps the attacker.

 There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:

   • The amount of CPU time required to compute the hash ("stretching")
   • The amount of memory required to compute the hash ("memory-hard" operations)
   • Including a random value, along with the password, as input to the hash computation ("salting")
   • Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs ("one-way" hashing)
   • Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs ("collision resistance")

 Note that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still
 provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it
 might not be able to significantly reduce the efficiency of a massively-parallel attack.

 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                    Type                                                                                                                                                                  ID       Name
 ChildOf                                                                          BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                  328     Use of Weak
                                                                                                                 typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                         Hash
 ParentOf                                                                     VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                               759     Use of a
                                                                                                                      describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                              One-Way
                                                                                                                                                                                                                                                                                                                                                           Hash
                                                                                                                                                                                                                                                                                                                                                           without a
                                                                                                                                                                                                                                                                                                                                                           Salt
 ParentOf                                                                     VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                               760     Use of a
                                                                                                                      describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                              One-Way
                                                                                                                                                                                                                                                                                                                                                           Hash with a
                                                                                                                                                                                                                                                                                                                                                           Predictable
                                                                                                                                                                                                                                                                                                                                                           Salt
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 255     Credentials Management Errors
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 310     Cryptographic Issues
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID        Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        327     Use of a
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Broken or
                                                                                                                                                                                                                                                                                                                                                                             Risky
                                                                                                                                                                                                                                                                                                                                                                             Cryptographic
                                                                                                                                                                                                                                                                                                                                                                             Algorithm
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1010    Authenticate Actors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
          Phase                                                                                             Note
 Architecture and Design REALIZATION: This weakness is caused during implementation of an architectural security tactic.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Bypass Protection Mechanism; Gain Privileges or Assume Identity
 Access Control
                    If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using
                    techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.
 + Demonstrative Examples
 
 Example 1

 In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.

 (bad code)
 Example Language: Python 
 def storePassword(userName,Password):
 hasher = hashlib.new('md5')
 hasher.update(Password)
 hashedPassword = hasher.digest()

 # UpdateUserLogin returns True on success, False otherwise
 return updateUserLogin(userName,hashedPassword)

 While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and
 discover the original password if the database is compromised.

 Fixing this is as simple as providing a salt to the hashing function on initialization:

 (good code)
 Example Language: Python 
 def storePassword(userName,Password):
 hasher = hashlib.new('md5',b'SaltGoesHere')
 hasher.update(Password)
 hashedPassword = hasher.digest()

 # UpdateUserLogin returns True on success, False otherwise
 return updateUserLogin(userName,hashedPassword)

 Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibits CWE-327.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2008-1526           Router does not use a salt with a hash, making it easier to crack passwords.
 CVE-2006-1058           Router does not use a salt with a hash, making it easier to crack passwords.
 CVE-2008-4905           Blogging software uses a hard-coded salt when calculating a password hash.
 CVE-2002-1657           Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.
 CVE-2001-0967           Server uses a constant salt when encrypting passwords, simplifying brute force attacks.
 CVE-2005-0408           chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.
 + Potential Mitigations
 Phase: Architecture and Design

 Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of
 memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such
 as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be
 reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.

 Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the
 most effective, they are all stronger than using salts with hash functions with very little computing overhead.

 Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control
 over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.

 Effectiveness: High

 Phases: Implementation; Architecture and Design

 When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Bytecode Weakness Analysis - including disassembler + source code weakness analysis
   • Binary Weakness Analysis - including disassembler + source code weakness analysis

 Effectiveness: SOAR Partial

 Manual Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies

 Effectiveness: SOAR Partial

 Manual Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Focused Manual Spotcheck - Focused manual analysis of source
   • Manual Source Code Review (not inspections)

 Effectiveness: High

 Automated Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Source code Weakness Analyzer
   • Context-configured Source Code Weakness Analyzer

 Effectiveness: High

 Automated Static Analysis

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Configuration Checker

 Effectiveness: SOAR Partial

 Architecture or Design Review

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Formal Methods / Correct-By-Construction

 Cost effective for partial coverage:

   • Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1346    OWASP Top Ten 2021 Category A02:2021 - Cryptographic Failures
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1402    Comprehensive Categorization: Encryption
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-55        Rainbow Table Password Cracking
 + References
 [REF-291] Johnny Shelley. "bcrypt". <http://bcrypt.sourceforge.net/>.
 [REF-292] Colin Percival. "Tarsnap - The scrypt key derivation function and encryption utility". <http://www.tarsnap.com/scrypt.html>.
 [REF-293] B. Kaliski. "RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0". 5.2 PBKDF2. 2000. <https://www.rfc-editor.org/rfc/rfc2898>. URL validated: 2023-04-07.
 [REF-294] Coda Hale. "How To Safely Store A Password". 2010-01-31. <https://codahale.com/how-to-safely-store-a-password/>. URL validated: 2023-04-07.
 [REF-295] Brian Krebs. "How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)". 2012-06-11. <https://krebsonsecurity.com/2012/06/
 how-companies-can-beef-up-password-security/>. URL validated: 2023-04-07.
 [REF-296] Solar Designer. "Password security: past, present, future". 2012. <https://www.openwall.com/presentations/PHDays2012-Password-Security/>. URL validated: 2023-04-07.
 [REF-297] Troy Hunt. "Our password hashing has no clothes". 2012-06-26. <https://www.troyhunt.com/our-password-hashing-has-no-clothes/>. URL validated: 2023-04-07.
 [REF-298] Joshbw. "Should we really use bcrypt/scrypt?". 2012-06-08. <https://web.archive.org/web/20120629144851/http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/>. URL
 validated: 2023-04-07.
 [REF-636] Jeff Atwood. "Speed Hashing". 2012-04-06. <https://blog.codinghorror.com/speed-hashing/>. URL validated: 2023-04-07.
 [REF-631] OWASP. "Password Storage Cheat Sheet". <https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html>. URL validated: 2023-04-07.
 [REF-632] Thomas Ptacek. "Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes". 2007-09-10. <http://hashphp.org/hashing.html>. URL validated: 2023-04-07.
 [REF-908] Solar Designer. "Password hashing at scale". 2012-10-01. <https://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/>. URL validated: 2023-04-07.
 [REF-909] Solar Designer. "New developments in password hashing: ROM-port-hard functions". 2012-11. <https://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/>. URL
 validated: 2023-04-07.
 [REF-633] Robert Graham. "The Importance of Being Canonical". 2009-02-02. <https://blog.erratasec.com/2009/02/importance-of-being-canonical.html#.ZCbyY7LMJPY>. URL validated: 2023-04-07.
 + Content History
                                                                                            + Submissions
                Submission Date                                                      Submitter                                                                Organization
 2013-01-28                                    CWE Content Team                                                                      MITRE
 (CWE 2.4, 2013-02-21)                         Created with input from members of the secure password hashing community.
                                                                                           + Modifications
               Modification Date                                                     Modifier                                                                 Organization
 2014-02-18                                    CWE Content Team                                                                      MITRE
                                               updated Potential_Mitigations, References
 2014-07-30                                    CWE Content Team                                                                      MITRE
                                               updated Detection_Factors
 2017-01-19                                    CWE Content Team                                                                      MITRE
                                               updated Relationships
 2017-11-08                                    CWE Content Team                                                                      MITRE
                                               updated Modes_of_Introduction, References, Relationships
 2019-01-03                                    CWE Content Team                                                                      MITRE
                                               updated Description
 2019-06-20                                    CWE Content Team                                                                      MITRE
                                               updated Related_Attack_Patterns, Relationships
 2020-02-24                                    CWE Content Team                                                                      MITRE
                                               updated Relationships
 2021-10-28                                    CWE Content Team                                                                      MITRE
                                               updated Relationships
 2023-01-31                                    CWE Content Team                                                                      MITRE
                                               updated Description
 2023-04-27                                    CWE Content Team                                                                      MITRE
                                               updated References, Relationships
 2023-06-29                                    CWE Content Team                                                                      MITRE
                                               updated Mapping_Notes, Relationships
 2024-02-29                                    CWE Content Team                                                                      MITRE
 (CWE 4.14, 2024-02-29)                        updated Demonstrative_Examples
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

