CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-364: Signal Handler Race Condition
 
 Weakness ID: 364
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product uses a signal handler that introduces a race condition.
 + Extended Description
 
 Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to
 exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution.

 These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by
 the "regular" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is
 already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting
 in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and
 the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.

 There are several known behaviors related to signal handlers that have received the label of "signal handler race condition":

   • Shared state (e.g. global data or static variables) that are accessible to both a signal handler and "regular" code
   • Shared state between a signal handler and other signal handlers
   • Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use
     global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and,
     possibly, code execution.
   • Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of
     double-free and use-after-free weaknesses.
   • Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality
   • While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any
     concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses.

 Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have
 a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant
 code:

   • Avoiding shared state
   • Using synchronization in the signal handler
   • Using synchronization in the regular code
   • Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)

 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID          Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        362     Concurrent
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Execution using
                                                                                                                                                                                                                                                                                                                                                                             Shared Resource
                                                                                                                                                                                                                                                                                                                                                                             with Improper
                                                                                                                                                                                                                                                                                                                                                                             Synchronization
                                                                                                                                                                                                                                                                                                                                                                             ('Race
                                                                                                                                                                                                                                                                                                                                                                             Condition')
 ParentOf                                                                                  BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           432     Dangerous Signal
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Handler not
                                                                                                                                                                                                                                                                                                                                                                             Disabled During
                                                                                                                                                                                                                                                                                                                                                                             Sensitive
                                                                                                                                                                                                                                                                                                                                                                             Operations
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        828     Signal Handler
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       with
                                                                                                                                                                                                                                                                                                                                                                             Functionality
                                                                                                                                                                                                                                                                                                                                                                             that is not
                                                                                                                                                                                                                                                                                                                                                                             Asynchronous-Safe
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        831     Signal Handler
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Function
                                                                                                                                                                                                                                                                                                                                                                             Associated with
                                                                                                                                                                                                                                                                                                                                                                             Multiple Signals
 CanPrecede                                                                                BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           123     Write-what-where
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Condition
 CanPrecede                                                                            VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        415     Double Free
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.
 CanPrecede                                                                            VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        416     Use After Free
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 387     Signal Errors
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 557     Concurrency Issues
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Sometimes Prevalent)

 C++ (Sometimes Prevalent)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Modify Application Data; Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands
 Confidentiality
 Availability       It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating
                    the assumptions of code that uses this global data.
                    Technical Impact: Gain Privileges or Assume Identity
 Access Control
                    If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges,
                    possibly making subsequent exploits more severe.
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument
 to the program) and exits.

 (bad code)
 Example Language: C 
 char *logMessage;

 void handler (int sigNum) {
 syslog(LOG_NOTICE, "%s\n", logMessage);
 free(logMessage);
 /* artificially increase the size of the timing window to make demonstration of this weakness easier. */

 sleep(10);
 exit(0);
 }

 int main (int argc, char* argv[]) {
 logMessage = strdup(argv[1]);
 /* Register signal handlers. */

 signal(SIGHUP, handler);
 signal(SIGTERM, handler);
 /* artificially increase the size of the timing window to make demonstration of this weakness easier. */

 sleep(10);
 }

 The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:

   • The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.
   • The program begins its "normal" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.
   • The attacker sends SIGHUP, which invokes handler (call this "SIGHUP-handler").
   • SIGHUP-handler begins to execute, calling syslog().
   • syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.
   • The attacker then sends SIGTERM.
   • SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.
   • The SIGTERM handler is invoked.
   • SIGTERM-handler records the log message using syslog(), then frees the logMessage variable.

 At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is
 assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code
 execution, depending on the circumstances under which the code is running.

 Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution.

 Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the
 bounds of the array.

 Example 2

 The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting.

 (bad code)
 Example Language: C 
 #include <signal.h>
 #include <syslog.h>
 #include <string.h>
 #include <stdlib.h>

 void *global1, *global2;
 char *what;
 void sh (int dummy) {
 syslog(LOG_NOTICE,"%s\n",what);
 free(global2);
 free(global1);
 /* Sleep statements added to expand timing window for race condition */

 sleep(10);
 exit(0);
 }

 int main (int argc,char* argv[]) {
 what=argv[1];
 global1=strdup(argv[2]);
 global2=malloc(340);
 signal(SIGHUP,sh);
 signal(SIGTERM,sh);
 /* Sleep statements added to expand timing window for race condition */

 sleep(10);
 exit(0);
 }

 However, the following sequence of events may result in a double-free (CWE-415):

  1. a SIGHUP is delivered to the process
  2. sh() is invoked to process the SIGHUP
  3. This first invocation of sh() reaches the point where global1 is freed
  4. At this point, a SIGTERM is sent to the process
  5. the second invocation of sh() might do another free of global1
  6. this results in a double-free (CWE-415)

 This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management
 structures. For more details, consult the example within "Delivering Signals for Fun and Profit" [REF-360].

 + Observed Examples
        Reference                                                                                        Description
 CVE-1999-0035           Signal handler does not disable other signal handlers, allowing it to be interrupted, causing other functionality to access files/etc. with raised privileges
 CVE-2001-0905           Attacker can send a signal while another signal handler is already running, leading to crash or execution with root privileges
 CVE-2001-1349           unsafe calls to library functions from signal handler
 CVE-2004-0794           SIGURG can be used to remotely interrupt signal handler; other variants exist
 CVE-2004-2259           SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.
 + Potential Mitigations
 Phase: Requirements

 Strategy: Language Selection

 Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
 Phase: Architecture and Design

 Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.
 Phase: Implementation

 Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution.
 + Functional Areas
 
   • Signals
   • Interprocess Communication

 + Affected Resources
 
   • System Process

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            361     7PK - Time and
                                                                                                                                                                                                                      State
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            986     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Missing Lock
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1401    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Concurrency
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID           Fit                                                                Mapped Node Name
 PLOVER                                                          Signal handler race condition
 7 Pernicious Kingdoms                                           Signal Handling Race Conditions
 CLASP                                                           Race condition in signal handler
 Software Fault Patterns          SFP19                          Missing Lock
 + References
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 [REF-360] Michal Zalewski. "Delivering Signals for Fun and Profit". <https://lcamtuf.coredump.cx/signals.txt>. URL validated: 2023-04-07.
 [REF-361] "Race Condition: Signal Handling". <https://vulncat.fortify.com/en/detail?id=desc.structural.cpp.race_condition_signal_handling#:~:text=
 Signal%20handling%20race%20conditions%20can,installed%20to%20handle%20multiple%20signals.s>. URL validated: 2023-04-07.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 13: Race Conditions." Page 205. McGraw-Hill. 2010.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 13, "Signal Vulnerabilities", Page 791. 1st Edition. Addison Wesley. 2006.
 + Content History
                                                                                            + Submissions
         Submission Date                                                  Submitter                                                                        Organization
 2006-07-19                      PLOVER
 (CWE Draft 3, 2006-07-19)

                                                                                           + Modifications
        Modification Date                                                  Modifier                                                                        Organization
 2008-07-01                      Eric Dalci                                                                                   Cigital
                                 updated Time_of_Introduction
 2008-09-08                      CWE Content Team                                                                             MITRE
                                 updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
 2010-09-27                      CWE Content Team                                                                             MITRE
                                 updated Observed_Examples, References
 2010-12-13                      CWE Content Team                                                                             MITRE
                                 updated Common_Consequences, Demonstrative_Examples, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships
 2011-06-01                      CWE Content Team                                                                             MITRE
                                 updated Common_Consequences
 2012-05-11                      CWE Content Team                                                                             MITRE
                                 updated Demonstrative_Examples, References, Relationships
 2014-06-23                      CWE Content Team                                                                             MITRE
                                 updated Demonstrative_Examples, References
 2014-07-30                      CWE Content Team                                                                             MITRE
                                 updated Relationships, Taxonomy_Mappings
 2017-11-08                      CWE Content Team                                                                             MITRE
                                 updated Observed_Examples, Relationships
 2020-02-24                      CWE Content Team                                                                             MITRE
                                 updated References, Relationships
 2021-03-15                      CWE Content Team                                                                             MITRE
                                 updated Potential_Mitigations
 2022-04-28                      CWE Content Team                                                                             MITRE
                                 updated Relationships, Research_Gaps
 2023-01-31                      CWE Content Team                                                                             MITRE
                                 updated Description
 2023-04-27                      CWE Content Team                                                                             MITRE
                                 updated References, Relationships, Time_of_Introduction
 2023-06-29                      CWE Content Team                                                                             MITRE
                                 updated Mapping_Notes
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

