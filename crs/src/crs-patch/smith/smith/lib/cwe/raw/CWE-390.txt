CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-390: Detection of Error Condition Without Action
 
 Weakness ID: 390
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product detects a specific error, but takes no actions to handle the error.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        755     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Handling of
                                                                                                                                                                                                                                                                                                                                                                             Exceptional
                                                                                                                                                                                                                                                                                                                                                                             Conditions
 PeerOf                                                                                VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        600     Uncaught
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Exception
                                                                                                                                                                                                                                                                                                                                                                             in Servlet
 CanPrecede                                                                            VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        401     Missing
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Release of
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             after
                                                                                                                                                                                                                                                                                                                                                                             Effective
                                                                                                                                                                                                                                                                                                                                                                             Lifetime
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 389     Error Conditions, Return Values, Status Codes
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1020    Verify Message Integrity
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation REALIZATION: This weakness is caused during implementation of an architectural security tactic.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Varies by Context; Unexpected State; Alter Execution Logic
 Integrity
 Other              An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could
                    cause other unintended behavior.
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed.

 (bad code)
 Example Language: C 
 foo=malloc(sizeof(char)); //the next line checks to see if malloc failed
 if (foo==NULL) {
 //We do nothing so we just ignore the error.
 }

 The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may
 cause the program to crash or terminate.

 Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully
 terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code.

 (good code)
 Example Language: C 
 foo=malloc(sizeof(char)); //the next line checks to see if malloc failed
 if (foo==NULL) {
 printf("Malloc failed to allocate memory resources");
 return -1;
 }

 Example 2

 In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open()
 and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or
 reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string
 will be returned, and the file will not be properly closed.

 (bad code)
 Example Language: C++ 
 char* readfile (char *filename) {
 try {
 // open input file
 ifstream infile;
 infile.open(filename);

 if (!infile.is_open()) {
 throw "Unable to open file " + filename;
 }

 // get length of file
 infile.seekg (0, ios::end);
 int length = infile.tellg();
 infile.seekg (0, ios::beg);

 // allocate memory
 char *buffer = new char [length];

 // read data from file
 infile.read (buffer,length);

 if (!infile.good()) {
 throw "Unable to read from file " + filename;
 }

 infile.close();

 return buffer;
 }
 catch (...) {
 /* bug: insert code to handle this later */
 }
 }

 The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully
 terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch
 all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for
 further handling or possible termination of the program.

 (good code)
 Example Language: C++ 
 char* readFile (char *filename) {
 try {
 // open input file
 ifstream infile;
 infile.open(filename);

 if (!infile.is_open()) {
 throw "Unable to open file " + filename;
 }

 // get length of file
 infile.seekg (0, ios::end);
 int length = infile.tellg();
 infile.seekg (0, ios::beg);

 // allocate memory
 char *buffer = new char [length];

 // read data from file
 infile.read (buffer,length);

 if (!infile.good()) {
 throw "Unable to read from file " + filename;
 }
 infile.close();

 return buffer;
 }
 catch (char *str) {
 printf("Error: %s \n", str);
 infile.close();
 throw str;
 }
 catch (...) {
 printf("Error occurred trying to read from file \n");
 infile.close();
 throw;
 }
 }

 Example 3

 In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the
 FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the
 method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the
 return of a null String.

 (bad code)
 Example Language: Java 
 public String readFile(String filename) {
 String retString = null;
 try {
 // initialize File and FileReader objects
 File file = new File(filename);
 FileReader fr = new FileReader(file);

 // initialize character buffer
 long fLen = file.length();
 char[] cBuf = new char[(int) fLen];

 // read data from file
 int iRead = fr.read(cBuf, 0, (int) fLen);

 // close file
 fr.close();

 retString = new String(cBuf);
 } catch (Exception ex) {
 /* do nothing, but catch so it'll compile... */
 }
 return retString;
 }

 The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully
 terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called
 within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all
 other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile()
 method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information
 to the user about the exception raised.

 (good code)
 Example Language: Java 
 public String readFile(String filename) throws FileNotFoundException, IOException, Exception {
 String retString = null;
 try {
 // initialize File and FileReader objects
 File file = new File(filename);
 FileReader fr = new FileReader(file);

 // initialize character buffer
 long fLen = file.length();
 char [] cBuf = new char[(int) fLen];

 // read data from file
 int iRead = fr.read(cBuf, 0, (int) fLen);

 // close file
 fr.close();

 retString = new String(cBuf);
 } catch (FileNotFoundException ex) {
 System.err.println ("Error: FileNotFoundException opening the input file: " + filename );
 System.err.println ("" + ex.getMessage() );
 throw new FileNotFoundException(ex.getMessage());
 } catch (IOException ex) {
 System.err.println("Error: IOException reading the input file.\n" + ex.getMessage() );
 throw new IOException(ex);
 } catch (Exception ex) {
 System.err.println("Error: Exception reading the input file.\n" + ex.getMessage() );
 throw new Exception(ex);
 }
 return retString;
 }
 + Observed Examples
        Reference                                                                                        Description
 CVE-2022-21820          A GPU data center manager detects an error due to a malformed request but does not act on it, leading to memory corruption.
 + Potential Mitigations
 Phase: Implementation

 Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.
 Phase: Implementation

 If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and
 cleanup the program.
 Phase: Testing

 Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence
 partitioning, robustness and fault tolerance, mutation, and fuzzing.
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            728     OWASP Top Ten
                                                                                                                                                                                                                      2004 Category
                                                                                                                                                                                                                      A7 - Improper
                                                                                                                                                                                                                      Error Handling
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            851     The CERT Oracle
                                                                                                                                                                                                                      Secure Coding
                                                                                                                                                                                                                      Standard for
                                                                                                                                                                                                                      Java (2011)
                                                                                                                                                                                                                      Chapter 8 -
                                                                                                                                                                                                                      Exceptional
                                                                                                                                                                                                                      Behavior (ERR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            880     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      12 - Exceptions
                                                                                                                                                                                                                      and Error
                                                                                                                                                                                                                      Handling (ERR)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            962     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Unchecked
                                                                                                                                                                                                                      Status
                                                                                                                                                                                                                      Condition
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1306    CISQ Quality
                                                                                                                                                                                                                      Measures -
                                                                                                                                                                                                                      Reliability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1405    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Improper Check
                                                                                                                                                                                                                      or Handling of
                                                                                                                                                                                                                      Exceptional
                                                                                                                                                                                                                      Conditions
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID           Fit                                                                Mapped Node Name
 CLASP                                                           Improper error handling
 The CERT Oracle Secure Coding    ERR00-J                        Do not suppress or ignore checked exceptions
 Standard for Java (2011)
 Software Fault Patterns          SFP4                           Unchecked Status Condition
 + References
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 11: Failure to Handle Errors Correctly." Page 183. McGraw-Hill. 2010.
 + Content History
                                                                                           + Submissions
               Submission Date                                                     Submitter                                                                 Organization
 2006-07-19                                   CLASP
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
              Modification Date                                                     Modifier                                                                 Organization
 2008-07-01                                   Eric Dalci                                                                           Cigital
                                              updated Time_of_Introduction
 2008-09-08                                   CWE Content Team                                                                     MITRE
                                              updated Relationships, Other_Notes, Taxonomy_Mappings
 2008-11-24                                   CWE Content Team                                                                     MITRE
                                              updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations
 2009-03-10                                   CWE Content Team                                                                     MITRE
                                              updated Relationships
 2009-07-27                                   CWE Content Team                                                                     MITRE
                                              updated Demonstrative_Examples
 2011-06-01                                   CWE Content Team                                                                     MITRE
                                              updated Common_Consequences, Relationships, Taxonomy_Mappings
 2011-06-27                                   CWE Content Team                                                                     MITRE
                                              updated Common_Consequences
 2011-09-13                                   CWE Content Team                                                                     MITRE
                                              updated Relationships, Taxonomy_Mappings
 2012-05-11                                   CWE Content Team                                                                     MITRE
                                              updated Common_Consequences, References, Relationships
 2014-02-18                                   CWE Content Team                                                                     MITRE
                                              updated Related_Attack_Patterns
 2014-07-30                                   CWE Content Team                                                                     MITRE
                                              updated Relationships, Taxonomy_Mappings
 2017-11-08                                   CWE Content Team                                                                     MITRE
                                              updated Applicable_Platforms, Modes_of_Introduction, Relationships, Taxonomy_Mappings
 2019-01-03                                   CWE Content Team                                                                     MITRE
                                              updated Related_Attack_Patterns, Taxonomy_Mappings
 2020-02-24                                   CWE Content Team                                                                     MITRE
                                              updated References, Type
 2020-08-20                                   CWE Content Team                                                                     MITRE
                                              updated Relationships
 2023-01-31                                   CWE Content Team                                                                     MITRE
                                              updated Description, Potential_Mitigations
 2023-04-27                                   CWE Content Team                                                                     MITRE
                                              updated Detection_Factors, Relationships, Time_of_Introduction
 2023-06-29                                   CWE Content Team                                                                     MITRE
                                              updated Mapping_Notes
 2023-10-26                                   CWE Content Team                                                                     MITRE
                                              updated Observed_Examples
 2024-02-29                                   CWE Content Team                                                                     MITRE
 (CWE 4.14, 2024-02-29)                       updated Demonstrative_Examples
                                                                                       + Previous Entry Names
                 Change Date                                                                                   Previous Entry Name
 2008-04-11                                   Improper Error Handling
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

