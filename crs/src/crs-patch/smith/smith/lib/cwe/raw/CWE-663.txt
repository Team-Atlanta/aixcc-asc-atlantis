CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-663: Use of a Non-reentrant Function in a Concurrent Context
 
 Weakness ID: 663
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise
 influence its state.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID         Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        662     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Synchronization
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        479     Signal Handler
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Use of a
                                                                                                                                                                                                                                                                                                                                                                             Non-reentrant
                                                                                                                                                                                                                                                                                                                                                                             Function
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        558     Use of getlogin
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       () in
                                                                                                                                                                                                                                                                                                                                                                             Multithreaded
                                                                                                                                                                                                                                                                                                                                                                             Application
 PeerOf                                                                                    BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           1265    Unintended
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Reentrant
                                                                                                                                                                                                                                                                                                                                                                             Invocation of
                                                                                                                                                                                                                                                                                                                                                                             Non-reentrant
                                                                                                                                                                                                                                                                                                                                                                             Code Via Nested
                                                                                                                                                                                                                                                                                                                                                                             Calls
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 557     Concurrency Issues
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Modify Memory; Read Memory; Modify Application Data; Read Application Data; Alter Execution Logic
 Confidentiality
 Other
 + Demonstrative Examples
 
 Example 1

 In this example, a signal handler uses syslog() to log a message:

 (bad code)
  
 char *message;
 void sh(int dummy) {
 syslog(LOG_NOTICE,"%s\n",message);
 sleep(10);
 exit(0);
 }
 int main(int argc,char* argv[]) {
 ...
 signal(SIGHUP,sh);
 signal(SIGTERM,sh);
 sleep(10);
 exit(0);
 }
 If the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined,
 and possibly, exploitable state.

 Example 2

 The following code relies on getlogin() to determine whether or not a user is trusted. It is easily subverted.

 (bad code)
 Example Language: C 
 pwd = getpwnam(getlogin());
 if (isTrustedGroup(pwd->pw_gid)) {
 allow();
 } else {
 deny();
 }
 + Observed Examples
        Reference                                                                                        Description
 CVE-2001-1349           unsafe calls to library functions from signal handler
 CVE-2004-2259           SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.
 + Potential Mitigations
 Phase: Implementation

 Use reentrant functions if available.
 Phase: Implementation

 Add synchronization to your non-reentrant function.
 Phase: Implementation

 In Java, use the ReentrantLock Class.
 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 986     SFP Secondary Cluster: Missing Lock
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1401    Comprehensive Categorization: Concurrency
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-29        Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions
 + References
 [REF-547] SUN. "Java Concurrency API". Class ReentrantLock. <https://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/ReentrantLock.html>. URL validated: 2023-04-07.
 [REF-548] Dipak Jha, Software Engineer, IBM. "Use reentrant functions for safer signal handling". <https://archive.ph/rl1XR>. URL validated: 2023-04-07.
 + Content History
                                                                                           + Submissions
                Submission Date                                                      Submitter                                                               Organization
 2008-04-11                                     CWE Community
 (CWE Draft 9, 2008-04-11)                      Submitted by members of the CWE community to extend early CWE versions
                                                                                          + Modifications
               Modification Date                                                     Modifier                                                                Organization
 2008-07-01                                     Eric Dalci                                                                          Cigital
                                                updated References, Potential_Mitigations, Time_of_Introduction
 2008-09-08                                     CWE Content Team                                                                    MITRE
                                                updated Relationships, References
 2009-03-10                                     CWE Content Team                                                                    MITRE
                                                updated Related_Attack_Patterns
 2010-09-27                                     CWE Content Team                                                                    MITRE
                                                updated Name, Observed_Examples, Potential_Mitigations, References, Relationships
 2010-12-13                                     CWE Content Team                                                                    MITRE
                                                updated Description, Name, Relationships
 2011-06-01                                     CWE Content Team                                                                    MITRE
                                                updated Common_Consequences
 2012-05-11                                     CWE Content Team                                                                    MITRE
                                                updated Relationships
 2014-07-30                                     CWE Content Team                                                                    MITRE
                                                updated Relationships
 2017-11-08                                     CWE Content Team                                                                    MITRE
                                                updated Observed_Examples
 2020-02-24                                     CWE Content Team                                                                    MITRE
                                                updated Relationships
 2020-06-25                                     CWE Content Team                                                                    MITRE
                                                updated Relationships
 2020-12-10                                     CWE Content Team                                                                    MITRE
                                                updated Common_Consequences
 2023-01-31                                     CWE Content Team                                                                    MITRE
                                                updated Description
 2023-04-27                                     CWE Content Team                                                                    MITRE
                                                updated References, Relationships, Time_of_Introduction
 2023-06-29                                     CWE Content Team                                                                    MITRE
                                                updated Mapping_Notes
 2023-10-26                                     CWE Content Team                                                                    MITRE
                                                updated Demonstrative_Examples
                                                                                       + Previous Entry Names
                  Change Date                                                                                   Previous Entry Name
 2010-09-27                                     Use of a Non-reentrant Function in an Unsynchronized Context
 2010-12-13                                     Use of a Non-reentrant Function in a Multithreaded Context
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

