CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere
 
 Weakness ID: 497
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product
 does.
 + Extended Description
 
 Network-based products, such as web applications, often run on top of an operating system or similar environment. When the product communicates with outside parties, details about the underlying
 system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product
 itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan.

 An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other
 weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal
 technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant
 implementation details such as stack traces as part of its error handling mechanism.

 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID        Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        200     Exposure of
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Sensitive
                                                                                                                                                                                                                                                                                                                                                                             Information
                                                                                                                                                                                                                                                                                                                                                                             to an
                                                                                                                                                                                                                                                                                                                                                                             Unauthorized
                                                                                                                                                                                                                                                                                                                                                                             Actor
 ParentOf                                                                                  BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           214     Invocation
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  of Process
                                                                                                                                                                                                                                                                                                                                                                             Using
                                                                                                                                                                                                                                                                                                                                                                             Visible
                                                                                                                                                                                                                                                                                                                                                                             Sensitive
                                                                                                                                                                                                                                                                                                                                                                             Information
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        548     Exposure of
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Information
                                                                                                                                                                                                                                                                                                                                                                             Through
                                                                                                                                                                                                                                                                                                                                                                             Directory
                                                                                                                                                                                                                                                                                                                                                                             Listing
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 199     Information Management Errors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Confidentiality    Technical Impact: Read Application Data

 + Demonstrative Examples
 
 Example 1

 The following code prints the path environment variable to the standard error stream:

 (bad code)
 Example Language: C 
 char* path = getenv("PATH");
 ...
 sprintf(stderr, "cannot find exe on path %s\n", path);

 Example 2

 This code prints all of the running processes belonging to the current user.

 (bad code)
 Example Language: PHP 

 //assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoiding CWE-78)
 $userName = getCurrentUser();
 $command = 'ps aux | grep ' . $userName;
 system($command);

 If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments (CWE-497). This program is also
 potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to
 run the system commands, the PHP interpreter may by default be running with higher privileges than users.

 Example 3

 The following code prints an exception to the standard error stream:

 (bad code)
 Example Language: Java 
 try {
 ...
 } catch (Exception e) {
 e.printStackTrace();
 }
 (bad code)
  
 try {
 ...
 } catch (Exception e) {
 Console.Writeline(e);
 }

 Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely
 what sort of an attack the system will be vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal
 more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care
 that the administrators have put into configuring the program.

 Example 4

 The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console.

 (bad code)
 Example Language: C# 
 string cs="database=northwind; server=mySQLServer...";
 SqlConnection conn=new SqlConnection(cs);
 ...
 Console.Writeline(cs);

 Depending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely
 what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more
 oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that
 the administrators have put into configuring the program.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2021-32638          Code analysis product passes access tokens as a command-line parameter or through an environment variable, making them visible to other processes via the ps command.
 + Potential Mitigations
 Phases: Architecture and Design; Implementation

 Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable
 by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 485     7PK - Encapsulation
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 851     The CERT Oracle Secure Coding Standard for Java (2011) Chapter 8 -
                                                                                                                                 Exceptional Behavior (ERR)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 880     CERT C++ Secure Coding Section 12 - Exceptions and Error Handling
                                                                                                                                 (ERR)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 963     SFP Secondary Cluster: Exposed Data
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1345    OWASP Top Ten 2021 Category A01:2021 - Broken Access Control
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1417    Comprehensive Categorization: Sensitive Information Exposure
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID         Fit                                                                 Mapped Node Name
 7 Pernicious Kingdoms                                        System Information Leak
 The CERT Oracle Secure Coding    ERR01-J                     Do not allow exceptions to expose sensitive information
 Standard for Java (2011)
 Software Fault Patterns          SFP23                       Exposed Data
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-170       Web Application Fingerprinting
 CAPEC-694       System Location Discovery
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 + Content History
                                                                                           + Submissions
                      Submission Date                                                             Submitter                                                          Organization
 2006-07-19                                                7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
                     Modification Date                                                            Modifier                                                           Organization
 2008-07-01                                                Eric Dalci                                                                              Cigital
                                                           updated Time_of_Introduction
 2008-09-08                                                CWE Content Team                                                                        MITRE
                                                           updated Relationships, Other_Notes, Taxonomy_Mappings, Type
 2009-03-10                                                CWE Content Team                                                                        MITRE
                                                           updated Demonstrative_Examples
 2009-05-27                                                CWE Content Team                                                                        MITRE
                                                           updated Demonstrative_Examples
 2009-07-27                                                CWE Content Team                                                                        MITRE
                                                           updated Demonstrative_Examples
 2009-10-29                                                CWE Content Team                                                                        MITRE
                                                           updated Description, Other_Notes
 2009-12-28                                                CWE Content Team                                                                        MITRE
                                                           updated Description, Name
 2011-06-01                                                CWE Content Team                                                                        MITRE
                                                           updated Common_Consequences, Relationships, Taxonomy_Mappings
 2011-09-13                                                CWE Content Team                                                                        MITRE
                                                           updated Relationships, Taxonomy_Mappings
 2012-05-11                                                CWE Content Team                                                                        MITRE
                                                           updated Related_Attack_Patterns, Relationships
 2012-10-30                                                CWE Content Team                                                                        MITRE
                                                           updated Potential_Mitigations
 2014-07-30                                                CWE Content Team                                                                        MITRE
                                                           updated Relationships, Taxonomy_Mappings
 2017-05-03                                                CWE Content Team                                                                        MITRE
                                                           updated Related_Attack_Patterns
 2017-11-08                                                CWE Content Team                                                                        MITRE
                                                           updated Applicable_Platforms, Taxonomy_Mappings
 2019-01-03                                                CWE Content Team                                                                        MITRE
                                                           updated Taxonomy_Mappings
 2019-06-20                                                CWE Content Team                                                                        MITRE
                                                           updated Related_Attack_Patterns
 2020-02-24                                                CWE Content Team                                                                        MITRE
                                                           updated Description, Name, References, Relationships, Type
 2021-03-15                                                CWE Content Team                                                                        MITRE
                                                           updated Demonstrative_Examples
 2021-10-28                                                CWE Content Team                                                                        MITRE
                                                           updated Relationships
 2022-10-13                                                CWE Content Team                                                                        MITRE
                                                           updated Related_Attack_Patterns
 2023-01-31                                                CWE Content Team                                                                        MITRE
                                                           updated Description, Relationships
 2023-04-27                                                CWE Content Team                                                                        MITRE
                                                           updated Detection_Factors, Relationships
 2023-06-29                                                CWE Content Team                                                                        MITRE
                                                           updated Mapping_Notes
 2023-10-26                                                CWE Content Team                                                                        MITRE
                                                           updated Observed_Examples
                                                                                       + Previous Entry Names
                        Change Date                                                                                   Previous Entry Name
 2008-04-11                                                System Information Leak
 2009-12-28                                                Information Leak of System Data
 2020-02-24                                                Exposure of System Data to an Unauthorized Control Sphere
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

