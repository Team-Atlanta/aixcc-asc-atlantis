CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-135: Incorrect Calculation of Multi-Byte String Length
 
 Weakness ID: 135
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          682     Incorrect
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Calculation
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 133     String Errors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
                There are several ways in which improper string length checking may result in an exploitable condition. All of these, however, involve the introduction of buffer overflow
                conditions in order to reach an exploitable state.

                The first of these issues takes place when the output of a wide or multi-byte character string, string-length function is used as a size for the allocation of memory. While this
 Implementation will result in an output of the number of characters in the string, note that the characters are most likely not a single byte, as they are with standard character strings. So,
                using the size returned as the size sent to new or malloc and copying the string to this newly allocated memory will result in a buffer overflow.

                Another common way these strings are misused involves the mixing of standard string and wide or multi-byte string functions on a single string. Invariably, this mismatched
                information will result in the creation of a possibly exploitable buffer overflow condition.

 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Execute Unauthorized Code or Commands
 Confidentiality
 Availability       This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's
                    implicit security policy. This can often be used to subvert any other security service.
                    Technical Impact: Read Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)
 Availability
 Confidentiality    Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks
                    leading to lack of availability are possible, including putting the program into an infinite loop.
                    Technical Impact: Read Memory
 Confidentiality
                    In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the
                    current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.
 + Demonstrative Examples
 
 Example 1

 The following example would be exploitable if any of the commented incorrect malloc calls were used.

 (bad code)
 Example Language: C 
 #include <stdio.h>
 #include <strings.h>
 #include <wchar.h>

 int main() {

 wchar_t wideString[] = L"The spazzy orange tiger jumped " \
 "over the tawny jaguar.";
 wchar_t *newString;

 printf("Strlen() output: %d\nWcslen() output: %d\n",
 strlen(wideString), wcslen(wideString));

 /* Wrong because the number of chars in a string isn't related to its length in bytes //
 newString = (wchar_t *) malloc(strlen(wideString));
 */

 /* Wrong because wide characters aren't 1 byte long! //
 newString = (wchar_t *) malloc(wcslen(wideString));
 */

 /* Wrong because wcslen does not include the terminating null */
 newString = (wchar_t *) malloc(wcslen(wideString) * sizeof(wchar_t));

 /* correct! */
 newString = (wchar_t *) malloc((wcslen(wideString) + 1) * sizeof(wchar_t));

 /* ... */
 }

 The output from the printf() statement would be:

 (result)
  
 Strlen() output: 0
 Wcslen() output: 53
 + Potential Mitigations
 Phase: Implementation

 Strategy: Input Validation

 Always verify the length of the string unit character.
 Phase: Implementation

 Strategy: Libraries or Frameworks

 Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            741     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      8 - Characters
                                                                                                                                                                                                                      and Strings
                                                                                                                                                                                                                      (STR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            857     The CERT Oracle
                                                                                                                                                                                                                      Secure Coding
                                                                                                                                                                                                                      Standard for
                                                                                                                                                                                                                      Java (2011)
                                                                                                                                                                                                                      Chapter 14 -
                                                                                                                                                                                                                      Input Output
                                                                                                                                                                                                                      (FIO)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            974     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Incorrect
                                                                                                                                                                                                                      Buffer Length
                                                                                                                                                                                                                      Computation
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1408    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Incorrect
                                                                                                                                                                                                                      Calculation
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID         Fit                                                                Mapped Node Name
 CLASP                                                       Improper string length checking
 The CERT Oracle Secure Coding    FIO10-J                    Ensure the array is filled when using read() to fill an array
 Standard for Java (2011)
 Software Fault Patterns          SFP10                      Incorrect Buffer Length Computation
 + References
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 5, "Unicode and ANSI Buffer Size Mismatches" Page 153. 2nd Edition. Microsoft Press. 2002-12-04. <https://
 www.microsoftpressstore.com/store/writing-secure-code-9780735617223>.
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 + Content History
                                                                                           + Submissions
             Submission Date                                                     Submitter                                                                  Organization
 2006-07-19                               CLASP
 (CWE Draft 3, 2006-07-19)

                                                                                          + Contributions
            Contribution Date                                                   Contributor                                                                 Organization
 2010-01-11                               Gregory Padgett                                                                         Unitrends
                                          correction to Demonstrative_Example
                                                                                          + Modifications
            Modification Date                                                    Modifier                                                                   Organization
 2008-07-01                               Eric Dalci                                                                              Cigital
                                          updated Potential_Mitigations, Time_of_Introduction
 2008-09-08                               CWE Content Team                                                                        MITRE
                                          updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
 2008-11-24                               CWE Content Team                                                                        MITRE
                                          updated Relationships, Taxonomy_Mappings
 2009-05-27                               CWE Content Team                                                                        MITRE
                                          updated Description
 2010-02-16                               CWE Content Team                                                                        MITRE
                                          updated Demonstrative_Examples, References
 2011-06-01                               CWE Content Team                                                                        MITRE
                                          updated Common_Consequences, Relationships, Taxonomy_Mappings
 2011-06-27                               CWE Content Team                                                                        MITRE
                                          updated Common_Consequences
 2012-05-11                               CWE Content Team                                                                        MITRE
                                          updated Common_Consequences, Demonstrative_Examples, Relationships, Taxonomy_Mappings
 2012-10-30                               CWE Content Team                                                                        MITRE
                                          updated Potential_Mitigations
 2014-06-23                               CWE Content Team                                                                        MITRE
                                          updated Enabling_Factors_for_Exploitation, Other_Notes
 2014-07-30                               CWE Content Team                                                                        MITRE
                                          updated Relationships, Taxonomy_Mappings
 2017-11-08                               CWE Content Team                                                                        MITRE
                                          updated Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Taxonomy_Mappings
 2018-03-27                               CWE Content Team                                                                        MITRE
                                          updated References
 2019-01-03                               CWE Content Team                                                                        MITRE
                                          updated Taxonomy_Mappings
 2021-03-15                               CWE Content Team                                                                        MITRE
                                          updated References
 2023-01-31                               CWE Content Team                                                                        MITRE
                                          updated Description
 2023-04-27                               CWE Content Team                                                                        MITRE
                                          updated Detection_Factors, Relationships
 2023-06-29                               CWE Content Team                                                                        MITRE
                                          updated Mapping_Notes
                                                                                       + Previous Entry Names
               Change Date                                                                                   Previous Entry Name
 2008-04-11                               Improper String Length Checking
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

