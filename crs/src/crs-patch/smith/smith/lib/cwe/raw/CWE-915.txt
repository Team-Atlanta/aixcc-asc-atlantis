CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes
 
 Weakness ID: 915
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control
 which attributes can be modified.
 + Extended Description
 
 If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.

 This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.

 + Alternate Terms
   Mass Assignment:    "Mass assignment" is the name of a feature in Ruby on Rails that allows simultaneous modification of multiple object attributes.
     AutoBinding:      The "Autobinding" term is used in frameworks such as Spring MVC and ASP.NET MVC.
 PHP Object Injection: Some PHP application researchers use this term for attacking unsafe use of the unserialize() function, but it is also used for CWE-502.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID           Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        913     Improper Control of
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Dynamically-Managed
                                                                                                                                                                                                                                                                                                                                                                             Code Resources
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        1321    Improperly
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Controlled
                                                                                                                                                                                                                                                                                                                                                                             Modification of
                                                                                                                                                                                                                                                                                                                                                                             Object Prototype
                                                                                                                                                                                                                                                                                                                                                                             Attributes
                                                                                                                                                                                                                                                                                                                                                                             ('Prototype
                                                                                                                                                                                                                                                                                                                                                                             Pollution')
 PeerOf                                                                                    BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           502     Deserialization of
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Untrusted Data
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 399     Resource Management Errors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
          Phase                                                                                             Note
 Architecture and Design
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Ruby (Undetermined Prevalence)

 ASP.NET (Undetermined Prevalence)

 PHP (Undetermined Prevalence)

 Python (Undetermined Prevalence)

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Modify Application Data
 Integrity
                    An attacker could modify sensitive data or program variables.
 Integrity          Technical Impact: Execute Unauthorized Code or Commands

 Other              Technical Impact: Varies by Context; Alter Execution Logic
 Integrity
 + Demonstrative Examples
 
 Example 1

 This function sets object attributes based on a dot-separated path.

 (bad code)
 Example Language: JavaScript 
 function setValueByPath (object, path, value) {
 const pathArray = path.split(".");
 const attributeToSet = pathArray.pop();
 let objectToModify = object;
 for (const attr of pathArray) {
 if (typeof objectToModify[attr] !== 'object') {
 objectToModify[attr] = {};
 }

 objectToModify = objectToModify[attr];
 }

 objectToModify[attributeToSet] = value;
 return object;
 }

 This function does not check if the attribute resolves to the object prototype. These codes can be used to add "isAdmin: true" to the object prototype.

 (bad code)
 Example Language: JavaScript 
 setValueByPath({}, "__proto__.isAdmin", true)
 setValueByPath({}, "constructor.prototype.isAdmin", true)

 By using a denylist of dangerous attributes, this weakness can be eliminated.

 (good code)
 Example Language: JavaScript 
 function setValueByPath (object, path, value) {
 const pathArray = path.split(".");
 const attributeToSet = pathArray.pop();
 let objectToModify = object;
 for (const attr of pathArray) {
 // Ignore attributes which resolve to object prototype
 if (attr === "__proto__" || attr === "constructor" || attr === "prototype") {
 continue;
 }
 if (typeof objectToModify[attr] !== "object") {
 objectToModify[attr] = {};
 }
 objectToModify = objectToModify[attr];
 }
 objectToModify[attributeToSet] = value;
 return object;
 }
 + Observed Examples
        Reference                                                                                        Description
 CVE-2012-2054           Mass assignment allows modification of arbitrary attributes using modified URL.
 CVE-2012-2055           Source version control product allows modification of trusted key using mass assignment.
 CVE-2008-7310           Attackers can bypass payment step in e-commerce product.
 CVE-2013-1465           Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.
 CVE-2012-3527           Use of PHP unserialize function on untrusted input in content management system might allow code execution.
 CVE-2012-0911           Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.
 CVE-2012-0911           Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.
 CVE-2011-4962           Content management system written in PHP allows code execution through page comments.
 CVE-2009-4137           Use of PHP unserialize function on cookie value allows remote code execution or upload of arbitrary files.
 CVE-2007-5741           Content management system written in Python interprets untrusted data as pickles, allowing code execution.
 CVE-2011-2520           Python script allows local users to execute code via pickled data.
 CVE-2005-2875           Python script allows remote attackers to execute arbitrary code using pickled objects.
 CVE-2013-0277           Ruby on Rails allows deserialization of untrusted YAML to execute arbitrary code.
 CVE-2011-2894           Spring framework allows deserialization of objects from untrusted sources to execute arbitrary code.
 CVE-2012-1833           Grails allows binding of arbitrary parameters to modify arbitrary object properties.
 CVE-2010-3258           Incorrect deserialization in web browser allows escaping the sandbox.
 CVE-2008-1013           Media library allows deserialization of objects by untrusted Java applets, leading to arbitrary code execution.
 + Potential Mitigations
 Phase: Implementation

 If available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over
 denylists.

 For applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.

 Phases: Architecture and Design; Implementation

 If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC)
 could be used to ensure that data has not been modified.
 Phase: Implementation

 Strategy: Input Validation

 For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.
 Phases: Implementation; Architecture and Design

 Strategy: Refactoring

 Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 1340    CISQ Data
                                                                                                                                                                                                                      Protection
                                                                                                                                                                                                                      Measures
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1354    OWASP Top Ten
                                                                                                                                                                                                                      2021 Category
                                                                                                                                                                                                                      A08:2021 -
                                                                                                                                                                                                                      Software and
                                                                                                                                                                                                                      Data Integrity
                                                                                                                                                                                                                      Failures
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1415    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Resource
                                                                                                                                                                                                                      Control
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Notes
 
 Maintenance

 The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.
 + References
 [REF-885] Stefan Esser. "Shocking News in PHP Exploitation". 2009. <https://owasp.org/www-pdf-archive/POC2009-ShockingNewsInPHPExploitation.pdf>. URL validated: 2023-04-07.
 [REF-886] Dinis Cruz. ""Two Security Vulnerabilities in the Spring Framework's MVC" pdf (from 2008)". <http://diniscruz.blogspot.com/2011/07/two-security-vulnerabilities-in-spring.html>. URL
 validated: 2023-04-07.
 [REF-887] Ryan Berg and Dinis Cruz. "Two Security Vulnerabilities in the Spring Framework's MVC". <https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf>. URL
 validated: 2023-04-07.
 [REF-888] ASPNETUE. "Best Practices for ASP.NET MVC". 2010-09-17. <https://web.archive.org/web/20100921074010/http://blogs.msdn.com/b/aspnetue/archive/2010/09/17/second_2d00_post.aspx>. URL
 validated: 2023-04-07.
 [REF-889] Michael Hartl. "Mass assignment in Rails applications". 2008-09-21. <https://web.archive.org/web/20090808163156/http://blog.mhartl.com/2008/09/21/mass-assignment-in-rails-applications/
 >. URL validated: 2023-04-07.
 [REF-890] Tobi. "Secure your Rails apps!". 2012-03-06. <https://pragtob.wordpress.com/2012/03/06/secure-your-rails-apps/>. URL validated: 2023-04-07.
 [REF-891] Heiko Webers. "Ruby On Rails Security Guide". <https://guides.rubyonrails.org/security.html#mass-assignment>. URL validated: 2023-04-07.
 [REF-892] Josh Bush. "Mass Assignment Vulnerability in ASP.NET MVC". 2012-03-05. <https://web.archive.org/web/20120309022539/http://freshbrewedcode.com/joshbush/2012/03/05/
 mass-assignment-aspnet-mvc>. URL validated: 2023-04-07.
 [REF-893] K. Scott Allen. "6 Ways To Avoid Mass Assignment in ASP.NET MVC". 2012-03-12. <https://odetocode.com/blogs/scott/archive/2012/03/11/complete-guide-to-mass-assignment-in-asp-net-mvc.aspx
 >. URL validated: 2023-04-07.
 [REF-894] Egidio Romano. "PHP Object Injection". 2013-01-22. <https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection>. URL validated: 2023-04-07.
 [REF-464] Heine Deelstra. "Unserializing user-supplied data, a bad idea". 2010-08-25. <https://drupalsun.com/heine/2010/08/25/unserializing-user-supplied-data-bad-idea>. URL validated: 2023-04-07
 .
 [REF-466] Nadia Alramli. "Why Python Pickle is Insecure". 2009-09-09. <http://michael-rushanan.blogspot.com/2012/10/why-python-pickle-is-insecure.html>. URL validated: 2023-04-07.
 + Content History
                                                                                            + Submissions
           Submission Date                                                       Submitter                                                                      Organization
 2013-01-26                          CWE Content Team                                                                                   MITRE
 (CWE 2.4, 2013-02-21)

                                                                                           + Contributions
          Contribution Date                                                     Contributor                                                                     Organization
 2013-01-26                          Dan Amodio, Dave Wichers                                                                           Aspect Security
                                     Suggested adding mass assignment, provided references, and clarified relationship with AutoBinding.
                                                                                           + Modifications
          Modification Date                                                       Modifier                                                                      Organization
 2013-07-17                          CWE Content Team                                                                                   MITRE
                                     updated References
 2017-05-03                          CWE Content Team                                                                                   MITRE
                                     updated Potential_Mitigations
 2017-11-08                          CWE Content Team                                                                                   MITRE
                                     updated References
 2019-06-20                          CWE Content Team                                                                                   MITRE
                                     updated Relationships
 2020-02-24                          CWE Content Team                                                                                   MITRE
                                     updated Relationships
 2020-06-25                          CWE Content Team                                                                                   MITRE
                                     updated Alternate_Terms, Potential_Mitigations
 2020-12-10                          CWE Content Team                                                                                   MITRE
                                     updated Relationships
 2021-10-28                          CWE Content Team                                                                                   MITRE
                                     updated Relationships
 2023-01-31                          CWE Content Team                                                                                   MITRE
                                     updated Description, Observed_Examples
 2023-04-27                          CWE Content Team                                                                                   MITRE
                                     updated Detection_Factors, References, Relationships
 2023-06-29                          CWE Content Team                                                                                   MITRE
                                     updated Mapping_Notes
 2024-02-29                          CWE Content Team                                                                                   MITRE
 (CWE 4.14, 2024-02-29)              updated Demonstrative_Examples
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

