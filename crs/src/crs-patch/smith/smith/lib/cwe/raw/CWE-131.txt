CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-131: Incorrect Calculation of Buffer Size
 
 Weakness ID: 131
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          682     Incorrect
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Calculation
 ParentOf                                                                                VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                         467     Use of
                                                                                                                                describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                         sizeof() on
                                                                                                                                                                                                                                                                                                                                                                                a Pointer
                                                                                                                                                                                                                                                                                                                                                                                Type
 CanPrecede                                                                              ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                         119     Improper
                                                                                                                      Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                              Restriction
                                                                                                                                                                                                                                                                                                                                                                                of
                                                                                                                                                                                                                                                                                                                                                                                Operations
                                                                                                                                                                                                                                                                                                                                                                                within the
                                                                                                                                                                                                                                                                                                                                                                                Bounds of a
                                                                                                                                                                                                                                                                                                                                                                                Memory
                                                                                                                                                                                                                                                                                                                                                                                Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1218    Memory Buffer Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          682     Incorrect
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Calculation
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          682     Incorrect
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Calculation
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Data Protection Measures" (CWE-1340)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          682     Incorrect
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Calculation
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Read Memory; Modify Memory
 Integrity
 Availability       If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the
 Confidentiality    allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code
                    execution, or exposing sensitive data.
 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the
 elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.

 (bad code)
 Example Language: C 
 int i;
 unsigned int numWidgets;
 Widget **WidgetList;

 numWidgets = GetUntrustedSizeValue();
 if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {
 ExitError("Incorrect number of widgets requested!");
 }
 WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));
 printf("WidgetList ptr=%p\n", WidgetList);
 for(i=0; i<numWidgets; i++) {
 WidgetList[i] = InitializeWidget();
 }
 WidgetList[numWidgets] = NULL;
 showWidgets(WidgetList);

 However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL
 pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is
 assigned. Depending on the environment and compilation settings, this could cause memory corruption.

 Example 2

 The following image processing code allocates a table for images.

 (bad code)
 Example Language: C 
 img_t table_ptr; /*struct containing img data, 10kB each*/
 int num_imgs;
 ...
 num_imgs = get_num_imgs();
 table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);
 ...

 This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a
 very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).

 Example 3

 This example applies an encoding procedure to an input string and stores it into a buffer.

 (bad code)
 Example Language: C 
 char * copy_input(char *user_supplied_string){
 int i, dst_index;
 char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);
 if ( MAX_SIZE <= strlen(user_supplied_string) ){
 die("user string too long, die evil hacker!");
 }
 dst_index = 0;
 for ( i = 0; i < strlen(user_supplied_string); i++ ){
 if( '&' == user_supplied_string[i] ){
 dst_buf[dst_index++] = '&';
 dst_buf[dst_index++] = 'a';
 dst_buf[dst_index++] = 'm';
 dst_buf[dst_index++] = 'p';
 dst_buf[dst_index++] = ';';
 }
 else if ('<' == user_supplied_string[i] ){

 /* encode to &lt; */
 }
 else dst_buf[dst_index++] = user_supplied_string[i];
 }
 return dst_buf;
 }

 The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the
 programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the
 string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.

 Example 4

 The following code is intended to read an incoming packet from a socket and extract one or more headers.

 (bad code)
 Example Language: C 
 DataPacket *packet;
 int numHeaders;
 PacketHeader *headers;

 sock=AcceptSocketConnection();
 ReadPacket(packet, sock);
 numHeaders =packet->headers;

 if (numHeaders > 100) {
 ExitError("too many headers!");
 }
 headers = malloc(numHeaders * sizeof(PacketHeader);
 ParsePacketHeaders(packet, headers);

 The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a
 value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted
 to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate
 negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.

 Example 5

 The following code attempts to save three different identification numbers into an array. The array is allocated from memory using a call to malloc().

 (bad code)
 Example Language: C 
 int *id_sequence;

 /* Allocate space for an array of three ids. */


 id_sequence = (int*) malloc(3);
 if (id_sequence == NULL) exit(1);

 /* Populate the id array. */


 id_sequence[0] = 13579;
 id_sequence[1] = 24680;
 id_sequence[2] = 97531;

 The problem with the code above is the value of the size parameter used during the malloc() call. It uses a value of '3' which by definition results in a buffer of three bytes to be created. However
 the intention was to create a buffer that holds three ints, and in C, each int requires 4 bytes worth of memory, so an array of 12 bytes is needed, 4 bytes for each int. Executing the above code
 could result in a buffer overflow as 12 bytes of data is being saved into 3 bytes worth of allocated space. The overflow would occur during the assignment of id_sequence[0] and would continue with
 the assignment of id_sequence[1] and id_sequence[2].

 The malloc() call could have used '3*sizeof(int)' as the value for the size parameter in order to allocate the correct amount of space required to store the three ints.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2020-17087          Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA
                         KEV.
 CVE-2004-1363           substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed
 CVE-2004-0747           substitution overflow: buffer overflow using expansion of environment variables
 CVE-2005-2103           substitution overflow: buffer overflow using a large number of substitution strings
 CVE-2005-3120           transformation overflow: product adds extra escape characters to incoming data, but does not account for them in the buffer length
 CVE-2003-0899           transformation overflow: buffer overflow when expanding ">" to "&gt;", etc.
 CVE-2001-0334           expansion overflow: buffer overflow using wildcards
 CVE-2001-0248           expansion overflow: long pathname + glob = overflow
 CVE-2001-0249           expansion overflow: long pathname + glob = overflow
 CVE-2002-0184           special characters in argument are not properly expanded
 CVE-2004-0434           small length value leads to heap overflow
 CVE-2002-1347           multiple variants
 CVE-2005-0490           needs closer investigation, but probably expansion-based
 CVE-2004-0940           needs closer investigation, but probably expansion-based
 CVE-2008-0599           Chain: Language interpreter calculates wrong buffer size (CWE-131) by using "size = ptr ? X : Y" instead of "size = (ptr ? X : Y)" expression.
 + Potential Mitigations
 Phase: Implementation

 When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts
 "&" characters to "&amp;" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.
 Phase: Implementation

 Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned
 distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying
 representation. [REF-7]

 Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.

 Phase: Implementation

 Strategy: Input Validation

 Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.
 Phase: Architecture and Design

 For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks
 by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
 Phase: Implementation

 When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).
 Phase: Implementation

 When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of
 memory that must be allocated.
 Phase: Implementation

 Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.

 Effectiveness: Moderate

 Note: This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only
 addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.
 Phase: Implementation

 Use sizeof() on the appropriate data type to avoid CWE-467.
 Phase: Implementation

 Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to
 quantity. This will simplify validation and will reduce surprises related to unexpected casting.
 Phase: Architecture and Design

 Strategy: Libraries or Frameworks

 Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size.

 Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]

 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat
 FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.

 D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.

 Effectiveness: Defense in Depth

 Note:

 This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to
 exit the application.

 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it
 can prevent an attacker from reliably jumping to exploitable code.

 Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default
 memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot
 be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.

 For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].

 Effectiveness: Defense in Depth

 Note: These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337
 ]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]
 Phase: Operation

 Strategy: Environment Hardening

 Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [
 REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.

 For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].

 Effectiveness: Defense in Depth

 Note: This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases
 in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
 Phase: Implementation

 Strategy: Compilation or Build Hardening

 Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if
 the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.
 Phases: Architecture and Design; Operation

 Strategy: Environment Hardening

 Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a
 single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as
 the database administrator, especially in day-to-day operations.
 Phases: Architecture and Design; Operation

 Strategy: Sandbox or Jail

 Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in
 a particular directory or which commands can be executed by the software.

 OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows
 the software to specify restrictions on file operations.

 This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.

 Be careful to avoid CWE-243 and other weaknesses related to jails.

 Effectiveness: Limited

 Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as
 restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
 + Detection Methods
 Automated Static Analysis

 This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.

 Automated static analysis generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine
 which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with
 setuid or other special privileges.

 Effectiveness: High

 Note: Detection techniques for buffer-related errors are more mature than for most other weakness types.
 Automated Dynamic Analysis

 This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness
 testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.

 Effectiveness: Moderate

 Note: Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying
 problem.
 Manual Analysis

 Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be
 considered for all inputs, since the attack surface can be too large.
 Manual Analysis

 This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record
 and modify an active session.

 Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that
 might have serious security impacts on the program.

 Effectiveness: High

 Note: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.
 Automated Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Bytecode Weakness Analysis - including disassembler + source code weakness analysis
   • Binary Weakness Analysis - including disassembler + source code weakness analysis

 Effectiveness: High

 Manual Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies

 Effectiveness: SOAR Partial

 Manual Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Focused Manual Spotcheck - Focused manual analysis of source
   • Manual Source Code Review (not inspections)

 Effectiveness: SOAR Partial

 Automated Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Source code Weakness Analyzer
   • Context-configured Source Code Weakness Analyzer

 Cost effective for partial coverage:

   • Source Code Quality Analyzer

 Effectiveness: High

 Architecture or Design Review

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Formal Methods / Correct-By-Construction

 Cost effective for partial coverage:

   • Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            742     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      9 - Memory
                                                                                                                                                                                                                      Management
                                                                                                                                                                                                                      (MEM)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            802     2010 Top 25 -
                                                                                                                                                                                                                      Risky Resource
                                                                                                                                                                                                                      Management
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            865     2011 Top 25 -
                                                                                                                                                                                                                      Risky Resource
                                                                                                                                                                                                                      Management
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            876     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      08 - Memory
                                                                                                                                                                                                                      Management
                                                                                                                                                                                                                      (MEM)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            974     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Incorrect
                                                                                                                                                                                                                      Buffer Length
                                                                                                                                                                                                                      Computation
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1158    SEI CERT C
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      04. Integers
                                                                                                                                                                                                                      (INT)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1162    SEI CERT C
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      08. Memory
                                                                                                                                                                                                                      Management
                                                                                                                                                                                                                      (MEM)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1399    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Memory Safety
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Notes
 
 Maintenance

 This is a broad category. Some examples include:

   • simple math errors,
   • incorrectly updating parallel counters,
   • not accounting for size differences when "transforming" one input to another format (e.g. URL canonicalization or other transformation that can generate a result that's larger than the original
     input, i.e. "expansion").

 This level of detail is rarely available in public reports, so it is difficult to find good examples.

 Maintenance

 This weakness may be a composite or a chain. It also may contain layering or perspective differences.

 This issue may be associated with many different types of incorrect calculations (CWE-682), although the integer overflow (CWE-190) is probably the most prevalent. This can be primary to resource
 consumption problems (CWE-400), including uncontrolled memory allocation (CWE-789). However, its relationship with out-of-bounds buffer access (CWE-119) must also be considered.

 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                     Fit                                                                 Mapped Node Name
 PLOVER                                                                               Other length calculation error
 CERT C Secure Coding             INT30-C        Imprecise                            Ensure that unsigned integer operations do not wrap
 CERT C Secure Coding             MEM35-C        CWE More Abstract                    Allocate sufficient memory for an object
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-100       Overflow Buffers
 CAPEC-47        Buffer Overflow via Parameter Expansion
 + References
 [REF-106] David LeBlanc and Niels Dekker. "SafeInt". <http://safeint.codeplex.com/>.
 [REF-107] Jason Lam. "Top 25 Series - Rank 18 - Incorrect Calculation of Buffer Size". SANS Software Security Institute. 2010-03-19. <http://software-security.sans.org/blog/2010/03/19/
 top-25-series-rank-18-incorrect-calculation-of-buffer-size>.
 [REF-58] Michael Howard. "Address Space Layout Randomization in Windows Vista". <https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista
 >. URL validated: 2023-04-07.
 [REF-61] Microsoft. "Understanding DEP as a mitigation technology part 1". <https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/>. URL validated:
 2023-04-07.
 [REF-60] "PaX". <https://en.wikipedia.org/wiki/Executable_space_protection#PaX>. URL validated: 2023-04-07.
 [REF-76] Sean Barnum and Michael Gegick. "Least Privilege". 2005-09-14. <https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege>.
 URL validated: 2023-04-07.
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 20, "Integer Overflows" Page 620. 2nd Edition. Microsoft Press. 2002-12-04. <https://www.microsoftpressstore.com/store/
 writing-secure-code-9780735617223>.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 5: Buffer Overruns." Page 89. McGraw-Hill. 2010.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 8, "Incrementing Pointers Incorrectly", Page 401. 1st Edition. Addison Wesley. 2006.
 [REF-64] Grant Murphy. "Position Independent Executables (PIE)". Red Hat. 2012-11-28. <https://www.redhat.com/en/blog/position-independent-executables-pie>. URL validated: 2023-04-07.
 [REF-1332] John Richard Moser. "Prelink and address space randomization". 2006-07-05. <https://lwn.net/Articles/190139/>. URL validated: 2023-04-26.
 [REF-1333] Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh. "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR". 2016. <http://www.cs.ucr.edu/~nael/pubs/micro16.pdf>. URL
 validated: 2023-04-26.
 [REF-1334] D3FEND. "Stack Frame Canary Validation (D3-SFCV)". 2023. <https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/>. URL validated: 2023-04-26.
 [REF-1335] D3FEND. "Segment Address Offset Randomization (D3-SAOR)". 2023. <https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/>. URL validated: 2023-04-26.
 [REF-1336] D3FEND. "Process Segment Execution Prevention (D3-PSEP)". 2023. <https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/>. URL validated: 2023-04-26.
 [REF-1337] Alexander Sotirov and Mark Dowd. "Bypassing Browser Memory Protections: Setting back browser security by 10 years". Memory information leaks. 2008. <https://www.blackhat.com/
 presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf>. URL validated: 2023-04-26.
 + Content History
                                                                                           + Submissions
       Submission Date                                                  Submitter                                                                         Organization
 2006-07-19                  PLOVER
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
      Modification Date                                                 Modifier                                                                          Organization
 2008-07-01                  Eric Dalci                                                                                      Cigital
                             updated Potential_Mitigations, Time_of_Introduction
 2008-09-08                  CWE Content Team                                                                                MITRE
                             updated Applicable_Platforms, Maintenance_Notes, Relationships, Taxonomy_Mappings, Type
 2008-10-14                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2008-11-24                  CWE Content Team                                                                                MITRE
                             updated Relationships, Taxonomy_Mappings
 2009-12-28                  CWE Content Team                                                                                MITRE
                             updated Demonstrative_Examples, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations
 2010-02-16                  CWE Content Team                                                                                MITRE
                             updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Maintenance_Notes, Potential_Mitigations, Related_Attack_Patterns, Relationships
 2010-04-05                  CWE Content Team                                                                                MITRE
                             updated Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns
 2010-06-21                  CWE Content Team                                                                                MITRE
                             updated Common_Consequences, Detection_Factors, Potential_Mitigations, References
 2010-09-27                  CWE Content Team                                                                                MITRE
                             updated Potential_Mitigations
 2010-12-13                  CWE Content Team                                                                                MITRE
                             updated Potential_Mitigations
 2011-03-29                  CWE Content Team                                                                                MITRE
                             updated Maintenance_Notes
 2011-06-01                  CWE Content Team                                                                                MITRE
                             updated Common_Consequences
 2011-06-27                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2011-09-13                  CWE Content Team                                                                                MITRE
                             updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
 2012-05-11                  CWE Content Team                                                                                MITRE
                             updated Demonstrative_Examples, Potential_Mitigations, References, Relationships
 2012-10-30                  CWE Content Team                                                                                MITRE
                             updated Potential_Mitigations
 2013-02-21                  CWE Content Team                                                                                MITRE
                             updated Demonstrative_Examples
 2013-07-17                  CWE Content Team                                                                                MITRE
                             updated References
 2014-02-18                  CWE Content Team                                                                                MITRE
                             updated Potential_Mitigations, References
 2014-07-30                  CWE Content Team                                                                                MITRE
                             updated Detection_Factors, Relationships
 2017-11-08                  CWE Content Team                                                                                MITRE
                             updated Likelihood_of_Exploit, References, Taxonomy_Mappings
 2018-03-27                  CWE Content Team                                                                                MITRE
                             updated References
 2019-01-03                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2019-06-20                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2020-02-24                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2020-08-20                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2020-12-10                  CWE Content Team                                                                                MITRE
                             updated Relationships
 2021-03-15                  CWE Content Team                                                                                MITRE
                             updated Demonstrative_Examples, Potential_Mitigations
 2022-06-28                  CWE Content Team                                                                                MITRE
                             updated Observed_Examples
 2022-10-13                  CWE Content Team                                                                                MITRE
                             updated References
 2023-01-31                  CWE Content Team                                                                                MITRE
                             updated Description
 2023-04-27                  CWE Content Team                                                                                MITRE
                             updated Potential_Mitigations, References, Relationships
 2023-06-29                  CWE Content Team                                                                                MITRE
                             updated Mapping_Notes
                                                                                       + Previous Entry Names
         Change Date                                                                                   Previous Entry Name
 2008-01-30                  Other Length Calculation Error
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

