CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-469: Use of Pointer Subtraction to Determine Size
 
 Weakness ID: 469
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID       Name
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          682     Incorrect
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Calculation
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 465     Pointer Issues
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Access Control     Technical Impact: Modify Memory; Read Memory; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity
 Integrity
 Confidentiality    There is the potential for arbitrary code execution with privileges of the vulnerable program.
 Availability
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 The following example contains the method size that is used to determine the number of nodes in a linked list. The method is passed a pointer to the head of the linked list.

 (bad code)
 Example Language: C 
 struct node {
 int data;
 struct node* next;
 };

 // Returns the number of nodes in a linked list from

 // the given pointer to the head of the list.
 int size(struct node* head) {
 struct node* current = head;
 struct node* tail;
 while (current != NULL) {
 tail = current;
 current = current->next;
 }
 return tail - head;
 }

 // other methods for manipulating the list
 ...

 However, the method creates a pointer that points to the end of the list and uses pointer subtraction to determine the number of nodes in the list by subtracting the tail pointer from the head
 pointer. There no guarantee that the pointers exist in the same memory area, therefore using pointer subtraction in this way could return incorrect results and allow other unintended behavior. In
 this example a counter should be used to determine the number of nodes in the list, as shown in the following code.

 (good code)
 Example Language: C 

 ...

 int size(struct node* head) {
 struct node* current = head;
 int count = 0;
 while (current != NULL) {
 count++;
 current = current->next;
 }
 return count;
 }
 + Potential Mitigations
 Phase: Implementation

 Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to
 "walk" from one pointer to the other and calculate the difference. Always validate this number.
 + Detection Methods
 Fuzzing

 Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with
 random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly
 indicate bugs, which helps developers to diagnose the issues.

 Effectiveness: High

 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            740     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      7 - Arrays
                                                                                                                                                                                                                      (ARR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            874     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      06 - Arrays and
                                                                                                                                                                                                                      the STL (ARR)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            971     SFP Secondary
                                                                                                                                                                                                                      Cluster: Faulty
                                                                                                                                                                                                                      Pointer Use
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1160    SEI CERT C
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      06. Arrays
                                                                                                                                                                                                                      (ARR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1408    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Incorrect
                                                                                                                                                                                                                      Calculation
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID        Fit                                                                Mapped Node Name
 CLASP                                                     Improper pointer subtraction
 CERT C Secure Coding             ARR36-C        Exact     Do not subtract or compare two pointers that do not refer to the same array
 Software Fault Patterns          SFP7                     Faulty Pointer Use
 + References
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 + Content History
                                                                                           + Submissions
             Submission Date                                                   Submitter                                                                   Organization
 2006-07-19                               CLASP
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
            Modification Date                                                   Modifier                                                                   Organization
 2008-07-01                               Eric Dalci                                                                           Cigital
                                          updated Time_of_Introduction
 2008-08-01                                                                                                                    KDM Analytics
                                          added/updated white box definitions
 2008-09-08                               CWE Content Team                                                                     MITRE
                                          updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings
 2008-11-24                               CWE Content Team                                                                     MITRE
                                          updated Relationships, Taxonomy_Mappings
 2011-06-01                               CWE Content Team                                                                     MITRE
                                          updated Common_Consequences
 2011-09-13                               CWE Content Team                                                                     MITRE
                                          updated Relationships, Taxonomy_Mappings
 2012-05-11                               CWE Content Team                                                                     MITRE
                                          updated Relationships
 2012-10-30                               CWE Content Team                                                                     MITRE
                                          updated Demonstrative_Examples, Potential_Mitigations
 2014-02-18                               CWE Content Team                                                                     MITRE
                                          updated Potential_Mitigations
 2014-06-23                               CWE Content Team                                                                     MITRE
                                          updated Other_Notes
 2014-07-30                               CWE Content Team                                                                     MITRE
                                          updated Relationships, Taxonomy_Mappings
 2017-11-08                               CWE Content Team                                                                     MITRE
                                          updated Demonstrative_Examples, Taxonomy_Mappings, White_Box_Definitions
 2019-01-03                               CWE Content Team                                                                     MITRE
                                          updated Relationships
 2020-02-24                               CWE Content Team                                                                     MITRE
                                          updated References, Relationships, Taxonomy_Mappings
 2020-06-25                               CWE Content Team                                                                     MITRE
                                          updated Common_Consequences
 2021-03-15                               CWE Content Team                                                                     MITRE
                                          updated Potential_Mitigations
 2022-10-13                               CWE Content Team                                                                     MITRE
                                          updated Relationships, Taxonomy_Mappings
 2023-01-31                               CWE Content Team                                                                     MITRE
                                          updated Description
 2023-04-27                               CWE Content Team                                                                     MITRE
                                          updated Detection_Factors, Relationships
 2023-06-29                               CWE Content Team                                                                     MITRE
                                          updated Mapping_Notes
                                                                                       + Previous Entry Names
               Change Date                                                                                   Previous Entry Name
 2008-04-11                               Improper Pointer Subtraction
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

