CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-939: Improper Authorization in Handler for Custom URL Scheme
 
 Weakness ID: 939
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.
 + Extended Description
 Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application
 communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files
 through a custom URL scheme.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID        Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        862     Missing
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Authorization
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1212    Authorization Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1011    Authorize Actors
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation REALIZATION: This weakness is caused during implementation of an architectural security tactic.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Technologies

 Class: Mobile (Undetermined Prevalence)

 + Demonstrative Examples
 
 Example 1

 This iOS application uses a custom URL scheme. The replaceFileText action in the URL scheme allows an external application to interface with the file incomingMessage.txt and replace the contents with
 the text field of the query string.

 External Application

 (good code)
 Example Language: Objective-C 
 NSString *stringURL = @"appscheme://replaceFileText?file=incomingMessage.txt&text=hello";
 NSURL *url = [NSURL URLWithString:stringURL];
 [[UIApplication sharedApplication] openURL:url];

 Application URL Handler

 (bad code)
  

 - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
 if (!url) {
 return NO;
 }
 NSString *action = [url host];
 if([action isEqualToString: @"replaceFileText"]) {
 NSDictionary *dict = [self parseQueryStringExampleFunction:[url query]];
 //this function will write contents to a specified file
 FileObject *objectFile = [self writeToFile:[dict objectForKey: @"file"] withText:[dict objectForKey: @"text"]];
 }
 return YES;
 }

 The handler has no restriction on who can use its functionality. The handler can be invoked using any method that invokes the URL handler such as the following malicious iframe embedded on a web page
 opened by Safari.

 (attack code)
 Example Language: HTML 
 <iframe src="appscheme://replaceFileText?file=Bookmarks.dat&text=listOfMaliciousWebsites">

 The attacker can host a malicious website containing the iframe and trick users into going to the site via a crafted phishing email. Since Safari automatically executes iframes, the user is not
 prompted when the handler executes the iframe code which automatically invokes the URL handler replacing the bookmarks file with a list of malicious websites. Since replaceFileText is a potentially
 dangerous action, an action that modifies data, there should be a sanity check before the writeToFile:withText: function.

 Example 2

 These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to
 communicate with the application:

 (bad code)
 Example Language: Java 
 // Android
 @Override
 public boolean shouldOverrideUrlLoading(WebView view, String url){
 if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){
 if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){
 writeDataToView(view, UserData);
 return false;
 }
 else{
 return true;
 }
 }
 }
 (bad code)
 Example Language: Objective-C 
 // iOS
 -(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType
 {
 NSURL *URL = [exRequest URL];
 if ([[URL scheme] isEqualToString:@"exampleScheme"])
 {
 NSString *functionString = [URL resourceSpecifier];
 if ([functionString hasPrefix:@"specialFunction"])
 {

 // Make data available back in webview.
 UIWebView *webView = [self writeDataToView:[URL query]];
 }
 return NO;
 }
 return YES;
 }

 A call into native code can then be initiated by passing parameters within the URL:

 (attack code)
 Example Language: JavaScript 
 window.location = examplescheme://method?parameter=value

 Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2013-5725           URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions.
 CVE-2013-5726           URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions.
 + Potential Mitigations
 Phase: Architecture and Design

 Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.

 When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is
 appropriate.

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1396    Comprehensive Categorization: Access Control
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + References
 [REF-938] Guillaume Ross. "Scheming for Privacy and Security". 2013-11-11. <https://brooksreview.net/2013/11/guest-post_scheming-for-privacy-and-security/>. URL validated: 2023-04-07.
 + Content History
                                                                                            + Submissions
                    Submission Date                                                       Submitter                                                             Organization
 2014-01-14                                            CWE Content Team                                                                 MITRE
 (CWE 2.6, 2014-02-19)

                                                                                           + Modifications
                   Modification Date                                                       Modifier                                                             Organization
 2017-01-19                                            CWE Content Team                                                                 MITRE
                                                       updated Relationships
 2017-11-08                                            CWE Content Team                                                                 MITRE
                                                       updated Modes_of_Introduction, References, Relationships
 2020-02-24                                            CWE Content Team                                                                 MITRE
                                                       updated Applicable_Platforms, Relationships
 2020-06-25                                            CWE Content Team                                                                 MITRE
                                                       updated Potential_Mitigations
 2021-03-15                                            CWE Content Team                                                                 MITRE
                                                       updated Demonstrative_Examples
 2023-01-31                                            CWE Content Team                                                                 MITRE
                                                       updated Description
 2023-04-27                                            CWE Content Team                                                                 MITRE
                                                       updated References, Relationships
 2023-06-29                                            CWE Content Team                                                                 MITRE
                                                       updated Mapping_Notes
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

