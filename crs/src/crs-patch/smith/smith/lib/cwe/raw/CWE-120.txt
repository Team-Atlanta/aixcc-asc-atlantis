CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')
 
 Weakness ID: 120
 Vulnerability Mapping: ALLOWEDThis CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review (with careful review of mapping notes)
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.
 + Extended Description
 A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The
 simplest type of error, and the most common cause of buffer overflows, is the "classic" case in which the product copies the buffer without restricting how much is copied. Other variants exist, but
 the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.
 + Alternate Terms
 Classic Buffer Overflow: This term was frequently used by vulnerability researchers during approximately 1995 to 2005 to differentiate buffer copies without length checks (which had been known
                          about for decades) from other emerging weaknesses that still involved invalid accesses of buffers, as vulnerability researchers began to develop advanced exploitation
                          techniques.
    Unbounded Transfer
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID          Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory Buffer
 ParentOf                                                                              VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        785     Use of Path
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Manipulation
                                                                                                                                                                                                                                                                                                                                                                             Function without
                                                                                                                                                                                                                                                                                                                                                                             Maximum-sized
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           170     Improper Null
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Termination
 CanFollow                                                                             VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        231     Improper
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Handling of
                                                                                                                                                                                                                                                                                                                                                                             Extra Values
 CanFollow                                                                             VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        416     Use After Free
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.
 CanFollow                                                                             VariantVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically                                                                        456     Missing
                                                                                                                               describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                       Initialization
                                                                                                                                                                                                                                                                                                                                                                             of a Variable
 CanPrecede                                                                                BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           123     Write-what-where
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Condition
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1218    Memory Buffer Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Data Protection Measures" (CWE-1340)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        119     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Restriction
                                                                                                                                                                                                                                                                                                                                                                             of
                                                                                                                                                                                                                                                                                                                                                                             Operations
                                                                                                                                                                                                                                                                                                                                                                             within the
                                                                                                                                                                                                                                                                                                                                                                             Bounds of a
                                                                                                                                                                                                                                                                                                                                                                             Memory
                                                                                                                                                                                                                                                                                                                                                                             Buffer
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Seven Pernicious Kingdoms" (CWE-700)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        20      Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Input
                                                                                                                                                                                                                                                                                                                                                                             Validation
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 Class: Assembly (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Modify Memory; Execute Unauthorized Code or Commands
 Confidentiality
 Availability       Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of the product's implicit security policy. This can often be
                    used to subvert any other security service.
                    Technical Impact: Modify Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU)
 Availability
                    Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the product into an infinite loop.
 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 The following code asks the user to enter their last name and then attempts to store the value entered in the last_name array.

 (bad code)
 Example Language: C 
 char last_name[20];
 printf ("Enter your last name: ");
 scanf ("%s", last_name);

 The problem with the code above is that it does not restrict or limit the size of the name entered by the user. If the user enters "Very_very_long_last_name" which is 24 characters long, then a
 buffer overflow will occur since the array can only hold 20 characters total.

 Example 2

 The following code attempts to create a local copy of a buffer to perform some manipulations to the data.

 (bad code)
 Example Language: C 
 void manipulate_string(char * string){
 char buf[24];
 strcpy(buf, string);
 ...
 }

 However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may
 result in a buffer overflow condition if an attacker can influence the contents of the string parameter.

 Example 3

 The code below calls the gets() function to read in data from the command line.

 (bad code)
 Example Language: C 
 char buf[24];
 printf("Please enter your name and press <Enter>\n");
 gets(buf);
 ...
 }

 However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size,
 resulting in an overflow condition.

 Example 4

 In the following example, a server accepts connections from a client and processes the client request. After accepting a client connection, the program will obtain client information using the
 gethostbyaddr method, copy the hostname of the client that connected to a local variable and output the hostname of the client to a log file.

 (bad code)
 Example Language: C 
 ...
 struct hostent *clienthp;
 char hostname[MAX_LEN];

 // create server socket, bind to server address and listen on socket
 ...

 // accept client connections and process requests
 int count = 0;
 for (count = 0; count < MAX_CONNECTIONS; count++) {

 int clientlen = sizeof(struct sockaddr_in);
 int clientsocket = accept(serversocket, (struct sockaddr *)&clientaddr, &clientlen);

 if (clientsocket >= 0) {
 clienthp = gethostbyaddr((char*) &clientaddr.sin_addr.s_addr, sizeof(clientaddr.sin_addr.s_addr), AF_INET);
 strcpy(hostname, clienthp->h_name);
 logOutput("Accepted client connection from host ", hostname);

 // process client request
 ...
 close(clientsocket);
 }
 }
 close(serversocket);

 ...

 However, the hostname of the client that connected may be longer than the allocated size for the local hostname variable. This will result in a buffer overflow when copying the client hostname to the
 local variable using the strcpy method.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2000-1094           buffer overflow using command with long argument
 CVE-1999-0046           buffer overflow in local program using long environment variable
 CVE-2002-1337           buffer overflow in comment characters, when product increments a counter for a ">" but does not decrement for "<"
 CVE-2003-0595           By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.
 CVE-2001-0191           By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.
 + Potential Mitigations
 Phase: Requirements

 Strategy: Language Selection

 Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow
 protection, but the protection can be disabled by the programmer.

 Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.

 Phase: Architecture and Design

 Strategy: Libraries or Frameworks

 Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.

 Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone
 string-handling functions.

 Note: This is not a complete solution, since many buffer overflows are not related to strings.
 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat
 FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.

 D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.

 Effectiveness: Defense in Depth

 Note:

 This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to
 exit the application.

 Phase: Implementation

 Consider adhering to the following rules when allocating and managing an application's memory:

   • Double check that your buffer is as large as you specify.
   • When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the
     string.
   • Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.
   • If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.

 Phase: Implementation

 Strategy: Input Validation

 Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not
 strictly conform to specifications, or transform it into something that does.

 When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency
 across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not
 valid if the input is only expected to contain colors such as "red" or "blue."

 Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers
 enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.

 Phase: Architecture and Design

 For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks
 by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
 Phases: Operation; Build and Compilation

 Strategy: Environment Hardening

 Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it
 can prevent an attacker from reliably jumping to exploitable code.

 Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default
 memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot
 be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.

 For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].

 Effectiveness: Defense in Depth

 Note: These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337
 ]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]
 Phase: Operation

 Strategy: Environment Hardening

 Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [
 REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.

 For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].

 Effectiveness: Defense in Depth

 Note: This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases
 in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
 Phases: Build and Compilation; Operation

 Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good
 practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.
 Phase: Implementation

 Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.

 Effectiveness: Moderate

 Note: This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).
 Phase: Architecture and Design

 Strategy: Enforcement by Conversion

 When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and
 reject all other inputs.
 Phases: Architecture and Design; Operation

 Strategy: Environment Hardening

 Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a
 single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as
 the database administrator, especially in day-to-day operations.
 Phases: Architecture and Design; Operation

 Strategy: Sandbox or Jail

 Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in
 a particular directory or which commands can be executed by the software.

 OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows
 the software to specify restrictions on file operations.

 This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.

 Be careful to avoid CWE-243 and other weaknesses related to jails.

 Effectiveness: Limited

 Note: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as
 restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Resultant  (where the weakness is typically related to the presence of some other weaknesses)
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis

 This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.

 Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which
 warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid
 or other special privileges.

 Effectiveness: High

 Note: Detection techniques for buffer-related errors are more mature than for most other weakness types.
 Automated Dynamic Analysis

 This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness
 testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
 Manual Analysis

 Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be
 considered for all inputs, since the attack surface can be too large.
 Automated Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Bytecode Weakness Analysis - including disassembler + source code weakness analysis
   • Binary Weakness Analysis - including disassembler + source code weakness analysis

 Effectiveness: High

 Manual Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies

 Effectiveness: SOAR Partial

 Dynamic Analysis with Automated Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Web Application Scanner
   • Web Services Scanner
   • Database Scanners

 Effectiveness: SOAR Partial

 Dynamic Analysis with Manual Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Fuzz Tester
   • Framework-based Fuzzer

 Effectiveness: SOAR Partial

 Manual Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Focused Manual Spotcheck - Focused manual analysis of source
   • Manual Source Code Review (not inspections)

 Effectiveness: SOAR Partial

 Automated Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Source code Weakness Analyzer
   • Context-configured Source Code Weakness Analyzer

 Effectiveness: High

 Architecture or Design Review

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Formal Methods / Correct-By-Construction

 Cost effective for partial coverage:

   • Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)

 Effectiveness: High

 + Functional Areas
 
   • Memory Management

 + Affected Resources
 
   • Memory

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            722     OWASP Top Ten
                                                                                                                                                                                                                      2004 Category
                                                                                                                                                                                                                      A1 -
                                                                                                                                                                                                                      Unvalidated
                                                                                                                                                                                                                      Input
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            726     OWASP Top Ten
                                                                                                                                                                                                                      2004 Category
                                                                                                                                                                                                                      A5 - Buffer
                                                                                                                                                                                                                      Overflows
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            741     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      8 - Characters
                                                                                                                                                                                                                      and Strings
                                                                                                                                                                                                                      (STR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            802     2010 Top 25 -
                                                                                                                                                                                                                      Risky Resource
                                                                                                                                                                                                                      Management
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            865     2011 Top 25 -
                                                                                                                                                                                                                      Risky Resource
                                                                                                                                                                                                                      Management
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            875     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      07 - Characters
                                                                                                                                                                                                                      and Strings
                                                                                                                                                                                                                      (STR)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            970     SFP Secondary
                                                                                                                                                                                                                      Cluster: Faulty
                                                                                                                                                                                                                      Buffer Access
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1129    CISQ Quality
                                                                                                                                                                                                                      Measures (2016)
                                                                                                                                                                                                                      - Reliability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1131    CISQ Quality
                                                                                                                                                                                                                      Measures (2016)
                                                                                                                                                                                                                      - Security
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1161    SEI CERT C
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      07. Characters
                                                                                                                                                                                                                      and Strings
                                                                                                                                                                                                                      (STR)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1399    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Memory Safety
 + Vulnerability Mapping Notes
 Usage: ALLOWED-WITH-REVIEW

 (this CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review)
 Reason: Frequent Misuse

 Rationale:

 There are some indications that this CWE ID might be misused and selected simply because it mentions "buffer overflow" - an increasingly vague term. This CWE entry is only appropriate for "Buffer
 Copy" operations (not buffer reads), in which where there is no "Checking [the] Size of Input", and (by implication of the copy) writing past the end of the buffer.
 Comments:

 If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such
 as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.
 + Notes
 
 Relationship

 At the code level, stack-based and heap-based overflows do not differ significantly, so there usually is not a need to distinguish them. From the attacker perspective, they can be quite different,
 since different techniques are required to exploit them.

 Terminology

 Many issues that are now called "buffer overflows" are substantively different than the "classic" overflow, including entirely different bug types that rely on overflow exploit techniques, such as
 integer signedness errors, integer overflows, and format string bugs. This imprecise terminology can make it difficult to determine which variant is being reported.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID              Fit                                                                 Mapped Node Name
 PLOVER                                                                 Unbounded Transfer ('classic overflow')
 7 Pernicious Kingdoms                                                  Buffer Overflow
 CLASP                                                                  Buffer overflow
 OWASP Top Ten 2004               A1             CWE More Specific      Unvalidated Input
 OWASP Top Ten 2004               A5             CWE More Specific      Buffer Overflows
 CERT C Secure Coding             STR31-C        Exact                  Guarantee that storage for strings has sufficient space for character data and the null terminator
 WASC                             7                                     Buffer Overflow
 Software Fault Patterns          SFP8                                  Faulty Buffer Access
 OMG ASCSM                        ASCSM-CWE-120
 OMG ASCRM                        ASCRM-CWE-120
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-10        Buffer Overflow via Environment Variables
 CAPEC-100       Overflow Buffers
 CAPEC-14        Client-side Injection-induced Buffer Overflow
 CAPEC-24        Filter Failure through Buffer Overflow
 CAPEC-42        MIME Conversion
 CAPEC-44        Overflow Binary Resource File
 CAPEC-45        Buffer Overflow via Symbolic Links
 CAPEC-46        Overflow Variables and Tags
 CAPEC-47        Buffer Overflow via Parameter Expansion
 CAPEC-67        String Format Overflow in syslog()
 CAPEC-8         Buffer Overflow in an API Call
 CAPEC-9         Buffer Overflow in Local Command-Line Utilities
 CAPEC-92        Forced Integer Overflow
 + References
 [REF-7] Michael Howard and David LeBlanc. "Writing Secure Code". Chapter 5, "Public Enemy #1: The Buffer Overrun" Page 127. 2nd Edition. Microsoft Press. 2002-12-04. <https://
 www.microsoftpressstore.com/store/writing-secure-code-9780735617223>.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 5: Buffer Overruns." Page 89. McGraw-Hill. 2010.
 [REF-56] Microsoft. "Using the Strsafe.h Functions". <https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN>. URL validated: 2023-04-07.
 [REF-57] Matt Messier and John Viega. "Safe C String Library v1.0.3". <http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html>. URL validated:
 2023-04-07.
 [REF-58] Michael Howard. "Address Space Layout Randomization in Windows Vista". <https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista
 >. URL validated: 2023-04-07.
 [REF-59] Arjan van de Ven. "Limiting buffer overflows with ExecShield". <https://archive.is/saAFo>. URL validated: 2023-04-07.
 [REF-60] "PaX". <https://en.wikipedia.org/wiki/Executable_space_protection#PaX>. URL validated: 2023-04-07.
 [REF-74] Jason Lam. "Top 25 Series - Rank 3 - Classic Buffer Overflow". SANS Software Security Institute. 2010-03-02. <http://software-security.sans.org/blog/2010/03/02/
 top-25-series-rank-3-classic-buffer-overflow/>.
 [REF-61] Microsoft. "Understanding DEP as a mitigation technology part 1". <https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/>. URL validated:
 2023-04-07.
 [REF-76] Sean Barnum and Michael Gegick. "Least Privilege". 2005-09-14. <https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege>.
 URL validated: 2023-04-07.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 3, "Nonexecutable Stack", Page 76. 1st Edition. Addison Wesley. 2006.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 5, "Protection Mechanisms", Page 189. 1st Edition. Addison Wesley. 2006.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 8, "C String Handling", Page 388. 1st Edition. Addison Wesley. 2006.
 [REF-64] Grant Murphy. "Position Independent Executables (PIE)". Red Hat. 2012-11-28. <https://www.redhat.com/en/blog/position-independent-executables-pie>. URL validated: 2023-04-07.
 [REF-961] Object Management Group (OMG). "Automated Source Code Reliability Measure (ASCRM)". ASCRM-CWE-120. 2016-01. <http://www.omg.org/spec/ASCRM/1.0/>.
 [REF-962] Object Management Group (OMG). "Automated Source Code Security Measure (ASCSM)". ASCSM-CWE-120. 2016-01. <http://www.omg.org/spec/ASCSM/1.0/>.
 [REF-1332] John Richard Moser. "Prelink and address space randomization". 2006-07-05. <https://lwn.net/Articles/190139/>. URL validated: 2023-04-26.
 [REF-1333] Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh. "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR". 2016. <http://www.cs.ucr.edu/~nael/pubs/micro16.pdf>. URL
 validated: 2023-04-26.
 [REF-1334] D3FEND. "Stack Frame Canary Validation (D3-SFCV)". 2023. <https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/>. URL validated: 2023-04-26.
 [REF-1335] D3FEND. "Segment Address Offset Randomization (D3-SAOR)". 2023. <https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/>. URL validated: 2023-04-26.
 [REF-1336] D3FEND. "Process Segment Execution Prevention (D3-PSEP)". 2023. <https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/>. URL validated: 2023-04-26.
 [REF-1337] Alexander Sotirov and Mark Dowd. "Bypassing Browser Memory Protections: Setting back browser security by 10 years". Memory information leaks. 2008. <https://www.blackhat.com/
 presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf>. URL validated: 2023-04-26.
 + Content History
                                                                                           + Submissions
      Submission Date                                               Submitter                                                                          Organization
 2006-07-19                PLOVER
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
     Modification Date                                              Modifier                                                                           Organization
 2008-07-01                Eric Dalci                                                                                  Cigital
                           updated Time_of_Introduction
 2008-08-01                                                                                                            KDM Analytics
                           added/updated white box definitions
 2008-08-15                                                                                                            Veracode
                           Suggested OWASP Top Ten 2004 mapping
 2008-09-08                CWE Content Team                                                                            MITRE
                           updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
 2008-10-10                CWE Content Team                                                                            MITRE
                           Changed name and description to more clearly emphasize the "classic" nature of the overflow.
 2008-10-14                CWE Content Team                                                                            MITRE
                           updated Alternate_Terms, Description, Name, Other_Notes, Terminology_Notes
 2008-11-24                CWE Content Team                                                                            MITRE
                           updated Other_Notes, Relationships, Taxonomy_Mappings
 2009-01-12                CWE Content Team                                                                            MITRE
                           updated Common_Consequences, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships
 2009-07-27                CWE Content Team                                                                            MITRE
                           updated Other_Notes, Potential_Mitigations, Relationships
 2009-10-29                CWE Content Team                                                                            MITRE
                           updated Common_Consequences, Relationships
 2010-02-16                CWE Content Team                                                                            MITRE
                           updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships,
                           Taxonomy_Mappings, Time_of_Introduction, Type
 2010-04-05                CWE Content Team                                                                            MITRE
                           updated Demonstrative_Examples, Related_Attack_Patterns
 2010-06-21                CWE Content Team                                                                            MITRE
                           updated Common_Consequences, Potential_Mitigations, References
 2010-09-27                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations
 2010-12-13                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations
 2011-03-29                CWE Content Team                                                                            MITRE
                           updated Demonstrative_Examples, Description
 2011-06-01                CWE Content Team                                                                            MITRE
                           updated Common_Consequences
 2011-06-27                CWE Content Team                                                                            MITRE
                           updated Relationships
 2011-09-13                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings
 2012-05-11                CWE Content Team                                                                            MITRE
                           updated References, Relationships
 2012-10-30                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations
 2014-02-18                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations, References
 2014-07-30                CWE Content Team                                                                            MITRE
                           updated Detection_Factors, Relationships, Taxonomy_Mappings
 2017-11-08                CWE Content Team                                                                            MITRE
                           updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, References, Relationships, Taxonomy_Mappings, White_Box_Definitions
 2018-03-27                CWE Content Team                                                                            MITRE
                           updated References
 2019-01-03                CWE Content Team                                                                            MITRE
                           updated References, Relationships, Taxonomy_Mappings
 2019-06-20                CWE Content Team                                                                            MITRE
                           updated Relationships
 2020-02-24                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations, Relationships
 2020-06-25                CWE Content Team                                                                            MITRE
                           updated Common_Consequences, Potential_Mitigations
 2020-08-20                CWE Content Team                                                                            MITRE
                           updated Alternate_Terms, Relationships
 2020-12-10                CWE Content Team                                                                            MITRE
                           updated Demonstrative_Examples, Relationships
 2021-03-15                CWE Content Team                                                                            MITRE
                           updated Demonstrative_Examples
 2021-07-20                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations
 2022-10-13                CWE Content Team                                                                            MITRE
                           updated References
 2023-01-31                CWE Content Team                                                                            MITRE
                           updated Common_Consequences, Description
 2023-04-27                CWE Content Team                                                                            MITRE
                           updated Potential_Mitigations, References, Relationships
 2023-06-29                CWE Content Team                                                                            MITRE
                           updated Mapping_Notes
                                                                                       + Previous Entry Names
        Change Date                                                                                   Previous Entry Name
 2008-10-14                Unbounded Transfer ('Classic Buffer Overflow')
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

