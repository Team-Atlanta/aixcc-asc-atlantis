CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-256: Plaintext Storage of a Password
 
 Weakness ID: 256
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 Storing a password in plaintext may result in a system compromise.
 + Extended Description
 Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows
 anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared
 immediately after it is used.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID         Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        522     Insufficiently
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Protected
                                                                                                                                                                                                                                                                                                                                                                             Credentials
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 255     Credentials Management Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1013    Encrypt Data
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
          Phase                                                                                             Note
 Architecture and Design OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.
 Architecture and Design Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 Technologies

 Class: ICS/OT (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Access Control     Technical Impact: Gain Privileges or Assume Identity

 + Likelihood Of Exploit
 High
 + Demonstrative Examples
 
 Example 1

 The following code reads a password from a properties file and uses the password to connect to a database.

 (bad code)
 Example Language: Java 
 ...
 Properties prop = new Properties();
 prop.load(new FileInputStream("config.properties"));
 String password = prop.getProperty("password");
 DriverManager.getConnection(url, usr, password);
 ...

 This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the
 system.

 Example 2

 The following code reads a password from the registry and uses the password to create a new network credential.

 (bad code)
 Example Language: Java 
 ...
 String password = regKey.GetValue(passKey).toString();
 NetworkCredential netCred = new NetworkCredential(username,password,domain);
 ...

 This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they
 can use it to break into the system

 Example 3

 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.

 This Java example shows a properties file with a cleartext username / password pair.

 (bad code)
 Example Language: Java 

 # Java Web App ResourceBundle properties file
 ...
 webapp.ldap.username=secretUsername
 webapp.ldap.password=secretPassword
 ...

 The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the
 pair is stored in cleartext.

 (bad code)
 Example Language: ASP.NET 
 ...
 <connectionStrings>
 <add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" />
 </connectionStrings>
 ...

 Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible,
 encrypt this information.

 Example 4

 In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [
 REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since
 these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.

 At least one OT product stored a password in plaintext.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2022-30275          Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.
 + Potential Mitigations
 Phase: Architecture and Design

 Avoid storing passwords in easily accessible locations.
 Phase: Architecture and Design

 Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.
 A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the
 password because the encoding can be detected and decoded easily.

 Effectiveness: None

 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 254     7PK - Security Features
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 930     OWASP Top Ten 2013 Category A2 - Broken Authentication and Session
                                                                                                                                 Management
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 963     SFP Secondary Cluster: Exposed Data
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1028    OWASP Top Ten 2017 Category A2 - Broken Authentication
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1348    OWASP Top Ten 2021 Category A04:2021 - Insecure Design
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1396    Comprehensive Categorization: Access Control
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID               Fit                                                                 Mapped Node Name
 7 Pernicious Kingdoms                                                    Password Management
 Software Fault Patterns          SFP23                                   Exposed Data
 ISA/IEC 62443                    Part 4-2                                Req CR 1.5
 ISA/IEC 62443                    Part 3-3                                Req SR 1.5
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 [REF-207] John Viega and Gary McGraw. "Building Secure Software: How to Avoid Security Problems the Right Way". 1st Edition. Addison-Wesley. 2002.
 [REF-1283] Forescout Vedere Labs. "OT:ICEFALL: The legacy of "insecure by design" and its implications for certifications and risk management". 2022-06-20. <https://www.forescout.com/resources/
 ot-icefall-report/>.
 + Content History
                                                                                           + Submissions
            Submission Date                                                                         Submitter                                                                    Organization
 2006-07-19                             7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Contributions
           Contribution Date                                                                       Contributor                                                                   Organization
 2023-11-14                             participants in the CWE ICS/OT SIG 62443 Mapping Fall Workshop
 (CWE 4.14, 2024-02-29)                 Contributed or reviewed taxonomy mappings for ISA/IEC 62443
                                                                                          + Modifications
           Modification Date                                                                         Modifier                                                                    Organization
 2008-09-08                             CWE Content Team                                                                                                                   MITRE
                                        updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities
 2009-07-27                             CWE Content Team                                                                                                                   MITRE
                                        updated Demonstrative_Examples
 2011-06-01                             CWE Content Team                                                                                                                   MITRE
                                        updated Common_Consequences, Relationships, Taxonomy_Mappings
 2012-05-11                             CWE Content Team                                                                                                                   MITRE
                                        updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings
 2012-10-30                             CWE Content Team                                                                                                                   MITRE
                                        updated Demonstrative_Examples, Potential_Mitigations
 2014-06-23                             CWE Content Team                                                                                                                   MITRE
                                        updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations, Relationships
 2014-07-30                             CWE Content Team                                                                                                                   MITRE
                                        updated Relationships, Taxonomy_Mappings
 2017-11-08                             CWE Content Team                                                                                                                   MITRE
                                        updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships
 2018-03-27                             CWE Content Team                                                                                                                   MITRE
                                        updated Name, Relationships
 2019-06-20                             CWE Content Team                                                                                                                   MITRE
                                        updated Type
 2020-02-24                             CWE Content Team                                                                                                                   MITRE
                                        updated References, Relationships
 2021-03-15                             CWE Content Team                                                                                                                   MITRE
                                        updated Demonstrative_Examples
 2021-07-20                             CWE Content Team                                                                                                                   MITRE
                                        updated Description, Name, Relationships
 2021-10-28                             CWE Content Team                                                                                                                   MITRE
                                        updated Relationships
 2022-10-13                             CWE Content Team                                                                                                                   MITRE
                                        updated Demonstrative_Examples, Observed_Examples, References
 2023-01-31                             CWE Content Team                                                                                                                   MITRE
                                        updated Applicable_Platforms
 2023-04-27                             CWE Content Team                                                                                                                   MITRE
                                        updated Detection_Factors, Relationships
 2023-06-29                             CWE Content Team                                                                                                                   MITRE
                                        updated Mapping_Notes
 2024-02-29                             CWE Content Team                                                                                                                   MITRE
 (CWE 4.14, 2024-02-29)                 updated Taxonomy_Mappings
                                                                                       + Previous Entry Names
              Change Date                                                                                   Previous Entry Name
 2008-01-30                             Plaintext Storage
 2018-01-23                             Plaintext Storage of a Password
 2018-03-27                             Plaintext Storage of a Password
 2021-07-20                             Unprotected Storage of Credentials
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

