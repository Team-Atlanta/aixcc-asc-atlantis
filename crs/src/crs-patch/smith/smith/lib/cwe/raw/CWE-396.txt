CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-396: Declaration of Catch for Generic Exception
 
 Weakness ID: 396
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.
 + Extended Description
 Multiple catch blocks can get ugly and repetitive, but "condensing" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not
 be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows
 and begins to throw new types of exceptions. The new exception types will not receive any attention.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        221     Information
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Loss or
                                                                                                                                                                                                                                                                                                                                                                             Omission
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        755     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Handling of
                                                                                                                                                                                                                                                                                                                                                                             Exceptional
                                                                                                                                                                                                                                                                                                                                                                             Conditions
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        705     Incorrect
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Control
                                                                                                                                                                                                                                                                                                                                                                             Flow
                                                                                                                                                                                                                                                                                                                                                                             Scoping
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 389     Error Conditions, Return Values, Status Codes
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C++ (Undetermined Prevalence)

 Java (Undetermined Prevalence)

 C# (Undetermined Prevalence)

 Python (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Non-Repudiation    Technical Impact: Hide Activities; Alter Execution Logic
 Other
 + Demonstrative Examples
 
 Example 1

 The following code excerpt handles three types of exceptions in an identical fashion.

 (good code)
 Example Language: Java 
 try {
 doExchange();
 }
 catch (IOException e) {
 logger.error("doExchange failed", e);
 }
 catch (InvocationTargetException e) {

 logger.error("doExchange failed", e);
 }
 catch (SQLException e) {

 logger.error("doExchange failed", e);
 }

 At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:

 (bad code)
  
 try {
 doExchange();
 }
 catch (Exception e) {
 logger.error("doExchange failed", e);
 }

 However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the
 situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent.

 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 388     7PK - Errors
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 960     SFP Secondary Cluster: Ambiguous Exception Type
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1129    CISQ Quality Measures (2016) - Reliability
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1131    CISQ Quality Measures (2016) - Security
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1410    Comprehensive Categorization: Insufficient Control Flow Management
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID              Fit                                                                Mapped Node Name
 7 Pernicious Kingdoms                                                 Overly-Broad Catch Block
 Software Fault Patterns          SFP5                                 Ambiguous Exception Type
 OMG ASCSM                        ASCSM-CWE-396
 OMG ASCRM                        ASCRM-CWE-396
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 9: Catching Exceptions." Page 157. McGraw-Hill. 2010.
 [REF-961] Object Management Group (OMG). "Automated Source Code Reliability Measure (ASCRM)". ASCRM-CWE-396. 2016-01. <http://www.omg.org/spec/ASCRM/1.0/>.
 [REF-962] Object Management Group (OMG). "Automated Source Code Security Measure (ASCSM)". ASCSM-CWE-396. 2016-01. <http://www.omg.org/spec/ASCSM/1.0/>.
 + Content History
                                                                                           + Submissions
             Submission Date                                                          Submitter                                                                   Organization
 2006-07-19                               7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Contributions
            Contribution Date                                                        Contributor                                                                  Organization
 2023-03-06                               Drew Buttner                                                                                       MITRE
                                          Suggested additional Applicable_Platforms and modification to extended description.
                                                                                          + Modifications
            Modification Date                                                          Modifier                                                                   Organization
 2008-07-01                               Eric Dalci                                                                                         Cigital
                                          updated Time_of_Introduction
 2008-09-08                               CWE Content Team                                                                                   MITRE
                                          updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
 2008-09-24                               CWE Content Team                                                                                   MITRE
                                          Removed C from Applicable_Platforms
 2008-10-14                               CWE Content Team                                                                                   MITRE
                                          updated Applicable_Platforms
 2009-03-10                               CWE Content Team                                                                                   MITRE
                                          updated Relationships
 2009-05-27                               CWE Content Team                                                                                   MITRE
                                          updated Demonstrative_Examples
 2009-10-29                               CWE Content Team                                                                                   MITRE
                                          updated Description, Other_Notes
 2011-06-01                               CWE Content Team                                                                                   MITRE
                                          updated Common_Consequences
 2012-05-11                               CWE Content Team                                                                                   MITRE
                                          updated References, Relationships
 2014-07-30                               CWE Content Team                                                                                   MITRE
                                          updated Relationships, Taxonomy_Mappings
 2019-01-03                               CWE Content Team                                                                                   MITRE
                                          updated References, Relationships, Taxonomy_Mappings
 2020-02-24                               CWE Content Team                                                                                   MITRE
                                          updated References
 2023-04-27                               CWE Content Team                                                                                   MITRE
                                          updated Applicable_Platforms, Description, Detection_Factors, Relationships, Time_of_Introduction
 2023-06-29                               CWE Content Team                                                                                   MITRE
                                          updated Mapping_Notes
                                                                                       + Previous Entry Names
               Change Date                                                                                   Previous Entry Name
 2008-04-11                               Overly-Broad Catch Block
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

