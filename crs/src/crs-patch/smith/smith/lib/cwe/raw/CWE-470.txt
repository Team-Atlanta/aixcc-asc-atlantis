CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')
 
 Weakness ID: 470
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.
 + Extended Description
 If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs,
 then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave
 in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the
 product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.
 + Alternate Terms
 Reflection Injection
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID           Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        610     Externally
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Controlled
                                                                                                                                                                                                                                                                                                                                                                             Reference to a
                                                                                                                                                                                                                                                                                                                                                                             Resource in Another
                                                                                                                                                                                                                                                                                                                                                                             Sphere
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        913     Improper Control of
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Dynamically-Managed
                                                                                                                                                                                                                                                                                                                                                                             Code Resources
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 399     Resource Management Errors
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID           Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        913     Improper Control of
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Dynamically-Managed
                                                                                                                                                                                                                                                                                                                                                                             Code Resources
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Seven Pernicious Kingdoms" (CWE-700)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        20      Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Input
                                                                                                                                                                                                                                                                                                                                                                             Validation
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
          Phase                                                                                             Note
 Architecture and Design
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Java (Undetermined Prevalence)

 PHP (Undetermined Prevalence)

 Class: Interpreted (Sometimes Prevalent)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Execute Unauthorized Code or Commands; Alter Execution Logic
 Confidentiality
 Availability       The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong
 Other              place or the wrong time, possibly modifying critical system state.
                    Technical Impact: DoS: Crash, Exit, or Restart; Other
 Availability
 Other              The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the
                    product to exit or hang.
                    Technical Impact: Read Application Data
 Confidentiality
                    By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as
                    CWE-536.
 + Demonstrative Examples
 
 Example 1

 A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection:

 (good code)
 Example Language: Java 
 String ctl = request.getParameter("ctl");
 Worker ao = null;
 if (ctl.equals("Add")) {
 ao = new AddCommand();
 }
 else if (ctl.equals("Modify")) {
 ao = new ModifyCommand();
 }
 else {
 throw new UnknownActionError();
 }
 ao.doAction(request);

 A programmer might refactor this code to use reflection as follows:

 (bad code)
 Example Language: Java 
 String ctl = request.getParameter("ctl");
 Class cmdClass = Class.forName(ctl + "Command");
 Worker ao = (Worker) cmdClass.newInstance();
 ao.doAction(request);

 The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the if/else blocks have been entirely eliminated, and it is now possible to add new command types
 without modifying the command dispatcher. However, the refactoring allows an attacker to instantiate any object that implements the Worker interface. If the command dispatcher is still responsible
 for access control, then whenever programmers create a new class that implements the Worker interface, they must remember to modify the dispatcher's access control code. If they do not modify the
 access control code, then some Worker classes will not have any access control.

 One way to address this access control problem is to make the Worker object responsible for performing the access control check. An example of the re-refactored code follows:

 (bad code)
 Example Language: Java 
 String ctl = request.getParameter("ctl");
 Class cmdClass = Class.forName(ctl + "Command");
 Worker ao = (Worker) cmdClass.newInstance();
 ao.checkAccessControl(request);
 ao.doAction(request);

 Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes. This code also highlights another
 security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects
 that implement the Worker interface; the default constructor for any object in the system can be invoked. If the object does not implement the Worker interface, a ClassCastException will be thrown
 before the assignment to ao, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in
 simple products, in larger products where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2018-1000613        Cryptography API uses unsafe reflection when deserializing a private key
 CVE-2004-2331           Database system allows attackers to bypass sandbox restrictions by using the Reflection API.
 + Potential Mitigations
 Phase: Architecture and Design

 Refactor your code to avoid using reflection.
 Phase: Architecture and Design

 Do not use user-controlled inputs to select and load classes or code.
 Phase: Implementation

 Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            859     The CERT Oracle
                                                                                                                                                                                                                      Secure Coding
                                                                                                                                                                                                                      Standard for
                                                                                                                                                                                                                      Java (2011)
                                                                                                                                                                                                                      Chapter 16 -
                                                                                                                                                                                                                      Platform
                                                                                                                                                                                                                      Security (SEC)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            991     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Tainted Input
                                                                                                                                                                                                                      to Environment
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1347    OWASP Top Ten
                                                                                                                                                                                                                      2021 Category
                                                                                                                                                                                                                      A03:2021 -
                                                                                                                                                                                                                      Injection
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1368    ICS
                                                                                                                                                                                                                      Dependencies (&
                                                                                                                                                                                                                      Architecture):
                                                                                                                                                                                                                      External
                                                                                                                                                                                                                      Digital Systems
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1415    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Resource
                                                                                                                                                                                                                      Control
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID       Fit                                                                 Mapped Node Name
 7 Pernicious Kingdoms                                    Unsafe Reflection
 The CERT Oracle Secure Coding    SEC06-J                 Do not use reflection to increase accessibility of classes, methods, or fields
 Standard for Java (2011)
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-138       Reflection Injection
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 + Content History
                                                                                           + Submissions
          Submission Date                                                       Submitter                                                                      Organization
 2006-07-19                         7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
         Modification Date                                                       Modifier                                                                      Organization
 2008-07-01                         Eric Dalci                                                                                         Cigital
                                    updated Potential_Mitigations, Time_of_Introduction
 2008-08-01                                                                                                                            KDM Analytics
                                    added/updated white box definitions
 2008-09-08                         CWE Content Team                                                                                   MITRE
                                    updated Description, Relationships, Other_Notes, Taxonomy_Mappings
 2008-10-14                         CWE Content Team                                                                                   MITRE
                                    updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes
 2009-01-12                         CWE Content Team                                                                                   MITRE
                                    updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations
 2009-05-27                         CWE Content Team                                                                                   MITRE
                                    updated Demonstrative_Examples, Name
 2009-10-29                         CWE Content Team                                                                                   MITRE
                                    updated Alternate_Terms, Relationships
 2011-03-29                         CWE Content Team                                                                                   MITRE
                                    updated Demonstrative_Examples
 2011-06-01                         CWE Content Team                                                                                   MITRE
                                    updated Common_Consequences, Relationships, Taxonomy_Mappings
 2012-05-11                         CWE Content Team                                                                                   MITRE
                                    updated Relationships, Taxonomy_Mappings
 2013-02-21                         CWE Content Team                                                                                   MITRE
                                    updated Relationships
 2014-07-30                         CWE Content Team                                                                                   MITRE
                                    updated Relationships
 2017-11-08                         CWE Content Team                                                                                   MITRE
                                    updated White_Box_Definitions
 2019-01-03                         CWE Content Team                                                                                   MITRE
                                    updated Taxonomy_Mappings
 2019-06-20                         CWE Content Team                                                                                   MITRE
                                    updated Relationships
 2020-02-24                         CWE Content Team                                                                                   MITRE
                                    updated References, Relationships
 2020-06-25                         CWE Content Team                                                                                   MITRE
                                    updated Potential_Mitigations
 2021-10-28                         CWE Content Team                                                                                   MITRE
                                    updated Relationships
 2023-01-31                         CWE Content Team                                                                                   MITRE
                                    updated Common_Consequences, Demonstrative_Examples, Description, Related_Attack_Patterns, Relationships
 2023-04-27                         CWE Content Team                                                                                   MITRE
                                    updated Detection_Factors, Relationships
 2023-06-29                         CWE Content Team                                                                                   MITRE
                                    updated Mapping_Notes
 2023-10-26                         CWE Content Team                                                                                   MITRE
                                    updated Observed_Examples
                                                                                       + Previous Entry Names
            Change Date                                                                                   Previous Entry Name
 2008-04-11                         Unsafe Reflection
 2009-05-27                         Use of Externally-Controlled Input to Select Classes or Code (aka 'Unsafe Reflection')
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

