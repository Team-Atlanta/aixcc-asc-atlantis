CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-117: Improper Output Neutralization for Logs
 
 Weakness ID: 117
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product does not neutralize or incorrectly neutralizes output that is written to logs.
 + Extended Description
 
 This can allow an attacker to forge log entries or inject malicious content into logs.

 Log forging vulnerabilities occur when:

  1. Data enters an application from an untrusted source.
  2. The data is written to an application or system log file.

 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID         Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        116     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Encoding or
                                                                                                                                                                                                                                                                                                                                                                             Escaping of
                                                                                                                                                                                                                                                                                                                                                                             Output
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           93      Improper
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  Neutralization
                                                                                                                                                                                                                                                                                                                                                                             of CRLF
                                                                                                                                                                                                                                                                                                                                                                             Sequences
                                                                                                                                                                                                                                                                                                                                                                             ('CRLF
                                                                                                                                                                                                                                                                                                                                                                             Injection')
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1210    Audit / Logging Errors
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 137     Data Neutralization Issues
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Architectural Concepts" (CWE-1008)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1009    Audit
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Seven Pernicious Kingdoms" (CWE-700)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        20      Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Input
                                                                                                                                                                                                                                                                                                                                                                             Validation
 + Background Details
 Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of
 reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation REALIZATION: This weakness is caused during implementation of an architectural security tactic.
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Modify Application Data; Hide Activities; Execute Unauthorized Code or Commands

 Integrity          Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the
 Confidentiality    most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters.
 Availability       Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the
 Non-Repudiation    commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or
                    injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing
                    utility.
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened.

 (bad code)
 Example Language: Java 
 String val = request.getParameter("val");
 try {

 int value = Integer.parseInt(val);
 }
 catch (NumberFormatException) {
 log.info("Failed to parse val = " + val);
 }
 ...

 If a user submits the string "twenty-one" for val, the following entry is logged:

   • INFO: Failed to parse val=twenty-one

 However, if an attacker submits the string "twenty-one%0a%0aINFO:+User+logged+out%3dbadguy", the following entry is logged:

   • INFO: Failed to parse val=twenty-one
   • INFO: User logged out=badguy

 Clearly, attackers can use this same mechanism to insert arbitrary log entries.

 + Observed Examples
        Reference                                                                                        Description
 CVE-2006-4624           Chain: inject fake log entries with fake timestamps using CRLF injection
 + Potential Mitigations
 Phase: Implementation

 Strategy: Input Validation

 Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not
 strictly conform to specifications, or transform it into something that does.

 When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency
 across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not
 valid if the input is only expected to contain colors such as "red" or "blue."

 Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers
 enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.

 Phase: Implementation

 Strategy: Output Encoding

 Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not
 specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the
 encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able
 to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream
 component.
 Phase: Implementation

 Strategy: Input Validation

 Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input
 twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            727     OWASP Top Ten
                                                                                                                                                                                                                      2004 Category
                                                                                                                                                                                                                      A6 - Injection
                                                                                                                                                                                                                      Flaws
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            963     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Exposed Data
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1134    SEI CERT Oracle
                                                                                                                                                                                                                      Secure Coding
                                                                                                                                                                                                                      Standard for
                                                                                                                                                                                                                      Java -
                                                                                                                                                                                                                      Guidelines 00.
                                                                                                                                                                                                                      Input
                                                                                                                                                                                                                      Validation and
                                                                                                                                                                                                                      Data
                                                                                                                                                                                                                      Sanitization
                                                                                                                                                                                                                      (IDS)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1355    OWASP Top Ten
                                                                                                                                                                                                                      2021 Category
                                                                                                                                                                                                                      A09:2021 -
                                                                                                                                                                                                                      Security
                                                                                                                                                                                                                      Logging and
                                                                                                                                                                                                                      Monitoring
                                                                                                                                                                                                                      Failures
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1407    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Improper
                                                                                                                                                                                                                      Neutralization
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                Fit                                                                Mapped Node Name
 7 Pernicious Kingdoms                                                     Log Forging
 Software Fault Patterns          SFP23                                    Exposed Data
 The CERT Oracle Secure Coding    IDS03-J        Exact                     Do not log unsanitized user input
 Standard for Java (2011)
 SEI CERT Oracle Coding Standard  IDS03-J        Exact                     Do not log unsanitized user input
 for Java
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-268       Audit Log Manipulation
 CAPEC-81        Web Server Logs Tampering
 CAPEC-93        Log Injection-Tampering-Forging
 + References
 [REF-6] Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and
 Metrics. NIST. 2005-11-07. <https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf>.
 [REF-52] Greg Hoglund and Gary McGraw. "Exploiting Software: How to Break Code". Addison-Wesley. 2004-02-27. <http://www.exploitingsoftware.com/>.
 [REF-53] Alec Muffet. "The night the log was forged". <http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm>.
 [REF-43] OWASP. "OWASP TOP 10". 2007-05-18. <https://github.com/owasp-top/owasp-top-2007>.
 + Content History
                                                                                           + Submissions
              Submission Date                                                         Submitter                                                                  Organization
 2006-07-19                                7 Pernicious Kingdoms
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
             Modification Date                                                         Modifier                                                                  Organization
 2008-07-01                                Eric Dalci                                                                                       Cigital
                                           updated References, Potential_Mitigations, Time_of_Introduction
 2008-09-08                                CWE Content Team                                                                                 MITRE
                                           updated Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities
 2008-11-24                                CWE Content Team                                                                                 MITRE
                                           updated Background_Details, Common_Consequences, Description, Other_Notes, References
 2009-03-10                                CWE Content Team                                                                                 MITRE
                                           updated Relationships
 2009-05-27                                CWE Content Team                                                                                 MITRE
                                           updated Demonstrative_Examples, Description, Name, Related_Attack_Patterns
 2009-07-27                                CWE Content Team                                                                                 MITRE
                                           updated Potential_Mitigations
 2009-10-29                                CWE Content Team                                                                                 MITRE
                                           updated Common_Consequences, Other_Notes, Relationships
 2010-06-21                                CWE Content Team                                                                                 MITRE
                                           updated Description, Name
 2010-12-13                                CWE Content Team                                                                                 MITRE
                                           updated Demonstrative_Examples
 2011-03-29                                CWE Content Team                                                                                 MITRE
                                           updated Description, Potential_Mitigations
 2011-06-01                                CWE Content Team                                                                                 MITRE
                                           updated Common_Consequences
 2012-05-11                                CWE Content Team                                                                                 MITRE
                                           updated Common_Consequences, Relationships
 2012-10-30                                CWE Content Team                                                                                 MITRE
                                           updated Potential_Mitigations
 2014-07-30                                CWE Content Team                                                                                 MITRE
                                           updated Relationships, Taxonomy_Mappings
 2017-05-03                                CWE Content Team                                                                                 MITRE
                                           updated Related_Attack_Patterns
 2017-11-08                                CWE Content Team                                                                                 MITRE
                                           updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, References, Relationships
 2019-01-03                                CWE Content Team                                                                                 MITRE
                                           updated Relationships, Taxonomy_Mappings
 2019-06-20                                CWE Content Team                                                                                 MITRE
                                           updated Related_Attack_Patterns
 2020-02-24                                CWE Content Team                                                                                 MITRE
                                           updated Potential_Mitigations, References, Relationships
 2020-06-25                                CWE Content Team                                                                                 MITRE
                                           updated Potential_Mitigations
 2021-10-28                                CWE Content Team                                                                                 MITRE
                                           updated Relationships
 2023-01-31                                CWE Content Team                                                                                 MITRE
                                           updated Description
 2023-04-27                                CWE Content Team                                                                                 MITRE
                                           updated Detection_Factors, References, Relationships
 2023-06-29                                CWE Content Team                                                                                 MITRE
                                           updated Mapping_Notes
                                                                                       + Previous Entry Names
                Change Date                                                                                   Previous Entry Name
 2008-04-11                                Log Forging
 2009-05-27                                Incorrect Output Sanitization for Logs
 2010-06-21                                Improper Output Sanitization for Logs
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

