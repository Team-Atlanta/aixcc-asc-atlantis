CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-561: Dead Code
 
 Weakness ID: 561
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product contains dead code, which can never be executed.
 + Extended Description
 Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID       Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        1164    Irrelevant
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Code
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           570     Expression
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  is Always
                                                                                                                                                                                                                                                                                                                                                                             False
 CanFollow                                                                                 BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses                                                                           571     Expression
                                                                                                                          typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.                                                                                                                  is Always
                                                                                                                                                                                                                                                                                                                                                                             True
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1006    Bad Coding Practices
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 Class: Not Language-Specific (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Quality Degradation
 Other
                    Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor
                    quality.
 Other              Technical Impact: Reduce Maintainability

 + Demonstrative Examples
 
 Example 1

 The condition for the second if statement is impossible to satisfy. It requires that the variables be non-null. However, on the only path where s can be assigned a non-null value, there is a return
 statement.

 (bad code)
 Example Language: C++ 
 String s = null;
 if (b) {
 s = "Yes";
 return;
 }

 if (s != null) {
 Dead();
 }

 Example 2

 In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code.

 (bad code)
 Example Language: Java 
 public class DoubleDead {
 private void doTweedledee() {
 doTweedledumb();
 }
 private void doTweedledumb() {
 doTweedledee();
 }
 public static void main(String[] args) {
 System.out.println("running DoubleDead");
 }
 }

 (In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.)

 Example 3

 The field named glue is not used in the following class. The author of the class has accidentally put quotes around the field name, transforming it into a string constant.

 (bad code)
 Example Language: Java 
 public class Dead {
 String glue;

 public String getGlue() {
 return "glue";
 }
 }
 + Observed Examples
        Reference                                                                                        Description
 CVE-2014-1266           chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect
                         Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by
                         Non-Endpoint).
 + Potential Mitigations
 Phase: Implementation

 Remove dead code before deploying the application.
 Phase: Testing

 Use a static analysis tool to spot dead code.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Indirect   (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)
 + Detection Methods
 Architecture or Design Review

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)
   • Formal Methods / Correct-By-Construction

 Cost effective for partial coverage:

   • Attack Modeling

 Effectiveness: High

 Automated Static Analysis - Binary or Bytecode

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Binary / Bytecode Quality Analysis
   • Compare binary / bytecode to application permission manifest

 Effectiveness: High

 Dynamic Analysis with Manual Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Automated Monitored Execution

 Effectiveness: SOAR Partial

 Automated Static Analysis

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Permission Manifest Analysis

 Effectiveness: SOAR Partial

 Automated Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Source Code Quality Analyzer

 Cost effective for partial coverage:

   • Warning Flags
   • Source code Weakness Analyzer
   • Context-configured Source Code Weakness Analyzer

 Effectiveness: High

 Dynamic Analysis with Automated Results Interpretation

 According to SOAR, the following detection techniques may be useful:

 Cost effective for partial coverage:

   • Web Application Scanner
   • Web Services Scanner
   • Database Scanners

 Effectiveness: SOAR Partial

 Manual Static Analysis - Source Code

 According to SOAR, the following detection techniques may be useful:

 Highly cost effective:

   • Manual Source Code Review (not inspections)

 Cost effective for partial coverage:

   • Focused Manual Spotcheck - Focused manual analysis of source

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            747     CERT C Secure
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      (2008) Chapter
                                                                                                                                                                                                                      14 -
                                                                                                                                                                                                                      Miscellaneous
                                                                                                                                                                                                                      (MSC)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            883     CERT C++ Secure
                                                                                                                                                                                                                      Coding Section
                                                                                                                                                                                                                      49 -
                                                                                                                                                                                                                      Miscellaneous
                                                                                                                                                                                                                      (MSC)
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            886     SFP Primary
                                                                                                                                                                                                                      Cluster: Unused
                                                                                                                                                                                                                      entities
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1130    CISQ Quality
                                                                                                                                                                                                                      Measures (2016)
                                                                                                                                                                                                                      -
                                                                                                                                                                                                                      Maintainability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1186    SEI CERT Perl
                                                                                                                                                                                                                      Coding Standard
                                                                                                                                                                                                                      - Guidelines
                                                                                                                                                                                                                      50.
                                                                                                                                                                                                                      Miscellaneous
                                                                                                                                                                                                                      (MSC)
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1307    CISQ Quality
                                                                                                                                                                                                                      Measures -
                                                                                                                                                                                                                      Maintainability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1412    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Poor Coding
                                                                                                                                                                                                                      Practices
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                Fit                                                                 Mapped Node Name
 CERT C Secure Coding             MSC07-C                                   Detect and remove dead code
 SEI CERT Perl Coding Standard    MSC00-PL       Exact                      Detect and remove dead code
 Software Fault Patterns          SFP2                                      Unused Entities
 OMG ASCMM                        ASCMM-MNT-20
 + References
 [REF-960] Object Management Group (OMG). "Automated Source Code Maintainability Measure (ASCMM)". ASCMM-MNT-20. 2016-01. <https://www.omg.org/spec/ASCMM/>. URL validated: 2023-04-07.
 + Content History
                                                                                            + Submissions
             Submission Date                                                                 Submitter                                                                   Organization
 2006-07-19                               Anonymous Tool Vendor (under NDA)
 (CWE Draft 3, 2006-07-19)

                                                                                           + Modifications
            Modification Date                                                                 Modifier                                                                   Organization
 2008-07-01                               Eric Dalci                                                                                                       Cigital
                                          updated Potential_Mitigations, Time_of_Introduction
 2008-09-08                               CWE Content Team                                                                                                 MITRE
                                          updated Description, Relationships, Other_Notes, Taxonomy_Mappings
 2008-11-24                               CWE Content Team                                                                                                 MITRE
                                          updated Relationships, Taxonomy_Mappings
 2009-05-27                               CWE Content Team                                                                                                 MITRE
                                          updated Demonstrative_Examples
 2009-07-27                               CWE Content Team                                                                                                 MITRE
                                          updated Demonstrative_Examples
 2009-10-29                               CWE Content Team                                                                                                 MITRE
                                          updated Common_Consequences, Other_Notes
 2011-06-01                               CWE Content Team                                                                                                 MITRE
                                          updated Common_Consequences
 2011-09-13                               CWE Content Team                                                                                                 MITRE
                                          updated Relationships, Taxonomy_Mappings
 2012-05-11                               CWE Content Team                                                                                                 MITRE
                                          updated Common_Consequences, Relationships
 2012-10-30                               CWE Content Team                                                                                                 MITRE
                                          updated Potential_Mitigations
 2014-06-23                               CWE Content Team                                                                                                 MITRE
                                          updated Observed_Examples
 2014-07-30                               CWE Content Team                                                                                                 MITRE
                                          updated Detection_Factors, Taxonomy_Mappings
 2017-11-08                               CWE Content Team                                                                                                 MITRE
                                          updated Relationships, Taxonomy_Mappings
 2019-01-03                               CWE Content Team                                                                                                 MITRE
                                          updated Common_Consequences, References, Relationships, Taxonomy_Mappings, Weakness_Ordinalities
 2019-06-20                               CWE Content Team                                                                                                 MITRE
                                          updated Type
 2020-02-24                               CWE Content Team                                                                                                 MITRE
                                          updated Applicable_Platforms, Observed_Examples, Relationships
 2020-08-20                               CWE Content Team                                                                                                 MITRE
                                          updated Relationships
 2021-03-15                               CWE Content Team                                                                                                 MITRE
                                          updated Relationships
 2021-07-20                               CWE Content Team                                                                                                 MITRE
                                          updated Observed_Examples
 2023-01-31                               CWE Content Team                                                                                                 MITRE
                                          updated Description
 2023-04-27                               CWE Content Team                                                                                                 MITRE
                                          updated References, Relationships
 2023-06-29                               CWE Content Team                                                                                                 MITRE
                                          updated Mapping_Notes
 2024-02-29                               CWE Content Team                                                                                                 MITRE
 (CWE 4.14, 2024-02-29)                   updated Demonstrative_Examples
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

