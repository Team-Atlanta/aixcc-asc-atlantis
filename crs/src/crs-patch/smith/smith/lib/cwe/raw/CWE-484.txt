CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-484: Omitted Break Statement in Switch
 
 Weakness ID: 484
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to
 execute code associated with one condition.
 + Extended Description
 This can lead to critical code executing in situations where it should not.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                               Type                                                                                                                                                                            ID          Name
 ChildOf                                                                                 ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                         670     Always-Incorrect
                                                                                                                      Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                              Control Flow
                                                                                                                                                                                                                                                                                                                                                                                Implementation
 ChildOf                                                                                 PillarPillar - a weakness that is the most abstract type of weakness and represents a theme for all class/base/variant weaknesses related to it. A Pillar is different from a Category as a Pillar is                                                                          710     Improper
                                                                                                                    still technically a type of weakness that describes a mistake, while a Category represents a common characteristic used to group related things.                                                                                                            Adherence to
                                                                                                                                                                                                                                                                                                                                                                                Coding Standards
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 438     Behavioral Problems
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 Java (Undetermined Prevalence)

 C# (Undetermined Prevalence)

 PHP (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
                    Technical Impact: Alter Execution Logic
 Other
                    This weakness can cause unintended logic to be executed and other unexpected application behavior.
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 In both of these examples, a message is printed based on the month passed into the function:

 (bad code)
 Example Language: Java 
 public void printMessage(int month){
 switch (month) {

 case 1: print("January");
 case 2: print("February");
 case 3: print("March");
 case 4: print("April");
 case 5: print("May");
 case 6: print("June");
 case 7: print("July");
 case 8: print("August");
 case 9: print("September");
 case 10: print("October");
 case 11: print("November");
 case 12: print("December");
 }
 println(" is a great month");
 }
 (bad code)
 Example Language: C 
 void printMessage(int month){
 switch (month) {

 case 1: printf("January");
 case 2: printf("February");
 case 3: printf("March");
 case 4: printf("April");
 case 5: printff("May");
 case 6: printf("June");
 case 7: printf("July");
 case 8: printf("August");
 case 9: printf("September");
 case 10: printf("October");
 case 11: printf("November");
 case 12: printf("December");
 }
 printf(" is a great month");
 }

 Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling "printMessage(10)" will result in the text "OctoberNovemberDecember
 is a great month" being printed.

 + Potential Mitigations
 Phase: Implementation

 Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you
 have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.
 Phase: Implementation

 The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.
 + Weakness Ordinalities
 Ordinality                                                                                       Description
 Primary    (where the weakness exists independent of other weaknesses)
 Indirect   (where the weakness is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect)
 + Detection Methods
 White Box

 Omission of a break statement might be intentional, in order to support fallthrough. Automated detection methods might therefore be erroneous. Semantic understanding of expected product behavior
 is required to interpret whether the code is correct.
 Black Box

 Since this weakness is associated with a code construct, it would be indistinguishable from other errors that produce the same behavior.
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                                                                  Type                                                                                               ID         Name
 MemberOf        ViewView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries). 884     CWE
                                                                                                                                                                                                                      Cross-section
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            962     SFP Secondary
                                                                                                                                                                                                                      Cluster:
                                                                                                                                                                                                                      Unchecked
                                                                                                                                                                                                                      Status
                                                                                                                                                                                                                      Condition
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1306    CISQ Quality
                                                                                                                                                                                                                      Measures -
                                                                                                                                                                                                                      Reliability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1307    CISQ Quality
                                                                                                                                                                                                                      Measures -
                                                                                                                                                                                                                      Maintainability
 MemberOf                                                  CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic.                                            1412    Comprehensive
                                                                                                                                                                                                                      Categorization:
                                                                                                                                                                                                                      Poor Coding
                                                                                                                                                                                                                      Practices
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID            Fit                                                                 Mapped Node Name
 CLASP                                                              Omitted break statement
 Software Fault Patterns          SFP4                              Unchecked Status Condition
 + References
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 7, "Switch Statements", Page 337. 1st Edition. Addison Wesley. 2006.
 + Content History
                                                                                           + Submissions
       Submission Date                                                  Submitter                                                                         Organization
 2006-07-19                   CLASP
 (CWE Draft 3, 2006-07-19)

                                                                                          + Modifications
      Modification Date                                                  Modifier                                                                         Organization
 2008-07-01                   Eric Dalci                                                                                     Cigital
                              updated Time_of_Introduction
 2008-09-08                   CWE Content Team                                                                               MITRE
                              updated Applicable_Platforms, Description, Detection_Factors, Relationships, Other_Notes, Taxonomy_Mappings
 2008-11-24                   CWE Content Team                                                                               MITRE
                              updated Applicable_Platforms, Demonstrative_Examples, Description, Detection_Factors, Name, Other_Notes, Potential_Mitigations, Weakness_Ordinalities
 2011-06-01                   CWE Content Team                                                                               MITRE
                              updated Common_Consequences, Relationships, Taxonomy_Mappings
 2012-05-11                   CWE Content Team                                                                               MITRE
                              updated Common_Consequences, References, Relationships, Taxonomy_Mappings
 2012-10-30                   CWE Content Team                                                                               MITRE
                              updated Demonstrative_Examples
 2014-07-30                   CWE Content Team                                                                               MITRE
                              updated Relationships, Taxonomy_Mappings
 2017-11-08                   CWE Content Team                                                                               MITRE
                              updated Demonstrative_Examples, Relationships
 2019-01-03                   CWE Content Team                                                                               MITRE
                              updated Weakness_Ordinalities
 2020-02-24                   CWE Content Team                                                                               MITRE
                              updated References, Relationships
 2020-08-20                   CWE Content Team                                                                               MITRE
                              updated Relationships
 2023-01-31                   CWE Content Team                                                                               MITRE
                              updated Description, Detection_Factors
 2023-04-27                   CWE Content Team                                                                               MITRE
                              updated Detection_Factors, Relationships
 2023-06-29                   CWE Content Team                                                                               MITRE
                              updated Mapping_Notes
 2023-10-26                   CWE Content Team                                                                               MITRE
                              updated Demonstrative_Examples
                                                                                       + Previous Entry Names
         Change Date                                                                                   Previous Entry Name
 2008-11-24                   Omitted Break Statement
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

