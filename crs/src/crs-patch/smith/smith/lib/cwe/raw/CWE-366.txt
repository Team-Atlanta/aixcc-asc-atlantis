CWE

Common Weakness Enumeration

A community-developed list of SW & HW weaknesses that can become vulnerabilities

New to CWE? click here!
CWE Most Important Hardware Weaknesses
CWE Top 25 Most Dangerous Weaknesses
Home > CWE List > CWE- Individual Dictionary Definition (4.14)                                                                                                   ID Lookup: [                    ] [Go]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  • Home
  • About ▼
    About New to CWE User Stories History Documents FAQs Glossary Compatibility
  • CWE List ▼
    Latest Version Downloads Reports Visualizations Archive
  • Mapping ▼
    Root Cause Mapping Guidance Root Cause Mapping Quick Tips Root Cause Mapping Examples
  • Top-N Lists ▼
    Top 25 Software Top Hardware Top 10 KEV Weaknesses
  • Community ▼
    Community Working Groups & Special Interest Groups Board Board Meeting Minutes CWE Discussion List CWE Discussion Archives Contribute Weakness Content to CWE
  • News ▼
    Current News X-Twitter ● Mastodon ● LinkedIn ● YouTube YouTube Podcast Out of Bounds Read Podcast Medium Medium News Archive
  • Search

 
 CWE Glossary Definition                  x
 
 
 CWE-366: Race Condition within a Thread
 
 Weakness ID: 366
 Vulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities
 Abstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level
 weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.
 View customized information:
 Conceptual For users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. Operational For users who are concerned with the
 practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. Mapping
 Friendly For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. 
 Complete For users who wish to see all available information for the CWE/CAPEC entry. Custom For users who want to customize what details are displayed.
 ×

 Edit Custom Filter

 Conceptual Operational Mapping Friendly Select All
 
 Reset Clear Submit Cancel
 + Description
 If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.
 + Relationships
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Research Concepts" (CWE-1000)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID         Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        362     Concurrent
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Execution using
                                                                                                                                                                                                                                                                                                                                                                             Shared Resource
                                                                                                                                                                                                                                                                                                                                                                             with Improper
                                                                                                                                                                                                                                                                                                                                                                             Synchronization
                                                                                                                                                                                                                                                                                                                                                                             ('Race
                                                                                                                                                                                                                                                                                                                                                                             Condition')
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "Software Development" (CWE-699)
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 557     Concurrency Issues
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID         Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        662     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Synchronization
 Section HelpThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar
 items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
 + Relevant to the view "CISQ Data Protection Measures" (CWE-1340)
     Nature                                                                                                                                                                             Type                                                                                                                                                                           ID         Name
 ChildOf                                                                               ClassClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base                                                                        662     Improper
                                                                                                                    Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.                                                                                                             Synchronization
 + Modes Of Introduction
 Section HelpThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur,
 while the Note provides a typical scenario related to introduction during the given phase.
     Phase                                                                                              Note
 Implementation
 + Applicable Platforms
 Section HelpThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a
 class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.

 Languages

 C (Undetermined Prevalence)

 C++ (Undetermined Prevalence)

 Java (Undetermined Prevalence)

 C# (Undetermined Prevalence)

 + Common Consequences
 Section HelpThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the
 negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen
 relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited
 to achieve a different impact.
       Scope                                                                                     Impact                                                                                 Likelihood
 Integrity          Technical Impact: Alter Execution Logic; Unexpected State
 Other
                    The main problem is that -- if a lock is overcome -- data could be altered in a bad state.
 + Likelihood Of Exploit
 Medium
 + Demonstrative Examples
 
 Example 1

 The following example demonstrates the weakness.

 (bad code)
 Example Language: C 
 int foo = 0;
 int storenum(int num) {
 static int counter = 0;
 counter++;
 if (num > foo) foo = num;
 return foo;
 }
 (bad code)
 Example Language: Java 
 public classRace {
 static int foo = 0;
 public static void main() {

 new Threader().start();
 foo = 1;
 }
 public static class Threader extends Thread {

 public void run() {
 System.out.println(foo);
 }
 }
 }
 + Observed Examples
        Reference                                                                                        Description
 CVE-2022-2621           Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).
 + Potential Mitigations
 Phase: Architecture and Design

 Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.
 Phase: Architecture and Design

 Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of
 execution.
 + Detection Methods
 Automated Static Analysis

 Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without
 having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with
 "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)

 Effectiveness: High

 + Affected Resources
 
   • System Process

 + Memberships
 Section HelpThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness
 fits within the context of external information sources.
     Nature                                                       Type                                                     ID                                   Name
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 748     CERT C Secure Coding Standard (2008) Appendix - POSIX (POS)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 852     The CERT Oracle Secure Coding Standard for Java (2011) Chapter 9 -
                                                                                                                                 Visibility and Atomicity (VNA)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 882     CERT C++ Secure Coding Section 14 - Concurrency (CON)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 986     SFP Secondary Cluster: Missing Lock
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1142    SEI CERT Oracle Secure Coding Standard for Java - Guidelines 08.
                                                                                                                                 Visibility and Atomicity (VNA)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1169    SEI CERT C Coding Standard - Guidelines 14. Concurrency (CON)
 MemberOf        CategoryCategory - a CWE entry that contains a set of other entries that share a common characteristic. 1401    Comprehensive Categorization: Concurrency
 + Vulnerability Mapping Notes
 Usage: ALLOWED

 (this CWE ID could be used to map to real-world vulnerabilities)
 Reason: Acceptable-Use

 Rationale:

 This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.
 Comments:

 Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred
 level of abstraction.
 + Taxonomy Mappings
       Mapped Taxonomy Name          Node ID                 Fit                                                                Mapped Node Name
 CLASP                                                                       Race condition within a thread
 CERT C Secure Coding             CON32-C        CWE More Abstract           Prevent data races when accessing bit-fields from multiple threads
 CERT C Secure Coding             CON40-C        CWE More Abstract           Do not refer to an atomic variable twice in an expression
 CERT C Secure Coding             CON43-C        Exact                       Do not allow data races in multithreaded code
 The CERT Oracle Secure Coding    VNA02-J                                    Ensure that compound operations on shared variables are atomic
 Standard for Java (2011)
 The CERT Oracle Secure Coding    VNA03-J                                    Do not assume that a group of calls to independently atomic methods is atomic
 Standard for Java (2011)
 Software Fault Patterns          SFP19                                      Missing Lock
 + Related Attack Patterns
    CAPEC-ID                                                                                     Attack Pattern Name
 CAPEC-26        Leveraging Race Conditions
 CAPEC-29        Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions
 + References
 [REF-18] Secure Software, Inc.. "The CLASP Application Security Process". 2005. <https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf>.
 [REF-44] Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". "Sin 13: Race Conditions." Page 205. McGraw-Hill. 2010.
 [REF-62] Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". Chapter 13, "Race Conditions", Page 759. 1st Edition. Addison Wesley. 2006.
 + Content History
                                                                                            + Submissions
                Submission Date                                                     Submitter                                                                 Organization
 2006-07-19                                    CLASP
 (CWE Draft 3, 2006-07-19)

                                                                                           + Modifications
               Modification Date                                                     Modifier                                                                 Organization
 2008-07-01                                    Eric Dalci                                                                           Cigital
                                               updated Time_of_Introduction
 2008-09-08                                    CWE Content Team                                                                     MITRE
                                               updated Applicable_Platforms, Common_Consequences, Relationships, Taxonomy_Mappings
 2008-11-24                                    CWE Content Team                                                                     MITRE
                                               updated Relationships, Taxonomy_Mappings
 2010-09-27                                    CWE Content Team                                                                     MITRE
                                               updated Potential_Mitigations, Relationships
 2011-06-01                                    CWE Content Team                                                                     MITRE
                                               updated Common_Consequences, Relationships, Taxonomy_Mappings
 2011-06-27                                    CWE Content Team                                                                     MITRE
                                               updated Common_Consequences
 2011-09-13                                    CWE Content Team                                                                     MITRE
                                               updated Relationships, Taxonomy_Mappings
 2012-05-11                                    CWE Content Team                                                                     MITRE
                                               updated References, Relationships
 2014-07-30                                    CWE Content Team                                                                     MITRE
                                               updated Relationships, Taxonomy_Mappings
 2017-11-08                                    CWE Content Team                                                                     MITRE
                                               updated Demonstrative_Examples, Relationships, Taxonomy_Mappings
 2019-01-03                                    CWE Content Team                                                                     MITRE
                                               updated Relationships, Taxonomy_Mappings
 2020-02-24                                    CWE Content Team                                                                     MITRE
                                               updated References, Relationships
 2020-08-20                                    CWE Content Team                                                                     MITRE
                                               updated Relationships
 2020-12-10                                    CWE Content Team                                                                     MITRE
                                               updated Relationships
 2021-03-15                                    CWE Content Team                                                                     MITRE
                                               updated Potential_Mitigations
 2022-04-28                                    CWE Content Team                                                                     MITRE
                                               updated Relationships
 2023-04-27                                    CWE Content Team                                                                     MITRE
                                               updated Detection_Factors, Relationships, Time_of_Introduction
 2023-06-29                                    CWE Content Team                                                                     MITRE
                                               updated Mapping_Notes
 2023-10-26                                    CWE Content Team                                                                     MITRE
                                               updated Observed_Examples
 More information is available — Please edit the custom filter or select a different filter.
Page Last Updated: February 29, 2024
 
      Site Map | Terms of Use | Manage Cookies | Cookie Notice | Privacy Policy | Contact Us | CWE X-Twitter CWE Mastodon CWE on LinkedIn CWE YouTube channel CWE Out-of-Bounds-Read Podcast CWE
      Blog on Medium blog

MITRE Use of the Common Weakness Enumeration (CWE™) and the associated references from this website are subject to the Terms of Use. CWE is sponsored by the U.S. Department of Homeland         HSSEDI
      Security (DHS) Cybersecurity and Infrastructure Security Agency (CISA) and managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI) which is operated by
      The MITRE Corporation (MITRE). Copyright © 2006–2024, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.

