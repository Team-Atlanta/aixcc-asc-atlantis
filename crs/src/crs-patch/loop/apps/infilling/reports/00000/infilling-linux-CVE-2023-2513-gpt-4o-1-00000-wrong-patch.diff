--- fs/ext4/xattr.c
+++ fs/ext4/xattr.c
@@ -2198,13 +2198,10 @@
 			  struct ext4_xattr_ibody_find *is)
 {
 	struct ext4_xattr_ibody_header *header;
-	struct ext4_inode *raw_inode;
-	int error;
-
-	if (EXT4_I(inode)->i_extra_isize == 0)
-		return 0;
-
-	raw_inode = ext4_raw_inode(&is->iloc);
+
+	header = IHDR(inode, raw_inode);
+	if (!EXT4_INODE_HAS_XATTR_SPACE(inode))
+		return -ENOSPC;
 	header = IHDR(inode, raw_inode);
 	is->s.base = is->s.first = IFIRST(header);
 	is->s.here = is->s.first;
@@ -2222,6 +2219,23 @@
 	}
 	return 0;
 }
+	header = IHDR(inode, raw_inode);
+	is->s.base = is->s.first = IFIRST(header);
+	is->s.here = is->s.first;
+	is->s.end = (void *)raw_inode + EXT4_SB(inode->i_sb)->s_inode_size;
+	if (ext4_test_inode_state(inode, EXT4_STATE_XATTR)) {
+		error = xattr_check_inode(inode, header, is->s.end);
+		if (error)
+			return error;
+		/* Find the named attribute. */
+		error = xattr_find_entry(inode, &is->s.here, is->s.end,
+					 i->name_index, i->name, 0);
+		if (error && error != -ENODATA)
+			return error;
+		is->s.not_found = error;
+	}
+	return 0;
+}
 
 int ext4_xattr_ibody_set(handle_t *handle, struct inode *inode,
 				struct ext4_xattr_info *i,
@@ -2231,7 +2245,7 @@
 	struct ext4_xattr_search *s = &is->s;
 	int error;
 
-	if (EXT4_I(inode)->i_extra_isize == 0)
+	if (!EXT4_INODE_HAS_XATTR_SPACE(inode))
 		return -ENOSPC;
 
 	error = ext4_xattr_set_entry(i, s, handle, inode, false /* is_block */);


--- fs/ext4/xattr.c
+++ fs/ext4/xattr.c
@@ -2201,7 +2201,7 @@
 	struct ext4_inode *raw_inode;
 	int error;
 
-	if (EXT4_I(inode)->i_extra_isize == 0)
+	if (!EXT4_INODE_HAS_XATTR_SPACE(inode))
 		return 0;
 
 	raw_inode = ext4_raw_inode(&is->iloc);
@@ -2228,13 +2228,19 @@
 				struct ext4_xattr_ibody_find *is)
 {
 	struct ext4_xattr_ibody_header *header;
-	struct ext4_xattr_search *s = &is->s;
-	int error;
-
-	if (EXT4_I(inode)->i_extra_isize == 0)
-		return -ENOSPC;
 
 	error = ext4_xattr_set_entry(i, s, handle, inode, false /* is_block */);
+	if (error)
+		return error;
+	header = IHDR(inode, ext4_raw_inode(&is->iloc));
+	if (!IS_LAST_ENTRY(s->first)) {
+		header->h_magic = cpu_to_le32(EXT4_XATTR_MAGIC);
+		ext4_set_inode_state(inode, EXT4_STATE_XATTR);
+	} else {
+		header->h_magic = cpu_to_le32(0);
+		ext4_clear_inode_state(inode, EXT4_STATE_XATTR);
+	}
+	return 0;
 	if (error)
 		return error;
 	header = IHDR(inode, ext4_raw_inode(&is->iloc));
