{
  "11265": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r37 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11265)",
    "preds": [
      "r82 \u003d $r37",
      "$r37 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.util.Base64JavaUtilCodec\")"
    ],
    "succs": [
      "if r82 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11268)",
      "r82 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.util.Base64JAXBCodec\")",
      "goto [?\u003d (branch)]"
    ]
  },
  "12290": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r1 !\u003d null goto $r18 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
    "preds": [
      "$r1 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
      "r0 :\u003d @this: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper"
    ],
    "succs": [
      "$r18 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e \u003d $r18",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e(null, $r18)",
      "$r18 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper$Null\")"
    ]
  },
  "11267": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r82 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11268)",
    "preds": [
      "r82 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.util.Base64JAXBCodec\")",
      "goto [?\u003d (branch)]",
      "if $r37 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11265)"
    ],
    "succs": [
      "if r81 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11273)",
      "goto [?\u003d (branch)]",
      "r81 \u003d (com.thoughtworks.xstream.core.StringCodec) $r35",
      "$r40 :\u003d @caughtexception",
      "$r35 \u003d virtualinvoke r82.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "$r41 :\u003d @caughtexception"
    ]
  },
  "12293": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r2 !\u003d null goto $r19 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Boolean\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e(null, $r18)",
      "$r2 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Boolean\u003e"
    ],
    "succs": [
      "$r19 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Boolean\u003e",
      "$r3 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
      "$r19 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Boolean\")",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Boolean\u003e \u003d $r19"
    ]
  },
  "11270": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r82 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11268)",
    "preds": [
      "r82 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.util.Base64JAXBCodec\")",
      "goto [?\u003d (branch)]",
      "if $r37 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11265)"
    ],
    "succs": [
      "if r81 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11273)",
      "goto [?\u003d (branch)]",
      "r81 \u003d (com.thoughtworks.xstream.core.StringCodec) $r35",
      "$r40 :\u003d @caughtexception",
      "$r35 \u003d virtualinvoke r82.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "$r41 :\u003d @caughtexception"
    ]
  },
  "11271": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r82 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11268)",
    "preds": [
      "r82 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.util.Base64JAXBCodec\")",
      "goto [?\u003d (branch)]",
      "if $r37 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11265)"
    ],
    "succs": [
      "if r81 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11273)",
      "goto [?\u003d (branch)]",
      "r81 \u003d (com.thoughtworks.xstream.core.StringCodec) $r35",
      "$r40 :\u003d @caughtexception",
      "$r35 \u003d virtualinvoke r82.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "$r41 :\u003d @caughtexception"
    ]
  },
  "12296": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r4 !\u003d null goto $r20 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Character\u003e",
    "preds": [
      "$r4 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Character\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r19, $r3)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Character\u003e \u003d $r20",
      "$r20 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Character\u003e",
      "$r20 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Character\")",
      "$r5 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e"
    ]
  },
  "10248": {
    "className": "com.thoughtworks.xstream.mapper.SecurityMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.SecurityMapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.security.TypePermission[])\u003e",
    "stmt": "if r2 !\u003d null goto $r4 \u003d new java.util.ArrayList",
    "preds": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper)\u003e(r1)",
      "r2 :\u003d @parameter1: com.thoughtworks.xstream.security.TypePermission[]"
    ],
    "succs": [
      "specialinvoke $r4.\u003cjava.util.ArrayList: void \u003cinit\u003e()\u003e()",
      "$r3 \u003d staticinvoke \u003cjava.util.Arrays: java.util.List asList(java.lang.Object[])\u003e(r2)",
      "$r4 \u003d new java.util.ArrayList"
    ]
  },
  "8": {
    "className": "PipelineCommandUtilPovRunner_Wrapper",
    "methodSignature": "\u003cPipelineCommandUtilPovRunner_Wrapper: void fuzzerTestOneInput(byte[])\u003e",
    "stmt": "if r0 !\u003d null goto $i0 \u003d lengthof r0",
    "preds": [
      "r0 :\u003d @parameter0: byte[]"
    ],
    "succs": [
      "$i0 \u003d lengthof r0",
      "if $i0 !\u003d 0 goto $r1 \u003d new java.lang.String",
      "return"
    ]
  },
  "9": {
    "className": "PipelineCommandUtilPovRunner_Wrapper",
    "methodSignature": "\u003cPipelineCommandUtilPovRunner_Wrapper: void fuzzerTestOneInput(byte[])\u003e",
    "stmt": "if $i0 !\u003d 0 goto $r1 \u003d new java.lang.String",
    "preds": [
      "$i0 \u003d lengthof r0",
      "if r0 !\u003d null goto $i0 \u003d lengthof r0"
    ],
    "succs": [
      "return",
      "$r1 \u003d new java.lang.String",
      "specialinvoke $r1.\u003cjava.lang.String: void \u003cinit\u003e(byte[])\u003e(r0)"
    ]
  },
  "11273": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r81 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11273)",
    "preds": [
      "if r82 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11268)",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d (branch)]",
      "r81 \u003d (com.thoughtworks.xstream.core.StringCodec) $r35",
      "$r40 :\u003d @caughtexception",
      "$r35 \u003d virtualinvoke r82.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "specialinvoke $r98.\u003ccom.thoughtworks.xstream.core.util.Base64Encoder: void \u003cinit\u003e()\u003e()",
      "$r99 \u003d (com.thoughtworks.xstream.core.StringCodec) r81",
      "goto [?\u003d $r99 \u003d (com.thoughtworks.xstream.core.StringCodec) r81]",
      "$r98 \u003d new com.thoughtworks.xstream.core.util.Base64Encoder"
    ]
  },
  "12299": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r6 !\u003d null goto $r21 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Integer\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r20, $r5)",
      "$r6 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Integer\u003e"
    ],
    "succs": [
      "$r21 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Integer\")",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Integer\u003e \u003d $r21",
      "$r7 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "$r21 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Integer\u003e"
    ]
  },
  "12302": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r8 !\u003d null goto $r22 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Float\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r21, $r7)",
      "$r8 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Float\u003e"
    ],
    "succs": [
      "$r22 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Float\u003e",
      "$r9 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e",
      "$r22 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Float\")",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Float\u003e \u003d $r22"
    ]
  },
  "14": {
    "className": "FileInputStream",
    "methodSignature": "\u003cFileInputStream: void \u003cinit\u003e(java.lang.String)\u003e",
    "stmt": "if r1 !\u003d \"nonexistent\" goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(16)",
    "preds": [
      "r1 :\u003d @parameter0: java.lang.String",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "specialinvoke $r2.\u003cjava.io.FileNotFoundException: void \u003cinit\u003e()\u003e()",
      "$r2 \u003d new java.io.FileNotFoundException",
      "return"
    ]
  },
  "12305": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r10 !\u003d null goto $r23 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Double\u003e",
    "preds": [
      "$r10 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Double\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r22, $r9)"
    ],
    "succs": [
      "$r23 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Double\")",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Double\u003e",
      "$r11 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Double\u003e \u003d $r23"
    ]
  },
  "12308": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r12 !\u003d null goto $r24 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Short\u003e",
    "preds": [
      "$r12 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Short\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r23, $r11)"
    ],
    "succs": [
      "$r24 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Short\")",
      "$r13 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
      "$r24 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Short\u003e",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Short\u003e \u003d $r24"
    ]
  },
  "12311": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r14 !\u003d null goto $r25 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Byte\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r24, $r13)",
      "$r14 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Byte\u003e"
    ],
    "succs": [
      "$r25 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Byte\")",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Byte\u003e \u003d $r25",
      "$r25 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Byte\u003e",
      "$r15 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e"
    ]
  },
  "4120": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void \u003cinit\u003e(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,com.thoughtworks.xstream.core.ClassLoaderReference,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)\u003e",
    "stmt": "if r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4121)",
    "preds": [
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()",
      "r0.\u003ccom.thoughtworks.xstream.XStream: int collectionUpdateLimit\u003e \u003d 20"
    ],
    "succs": [
      "goto [?\u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider\u003e \u003d r6]",
      "r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider\u003e \u003d r6",
      "r6 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider newReflectionProvider()\u003e()"
    ]
  },
  "25": {
    "className": "PipelineCommandUtilPovRunner",
    "methodSignature": "\u003cPipelineCommandUtilPovRunner: void fuzzerTestOneInput(byte[])\u003e",
    "stmt": "if null \u003d\u003d r0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(25)",
    "preds": [
      "r0 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getenv(java.lang.String)\u003e(\"POV_FILENAME\")",
      "r4 :\u003d @parameter0: byte[]"
    ],
    "succs": [
      "$r1 \u003d \u003cjava.lang.System: java.io.PrintStream err\u003e",
      "virtualinvoke $r1.\u003cjava.io.PrintStream: void println(java.lang.String)\u003e(\"environment variable `POV_FILENAME` not set\")",
      "$r2 \u003d new FileInputStream",
      "goto [?\u003d $r2 \u003d new FileInputStream]"
    ]
  },
  "12314": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaults()\u003e",
    "stmt": "if $r16 !\u003d null goto $r26 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Long\u003e",
    "preds": [
      "$r16 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Long\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r25, $r15)"
    ],
    "succs": [
      "$r26 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Long\u003e",
      "$r26 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Long\")",
      "$r17 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.lang.Class class$java$lang$Long\u003e \u003d $r26"
    ]
  },
  "4125": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void \u003cinit\u003e(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,com.thoughtworks.xstream.core.ClassLoaderReference,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)\u003e",
    "stmt": "if r5 !\u003d null goto $r7 \u003d r5",
    "preds": [
      "r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.ConverterRegistry converterRegistry\u003e \u003d r4",
      "r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.ConverterLookup converterLookup\u003e \u003d r3"
    ],
    "succs": [
      "goto [?\u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e \u003d $r7]",
      "$r7 \u003d r5",
      "r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e \u003d $r7",
      "$r7 \u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e()"
    ]
  },
  "12318": {
    "className": "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12318)",
    "preds": [
      "if r0 !\u003d null goto $z0 \u003d virtualinvoke r0.\u003cjava.lang.Class: boolean isInterface()\u003e()",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.Class: boolean isInterface()\u003e()"
    ],
    "succs": [
      "$r9 \u003d r7.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl\u003e",
      "$r1 \u003d new com.thoughtworks.xstream.InitializationException",
      "goto [?\u003d $r9 \u003d r7.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl\u003e]",
      "$r2 \u003d new java.lang.StringBuffer"
    ]
  },
  "4136": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4136)",
    "preds": [
      "$z0 \u003d virtualinvoke r1.\u003ccom.thoughtworks.xstream.XStream: boolean useXStream11XmlFriendlyMapper()\u003e()",
      "r36 \u003d $r0"
    ],
    "succs": [
      "goto [?\u003d $r4 \u003d new com.thoughtworks.xstream.mapper.DynamicProxyMapper]",
      "specialinvoke $r3.\u003ccom.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper)\u003e($r0)",
      "$r4 \u003d new com.thoughtworks.xstream.mapper.DynamicProxyMapper",
      "$r3 \u003d new com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper"
    ]
  },
  "14385": {
    "className": "com.thoughtworks.xstream.converters.collections.TreeSetConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.collections.TreeSetConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper)\u003e",
    "stmt": "if $r2 !\u003d null goto $r3 \u003d \u003ccom.thoughtworks.xstream.converters.collections.TreeSetConverter: java.lang.Class class$java$util$TreeSet\u003e",
    "preds": [
      "$r2 \u003d \u003ccom.thoughtworks.xstream.converters.collections.TreeSetConverter: java.lang.Class class$java$util$TreeSet\u003e",
      "r1 :\u003d @parameter0: com.thoughtworks.xstream.mapper.Mapper"
    ],
    "succs": [
      "$r3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.collections.TreeSetConverter: java.lang.Class class$(java.lang.String)\u003e(\"java.util.TreeSet\")",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,java.lang.Class)\u003e(r1, $r3)",
      "\u003ccom.thoughtworks.xstream.converters.collections.TreeSetConverter: java.lang.Class class$java$util$TreeSet\u003e \u003d $r3",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.converters.collections.TreeSetConverter: java.lang.Class class$java$util$TreeSet\u003e"
    ]
  },
  "4150": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4151)",
    "preds": [
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "r37 \u003d $r16"
    ],
    "succs": [
      "$r20 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r39 \u003d new com.thoughtworks.xstream.mapper.LocalConversionMapper",
      "$r19 \u003d newarray (java.lang.Class)[1]",
      "goto [?\u003d $r39 \u003d new com.thoughtworks.xstream.mapper.LocalConversionMapper]"
    ]
  },
  "23608": {
    "className": "org.apache.commons.beanutils.converters.ArrayConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.ArrayConverter: void \u003cinit\u003e(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e",
    "stmt": "if r2 !\u003d null goto $z0 \u003d virtualinvoke r2.\u003cjava.lang.Class: boolean isArray()\u003e()",
    "preds": [
      "r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: char[] allowedChars\u003e \u003d $r1",
      "r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: boolean onlyFirstToString\u003e \u003d 1"
    ],
    "succs": [
      "specialinvoke $r6.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"Default type is missing\")",
      "$z0 \u003d virtualinvoke r2.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "$r6 \u003d new java.lang.IllegalArgumentException",
      "if $z0 !\u003d 0 goto (branch)"
    ]
  },
  "4153": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r20 !\u003d null goto $r38 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r20 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r19 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "$r38 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r19[0] \u003d $r38",
      "$r38 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r38"
    ]
  },
  "23610": {
    "className": "org.apache.commons.beanutils.converters.ArrayConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.ArrayConverter: void \u003cinit\u003e(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e",
    "stmt": "if $z0 !\u003d 0 goto (branch)",
    "preds": [
      "$z0 \u003d virtualinvoke r2.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "if r2 !\u003d null goto $z0 \u003d virtualinvoke r2.\u003cjava.lang.Class: boolean isArray()\u003e()"
    ],
    "succs": [
      "$r5 \u003d new java.lang.IllegalArgumentException",
      "if r3 !\u003d null goto r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: java.lang.Class defaultType\u003e \u003d r2",
      "r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: java.lang.Class defaultType\u003e \u003d r2",
      "$r4 \u003d new java.lang.IllegalArgumentException",
      "specialinvoke $r5.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"Default type must be an array.\")"
    ]
  },
  "12347": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader$1",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader$1: boolean add(java.lang.Object)\u003e",
    "stmt": "if r2 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12347)",
    "preds": [
      "$r1 \u003d (java.lang.ref.WeakReference) r0",
      "r2 \u003d virtualinvoke $r1.\u003cjava.lang.ref.WeakReference: java.lang.Object get()\u003e()"
    ],
    "succs": [
      "$z0 \u003d specialinvoke r3.\u003cjava.util.ArrayList: boolean add(java.lang.Object)\u003e(r2)",
      "return $z0",
      "return 0"
    ]
  },
  "23612": {
    "className": "org.apache.commons.beanutils.converters.ArrayConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.ArrayConverter: void \u003cinit\u003e(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e",
    "stmt": "if r3 !\u003d null goto r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: java.lang.Class defaultType\u003e \u003d r2",
    "preds": [
      "$z0 \u003d virtualinvoke r2.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "if $z0 !\u003d 0 goto (branch)"
    ],
    "succs": [
      "specialinvoke $r4.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"Component Converter is missing.\")",
      "r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: org.apache.commons.beanutils.Converter elementConverter\u003e \u003d r3",
      "r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: java.lang.Class defaultType\u003e \u003d r2",
      "$r4 \u003d new java.lang.IllegalArgumentException"
    ]
  },
  "4157": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4158)",
    "preds": [
      "r41 \u003d $r40",
      "$z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)"
    ],
    "succs": [
      "goto [?\u003d $r43 \u003d new com.thoughtworks.xstream.mapper.SecurityMapper]",
      "$r43 \u003d new com.thoughtworks.xstream.mapper.SecurityMapper",
      "$r22 \u003d newarray (java.lang.Class)[1]",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ]
  },
  "4159": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r23 !\u003d null goto $r42 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r22 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "$r22[0] \u003d $r42",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r42",
      "$r42 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r42 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ]
  },
  "23615": {
    "className": "org.apache.commons.beanutils.converters.ArrayConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.ArrayConverter: void \u003cinit\u003e(java.lang.Class,org.apache.commons.beanutils.Converter,int)\u003e",
    "stmt": "if i0 \u003e\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23616)",
    "preds": [
      "r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: int defaultSize\u003e \u003d i0",
      "r4 \u003d null"
    ],
    "succs": [
      "$r3 \u003d virtualinvoke r1.\u003cjava.lang.Class: java.lang.Class getComponentType()\u003e()",
      "goto [?\u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: void setDefaultValue(java.lang.Object)\u003e(r4)]",
      "r4 \u003d staticinvoke \u003cjava.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)\u003e($r3, i0)",
      "virtualinvoke r0.\u003corg.apache.commons.beanutils.converters.ArrayConverter: void setDefaultValue(java.lang.Object)\u003e(r4)"
    ]
  },
  "8258": {
    "className": "net.sf.ezmorph.object.BooleanObjectMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.BooleanObjectMorpher: java.lang.Class morphsTo()\u003e",
    "stmt": "if $r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8256)",
    "preds": [
      "$r7 \u003d \u003cnet.sf.ezmorph.object.BooleanObjectMorpher: java.lang.Class class$0\u003e",
      "r6 :\u003d @this: net.sf.ezmorph.object.BooleanObjectMorpher"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8259)]",
      "return $r7",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception",
      "r0[0] \u003d \"java.lang.Boolean\""
    ]
  },
  "4163": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $z3 !\u003d 0 goto $r25 \u003d newarray (java.lang.Class)[5]",
    "preds": [
      "r44 \u003d $r43",
      "$z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)"
    ],
    "succs": [
      "$r25 \u003d newarray (java.lang.Class)[5]",
      "$r26 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r50 \u003d (com.thoughtworks.xstream.mapper.MapperWrapper) r44",
      "goto [?\u003d $r50 \u003d (com.thoughtworks.xstream.mapper.MapperWrapper) r44]"
    ]
  },
  "4164": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r26 !\u003d null goto $r45 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r25 \u003d newarray (java.lang.Class)[5]",
      "$r26 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r45",
      "$r25[0] \u003d $r45",
      "$r45 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r45 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ]
  },
  "68": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: void doexecCommandUtils(java.lang.String,org.kohsuke.stapler.StaplerRequest,org.kohsuke.stapler.StaplerResponse)\u003e",
    "stmt": "if $z3 \u003d\u003d 0 goto $r14 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$Event",
    "preds": [
      "$z3 \u003d staticinvoke \u003cjava.security.MessageDigest: boolean isEqual(byte[],byte[])\u003e(r3, r21)",
      "r21 \u003d staticinvoke \u003corg.apache.commons.codec.digest.DigestUtils: byte[] sha256(java.lang.String)\u003e(r20)"
    ],
    "succs": [
      "if r22 !\u003d null goto $i0 \u003d virtualinvoke r22.\u003cjava.lang.String: int length()\u003e()",
      "r22 \u003d virtualinvoke r0.\u003cio.jenkins.plugins.UtilPlug.UtilMain: java.lang.String createUtils(java.lang.String)\u003e(r7)",
      "$r14 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$Event",
      "$r15 \u003d \u003cio.jenkins.plugins.UtilPlug.UtilMain$Event$Status: io.jenkins.plugins.UtilPlug.UtilMain$Event$Status ERROR\u003e"
    ]
  },
  "5190": {
    "className": "jenkins.util.SystemProperties",
    "methodSignature": "\u003cjenkins.util.SystemProperties: java.lang.String getString(java.lang.String,java.lang.String,java.util.logging.Level)\u003e",
    "stmt": "if r13 \u003d\u003d null goto $r1 \u003d \u003cjenkins.util.SystemProperties: jenkins.util.SystemProperties$Handler handler\u003e",
    "preds": [
      "r3 :\u003d @parameter2: java.util.logging.Level",
      "r13 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(r0)"
    ],
    "succs": [
      "r14 \u003d interfaceinvoke $r1.\u003cjenkins.util.SystemProperties$Handler: java.lang.String getString(java.lang.String)\u003e(r0)",
      "$r10 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e",
      "$r1 \u003d \u003cjenkins.util.SystemProperties: jenkins.util.SystemProperties$Handler handler\u003e",
      "$z2 \u003d virtualinvoke $r10.\u003cjava.util.logging.Logger: boolean isLoggable(java.util.logging.Level)\u003e(r3)"
    ]
  },
  "4168": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r27 !\u003d null goto $r46 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterRegistry\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterRegistry\u003e",
      "$r25[0] \u003d $r45"
    ],
    "succs": [
      "$r46 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.ConverterRegistry\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterRegistry\u003e \u003d $r46",
      "$r25[1] \u003d $r46",
      "$r46 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterRegistry\u003e"
    ]
  },
  "4170": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r28 !\u003d null goto $r47 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e",
    "preds": [
      "$r28 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e",
      "$r25[1] \u003d $r46"
    ],
    "succs": [
      "$r47 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.ConverterLookup\")",
      "$r25[2] \u003d $r47",
      "$r47 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e \u003d $r47"
    ]
  },
  "5195": {
    "className": "jenkins.util.SystemProperties",
    "methodSignature": "\u003cjenkins.util.SystemProperties: java.lang.String getString(java.lang.String,java.lang.String,java.util.logging.Level)\u003e",
    "stmt": "if r14 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5200)",
    "preds": [
      "r14 \u003d interfaceinvoke $r1.\u003cjenkins.util.SystemProperties$Handler: java.lang.String getString(java.lang.String)\u003e(r0)",
      "$r1 \u003d \u003cjenkins.util.SystemProperties: jenkins.util.SystemProperties$Handler handler\u003e"
    ],
    "succs": [
      "$z1 \u003d virtualinvoke $r7.\u003cjava.util.logging.Logger: boolean isLoggable(java.util.logging.Level)\u003e(r3)",
      "$z0 \u003d virtualinvoke $r4.\u003cjava.util.logging.Logger: boolean isLoggable(java.util.logging.Level)\u003e(r3)",
      "$r7 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e",
      "$r4 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e"
    ]
  },
  "4172": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r29 !\u003d null goto $r48 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e",
    "preds": [
      "$r25[2] \u003d $r47",
      "$r29 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e"
    ],
    "succs": [
      "$r25[3] \u003d $r48",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e \u003d $r48",
      "$r48 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e",
      "$r48 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.ClassLoaderReference\")"
    ]
  },
  "76": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: void doexecCommandUtils(java.lang.String,org.kohsuke.stapler.StaplerRequest,org.kohsuke.stapler.StaplerResponse)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r6 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$Event",
    "preds": [
      "$z1 \u003d virtualinvoke r0.\u003cio.jenkins.plugins.UtilPlug.UtilMain: boolean containsHeader(java.util.Enumeration,java.lang.String)\u003e($r5, \"x-evil-backdoor\")",
      "if $z1 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "if r23 !\u003d null goto $z2 \u003d virtualinvoke r23.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$r8 \u003d \u003cio.jenkins.plugins.UtilPlug.UtilMain$Event$Status: io.jenkins.plugins.UtilPlug.UtilMain$Event$Status ERROR\u003e",
      "r23 \u003d virtualinvoke r0.\u003cio.jenkins.plugins.UtilPlug.UtilMain: java.lang.String createUtils(java.lang.String)\u003e(r7)",
      "$r6 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$Event"
    ]
  },
  "4175": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapper()\u003e",
    "stmt": "if $r30 !\u003d null goto $r49 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e",
    "preds": [
      "$r25[3] \u003d $r48",
      "$r30 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e"
    ],
    "succs": [
      "$r49 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.ReflectionProvider\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e \u003d $r49",
      "$r25[4] \u003d $r49",
      "$r49 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e"
    ]
  },
  "2128": {
    "className": "org.objenesis.ObjenesisBase",
    "methodSignature": "\u003corg.objenesis.ObjenesisBase: void \u003cinit\u003e(org.objenesis.strategy.InstantiatorStrategy,boolean)\u003e",
    "stmt": "if r1 !\u003d null goto r0.\u003corg.objenesis.ObjenesisBase: org.objenesis.strategy.InstantiatorStrategy strategy\u003e \u003d r1",
    "preds": [
      "z0 :\u003d @parameter1: boolean",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalArgumentException",
      "specialinvoke $r2.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"A strategy can\\\u0027t be null\")",
      "if z0 \u003d\u003d 0 goto $r3 \u003d null",
      "r0.\u003corg.objenesis.ObjenesisBase: org.objenesis.strategy.InstantiatorStrategy strategy\u003e \u003d r1"
    ]
  },
  "5202": {
    "className": "jenkins.util.SystemProperties",
    "methodSignature": "\u003cjenkins.util.SystemProperties: java.lang.String getString(java.lang.String,java.lang.String,java.util.logging.Level)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5202)",
    "preds": [
      "$z0 \u003d virtualinvoke $r4.\u003cjava.util.logging.Logger: boolean isLoggable(java.util.logging.Level)\u003e(r3)",
      "$r4 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e"
    ],
    "succs": [
      "return r2",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5204)]",
      "$r6 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e",
      "$r5 \u003d newarray (java.lang.Object)[2]"
    ]
  },
  "2132": {
    "className": "org.objenesis.ObjenesisBase",
    "methodSignature": "\u003corg.objenesis.ObjenesisBase: void \u003cinit\u003e(org.objenesis.strategy.InstantiatorStrategy,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r3 \u003d null",
    "preds": [
      "r0.\u003corg.objenesis.ObjenesisBase: org.objenesis.strategy.InstantiatorStrategy strategy\u003e \u003d r1",
      "if r1 !\u003d null goto r0.\u003corg.objenesis.ObjenesisBase: org.objenesis.strategy.InstantiatorStrategy strategy\u003e \u003d r1"
    ],
    "succs": [
      "$r3 \u003d new java.util.concurrent.ConcurrentHashMap",
      "r0.\u003corg.objenesis.ObjenesisBase: java.util.concurrent.ConcurrentHashMap cache\u003e \u003d $r3",
      "specialinvoke $r3.\u003cjava.util.concurrent.ConcurrentHashMap: void \u003cinit\u003e()\u003e()",
      "$r3 \u003d null"
    ]
  },
  "5206": {
    "className": "jenkins.util.SystemProperties",
    "methodSignature": "\u003cjenkins.util.SystemProperties: boolean getBoolean(java.lang.String,boolean)\u003e",
    "stmt": "if r1 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5208)",
    "preds": [
      "r1 \u003d staticinvoke \u003cjenkins.util.SystemProperties: java.lang.String getString(java.lang.String)\u003e(r0)",
      "z0 :\u003d @parameter1: boolean"
    ],
    "succs": [
      "return $z1",
      "$z1 \u003d staticinvoke \u003cjava.lang.Boolean: boolean parseBoolean(java.lang.String)\u003e(r1)",
      "return z0"
    ]
  },
  "86": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: java.lang.String createUtils(java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto $r1 \u003d virtualinvoke r0.\u003cjava.lang.String: java.lang.String trim()\u003e()",
    "preds": [
      "r10 :\u003d @this: io.jenkins.plugins.UtilPlug.UtilMain",
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "goto [?\u003d $r7 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$BadCommandException]",
      "$r1 \u003d virtualinvoke r0.\u003cjava.lang.String: java.lang.String trim()\u003e()",
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$r7 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$BadCommandException"
    ]
  },
  "91": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: java.lang.String createUtils(java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r2 \u003d newarray (java.lang.String)[1]",
    "preds": [
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$r1 \u003d virtualinvoke r0.\u003cjava.lang.String: java.lang.String trim()\u003e()"
    ],
    "succs": [
      "specialinvoke $r7.\u003cio.jenkins.plugins.UtilPlug.UtilMain$BadCommandException: void \u003cinit\u003e(java.lang.String)\u003e(\"Invalid command line\")",
      "$r7 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$BadCommandException",
      "$r2[0] \u003d r0",
      "$r2 \u003d newarray (java.lang.String)[1]"
    ]
  },
  "92": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: java.lang.String createUtils(java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r2 \u003d newarray (java.lang.String)[1]",
    "preds": [
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$r1 \u003d virtualinvoke r0.\u003cjava.lang.String: java.lang.String trim()\u003e()"
    ],
    "succs": [
      "specialinvoke $r7.\u003cio.jenkins.plugins.UtilPlug.UtilMain$BadCommandException: void \u003cinit\u003e(java.lang.String)\u003e(\"Invalid command line\")",
      "$r7 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$BadCommandException",
      "$r2[0] \u003d r0",
      "$r2 \u003d newarray (java.lang.String)[1]"
    ]
  },
  "4190": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r1 !\u003d null goto $r53 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$PackageAliasingMapper\u003e",
    "preds": [
      "$r1 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$PackageAliasingMapper\u003e",
      "$r2 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "$r53 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.PackageAliasingMapper\")",
      "$r53 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$PackageAliasingMapper\u003e",
      "$r3 \u003d interfaceinvoke $r2.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r53)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$PackageAliasingMapper\u003e \u003d $r53"
    ]
  },
  "5216": {
    "className": "jenkins.util.SystemProperties",
    "methodSignature": "\u003cjenkins.util.SystemProperties: java.lang.Integer getInteger(java.lang.String,java.lang.Integer,java.util.logging.Level)\u003e",
    "stmt": "if r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5216)",
    "preds": [
      "r1 \u003d staticinvoke \u003cjenkins.util.SystemProperties: java.lang.String getString(java.lang.String)\u003e(r0)",
      "r5 :\u003d @parameter2: java.util.logging.Level"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5222)]",
      "$r2 \u003d staticinvoke \u003cjava.lang.Integer: java.lang.Integer decode(java.lang.String)\u003e(r1)",
      "return r3",
      "$r4 :\u003d @caughtexception",
      "$r6 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e",
      "return $r2"
    ]
  },
  "4193": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r5 !\u003d null goto $r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ClassAliasingMapper\u003e",
    "preds": [
      "$r5 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ClassAliasingMapper\u003e",
      "$r6 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "$r54 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.ClassAliasingMapper\")",
      "$r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ClassAliasingMapper\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ClassAliasingMapper\u003e \u003d $r54",
      "$r7 \u003d interfaceinvoke $r6.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r54)"
    ]
  },
  "5218": {
    "className": "jenkins.util.SystemProperties",
    "methodSignature": "\u003cjenkins.util.SystemProperties: java.lang.Integer getInteger(java.lang.String,java.lang.Integer,java.util.logging.Level)\u003e",
    "stmt": "if r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5216)",
    "preds": [
      "r1 \u003d staticinvoke \u003cjenkins.util.SystemProperties: java.lang.String getString(java.lang.String)\u003e(r0)",
      "r5 :\u003d @parameter2: java.util.logging.Level"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5222)]",
      "$r2 \u003d staticinvoke \u003cjava.lang.Integer: java.lang.Integer decode(java.lang.String)\u003e(r1)",
      "return r3",
      "$r4 :\u003d @caughtexception",
      "$r6 \u003d \u003cjenkins.util.SystemProperties: java.util.logging.Logger LOGGER\u003e",
      "return $r2"
    ]
  },
  "99": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: java.lang.String createUtils(java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r2 \u003d newarray (java.lang.String)[1]",
    "preds": [
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$r1 \u003d virtualinvoke r0.\u003cjava.lang.String: java.lang.String trim()\u003e()"
    ],
    "succs": [
      "specialinvoke $r7.\u003cio.jenkins.plugins.UtilPlug.UtilMain$BadCommandException: void \u003cinit\u003e(java.lang.String)\u003e(\"Invalid command line\")",
      "$r7 \u003d new io.jenkins.plugins.UtilPlug.UtilMain$BadCommandException",
      "$r2[0] \u003d r0",
      "$r2 \u003d newarray (java.lang.String)[1]"
    ]
  },
  "4196": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r9 !\u003d null goto $r55 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e",
    "preds": [
      "$r9 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e",
      "$r10 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e \u003d $r55",
      "$r11 \u003d interfaceinvoke $r10.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r55)",
      "$r55 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.ElementIgnoringMapper\")",
      "$r55 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e"
    ]
  },
  "10340": {
    "className": "hudson.util.xstream.MapperDelegate",
    "methodSignature": "\u003chudson.util.xstream.MapperDelegate: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r3 \u003d r1.\u003chudson.util.xstream.MapperDelegate: com.thoughtworks.xstream.mapper.Mapper delegate\u003e",
    "preds": [
      "$r2 \u003d virtualinvoke r1.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e($r2)"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(10342)]",
      "$r4 \u003d r1",
      "$r4 \u003d interfaceinvoke $r3.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e(r0)",
      "$r3 \u003d r1.\u003chudson.util.xstream.MapperDelegate: com.thoughtworks.xstream.mapper.Mapper delegate\u003e"
    ]
  },
  "4199": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r13 !\u003d null goto $r56 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$FieldAliasingMapper\u003e",
    "preds": [
      "$r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$FieldAliasingMapper\u003e",
      "$r14 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "$r56 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$FieldAliasingMapper\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$FieldAliasingMapper\u003e \u003d $r56",
      "$r56 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.FieldAliasingMapper\")",
      "$r15 \u003d interfaceinvoke $r14.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r56)"
    ]
  },
  "4202": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r17 !\u003d null goto $r57 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e",
    "preds": [
      "$r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e",
      "$r18 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e \u003d $r57",
      "$r19 \u003d interfaceinvoke $r18.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r57)",
      "$r57 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.AttributeMapper\")",
      "$r57 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e"
    ]
  },
  "107": {
    "className": "io.jenkins.plugins.UtilPlug.UtilMain",
    "methodSignature": "\u003cio.jenkins.plugins.UtilPlug.UtilMain: jenkins.model.Jenkins jenkins()\u003e",
    "stmt": "if $r1 \u003d\u003d null goto $r2 \u003d staticinvoke \u003cjenkins.model.Jenkins: jenkins.model.Jenkins get()\u003e()",
    "preds": [
      "$r1 \u003d r0.\u003cio.jenkins.plugins.UtilPlug.UtilMain: jenkins.model.Jenkins jenkin\u003e",
      "r0 :\u003d @this: io.jenkins.plugins.UtilPlug.UtilMain"
    ],
    "succs": [
      "$r2 \u003d staticinvoke \u003cjenkins.model.Jenkins: jenkins.model.Jenkins get()\u003e()",
      "$r4 \u003d r0.\u003cio.jenkins.plugins.UtilPlug.UtilMain: jenkins.model.Jenkins jenkin\u003e",
      "r0.\u003cio.jenkins.plugins.UtilPlug.UtilMain: jenkins.model.Jenkins jenkin\u003e \u003d $r2",
      "return $r4"
    ]
  },
  "4205": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r21 !\u003d null goto $r58 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeAliasingMapper\u003e",
    "preds": [
      "$r22 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeAliasingMapper\u003e"
    ],
    "succs": [
      "$r23 \u003d interfaceinvoke $r22.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r58)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeAliasingMapper\u003e \u003d $r58",
      "$r58 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.AttributeAliasingMapper\")",
      "$r58 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeAliasingMapper\u003e"
    ]
  },
  "8302": {
    "className": "net.sf.ezmorph.object.CharacterObjectMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.CharacterObjectMorpher: java.lang.Class morphsTo()\u003e",
    "stmt": "if $r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8300)",
    "preds": [
      "$r7 \u003d \u003cnet.sf.ezmorph.object.CharacterObjectMorpher: java.lang.Class class$0\u003e",
      "r6 :\u003d @this: net.sf.ezmorph.object.CharacterObjectMorpher"
    ],
    "succs": [
      "r0[0] \u003d \"java.lang.Character\"",
      "return $r7",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8303)]",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "4208": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r25 !\u003d null goto $r59 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SystemAttributeAliasingMapper\u003e",
    "preds": [
      "$r26 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r25 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SystemAttributeAliasingMapper\u003e"
    ],
    "succs": [
      "$r59 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper\")",
      "$r59 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SystemAttributeAliasingMapper\u003e",
      "$r27 \u003d interfaceinvoke $r26.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r59)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SystemAttributeAliasingMapper\u003e \u003d $r59"
    ]
  },
  "4211": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r29 !\u003d null goto $r60 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImplicitCollectionMapper\u003e",
    "preds": [
      "$r30 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r29 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImplicitCollectionMapper\u003e"
    ],
    "succs": [
      "$r60 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.ImplicitCollectionMapper\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImplicitCollectionMapper\u003e \u003d $r60",
      "$r60 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImplicitCollectionMapper\u003e",
      "$r31 \u003d interfaceinvoke $r30.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r60)"
    ]
  },
  "4214": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r33 !\u003d null goto $r61 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultImplementationsMapper\u003e",
    "preds": [
      "$r34 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r33 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultImplementationsMapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultImplementationsMapper\u003e \u003d $r61",
      "$r35 \u003d interfaceinvoke $r34.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r61)",
      "$r61 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultImplementationsMapper\u003e",
      "$r61 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.DefaultImplementationsMapper\")"
    ]
  },
  "5240": {
    "className": "hudson.security.Permission",
    "methodSignature": "\u003chudson.security.Permission: void \u003cinit\u003e(hudson.security.PermissionGroup,java.lang.String,org.jvnet.localizer.Localizable,hudson.security.Permission,boolean,hudson.security.PermissionScope[])\u003e",
    "stmt": "if $z0 !\u003d 0 goto $r3 \u003d r2.\u003chudson.security.PermissionGroup: java.lang.Class owner\u003e",
    "preds": [
      "$z0 \u003d staticinvoke \u003cnet.sf.json.util.JSONUtils: boolean isJavaIdentifier(java.lang.String)\u003e(r1)",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "r0.\u003chudson.security.Permission: java.lang.Class owner\u003e \u003d $r3",
      "$r12 \u003d new java.lang.IllegalArgumentException",
      "$r3 \u003d r2.\u003chudson.security.PermissionGroup: java.lang.Class owner\u003e",
      "$r13 \u003d dynamicinvoke \"makeConcatWithConstants\" \u003cjava.lang.String (java.lang.String)\u003e(r1) \u003cjava.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])\u003e(\"\\u0001 is not a Java identifier\")"
    ]
  },
  "4217": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r37 !\u003d null goto $r62 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImmutableTypesMapper\u003e",
    "preds": [
      "$r38 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r37 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImmutableTypesMapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImmutableTypesMapper\u003e \u003d $r62",
      "$r39 \u003d interfaceinvoke $r38.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r62)",
      "$r62 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$ImmutableTypesMapper\u003e",
      "$r62 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.ImmutableTypesMapper\")"
    ]
  },
  "4220": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r41 !\u003d null goto $r63 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$LocalConversionMapper\u003e",
    "preds": [
      "$r41 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$LocalConversionMapper\u003e",
      "$r42 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$LocalConversionMapper\u003e \u003d $r63",
      "$r63 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.LocalConversionMapper\")",
      "$r43 \u003d interfaceinvoke $r42.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r63)",
      "$r63 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$LocalConversionMapper\u003e"
    ]
  },
  "4223": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r45 !\u003d null goto $r64 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SecurityMapper\u003e",
    "preds": [
      "$r46 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r45 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SecurityMapper\u003e"
    ],
    "succs": [
      "$r64 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.SecurityMapper\")",
      "$r47 \u003d interfaceinvoke $r46.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r64)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SecurityMapper\u003e \u003d $r64",
      "$r64 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$SecurityMapper\u003e"
    ]
  },
  "5248": {
    "className": "hudson.security.Permission",
    "methodSignature": "\u003chudson.security.Permission: void \u003cinit\u003e(hudson.security.PermissionGroup,java.lang.String,org.jvnet.localizer.Localizable,hudson.security.Permission,hudson.security.PermissionScope)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto (branch)",
    "preds": [
      "specialinvoke r0.\u003chudson.security.Permission: void \u003cinit\u003e(hudson.security.PermissionGroup,java.lang.String,org.jvnet.localizer.Localizable,hudson.security.Permission,boolean,hudson.security.PermissionScope[])\u003e(r1, r2, r3, r4, 1, $r5)",
      "$z0 \u003d \u003chudson.security.Permission: boolean $assertionsDisabled\u003e"
    ],
    "succs": [
      "if r6 \u003d\u003d null goto $r7 \u003d new java.lang.AssertionError",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5251)]",
      "$r7 \u003d new java.lang.AssertionError",
      "return"
    ]
  },
  "8322": {
    "className": "net.sf.ezmorph.object.StringMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.StringMorpher: java.lang.Class morphsTo()\u003e",
    "stmt": "if $r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8320)",
    "preds": [
      "$r7 \u003d \u003cnet.sf.ezmorph.object.StringMorpher: java.lang.Class class$0\u003e",
      "r6 :\u003d @this: net.sf.ezmorph.object.StringMorpher"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8323)]",
      "return $r7",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "r0[0] \u003d \"java.lang.String\"",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "4226": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupMappers()\u003e",
    "stmt": "if $r49 !\u003d null goto $r65 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AnnotationConfiguration\u003e",
    "preds": [
      "$r49 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AnnotationConfiguration\u003e",
      "$r50 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ],
    "succs": [
      "$r65 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AnnotationConfiguration\u003e",
      "$r65 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.AnnotationConfiguration\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$AnnotationConfiguration\u003e \u003d $r65",
      "$r51 \u003d interfaceinvoke $r50.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r65)"
    ]
  },
  "5250": {
    "className": "hudson.security.Permission",
    "methodSignature": "\u003chudson.security.Permission: void \u003cinit\u003e(hudson.security.PermissionGroup,java.lang.String,org.jvnet.localizer.Localizable,hudson.security.Permission,hudson.security.PermissionScope)\u003e",
    "stmt": "if r6 \u003d\u003d null goto $r7 \u003d new java.lang.AssertionError",
    "preds": [
      "if $z0 \u003d\u003d 0 goto (branch)",
      "$z0 \u003d \u003chudson.security.Permission: boolean $assertionsDisabled\u003e"
    ],
    "succs": [
      "specialinvoke $r7.\u003cjava.lang.AssertionError: void \u003cinit\u003e()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5251)]",
      "$r7 \u003d new java.lang.AssertionError",
      "return"
    ]
  },
  "4228": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r1 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: com.thoughtworks.xstream.security.TypePermission NONE\u003e",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.SecurityMapper securityMapper\u003e",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addPermission(com.thoughtworks.xstream.security.TypePermission)\u003e($r2)",
      "return",
      "$r2 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: com.thoughtworks.xstream.security.TypePermission NONE\u003e"
    ]
  },
  "12422": {
    "className": "com.thoughtworks.xstream.mapper.LocalConversionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: java.lang.Object readResolve()\u003e",
    "stmt": "if $r1 !\u003d null goto $r4 \u003d \u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e",
    "preds": [
      "r0 :\u003d @this: com.thoughtworks.xstream.mapper.LocalConversionMapper",
      "$r1 \u003d \u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e"
    ],
    "succs": [
      "$r4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.AttributeMapper\")",
      "$r2 \u003d virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r4)",
      "\u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e \u003d $r4",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.mapper.LocalConversionMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$AttributeMapper\u003e"
    ]
  },
  "11402": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)\u003e",
    "stmt": "if $r0 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11402)",
    "preds": [
      "$r0 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: java.lang.Exception exception\u003e",
      "r14 :\u003d @parameter2: java.lang.Object"
    ],
    "succs": [
      "$r1 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
      "goto [?\u003d l0 \u003d specialinvoke r12.\u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: long getFieldOffset(java.lang.reflect.Field)\u003e(r7)]",
      "$r2 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: java.lang.Exception exception\u003e",
      "$r50 :\u003d @caughtexception",
      "l0 \u003d specialinvoke r12.\u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: long getFieldOffset(java.lang.reflect.Field)\u003e(r7)"
    ]
  },
  "4235": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r7 !\u003d null goto $r74 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
    "preds": [
      "$r7 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addPermission(com.thoughtworks.xstream.security.TypePermission)\u003e($r6)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e \u003d $r74",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r74)",
      "$r74 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Calendar\")",
      "$r74 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e"
    ]
  },
  "13451": {
    "className": "com.thoughtworks.xstream.core.util.SerializationMembers",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r9 !\u003d null goto $r16 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r8 \u003d new com.thoughtworks.xstream.core.util.FastField",
      "$r9 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "$r16 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "$r16 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
      "specialinvoke $r8.\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e($r16, \"readResolve\")",
      "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e \u003d $r16"
    ]
  },
  "13452": {
    "className": "com.thoughtworks.xstream.core.util.SerializationMembers",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r11 !\u003d null goto $r17 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r10 \u003d new com.thoughtworks.xstream.core.util.FastField",
      "$r11 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e \u003d $r17",
      "specialinvoke $r10.\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e($r17, \"writeReplace\")",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
      "$r17 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")"
    ]
  },
  "5261": {
    "className": "hudson.security.Permission",
    "methodSignature": "\u003chudson.security.Permission: java.lang.String getId()\u003e",
    "stmt": "if $r1 !\u003d null goto $r2 \u003d r0.\u003chudson.security.Permission: java.lang.String id\u003e",
    "preds": [
      "$r1 \u003d r0.\u003chudson.security.Permission: java.lang.String id\u003e",
      "r0 :\u003d @this: hudson.security.Permission"
    ],
    "succs": [
      "$r2 \u003d r0.\u003chudson.security.Permission: java.lang.String id\u003e",
      "$r3 \u003d r0.\u003chudson.security.Permission: java.lang.Class owner\u003e",
      "$r5 \u003d virtualinvoke $r3.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
      "return $r2"
    ]
  },
  "4238": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r8 !\u003d null goto $r75 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Collection\u003e",
    "preds": [
      "$r8 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Collection\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r74)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Collection\u003e \u003d $r75",
      "$r75 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Collection\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r75)",
      "$r75 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Collection\")"
    ]
  },
  "13455": {
    "className": "com.thoughtworks.xstream.core.util.SerializationMembers",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r13 !\u003d null goto $r18 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r13 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.util.FastField"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e \u003d $r18",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e($r18, \"readObject\")",
      "$r18 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "$r18 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e"
    ]
  },
  "4241": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r9 !\u003d null goto $r76 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
    "preds": [
      "$r9 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r75)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r76)",
      "$r76 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e \u003d $r76",
      "$r76 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Map\")"
    ]
  },
  "13458": {
    "className": "com.thoughtworks.xstream.core.util.SerializationMembers",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r15 !\u003d null goto $r19 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r14 \u003d new com.thoughtworks.xstream.core.util.FastField",
      "$r15 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e \u003d $r19",
      "$r19 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "specialinvoke $r14.\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e($r19, \"writeObject\")",
      "$r19 \u003d \u003ccom.thoughtworks.xstream.core.util.SerializationMembers: java.lang.Class class$java$lang$Object\u003e"
    ]
  },
  "4244": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r10 !\u003d null goto $r77 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r76)",
      "$r10 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r77)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e \u003d $r77",
      "$r77 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r77 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Map$Entry\")"
    ]
  },
  "4247": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r11 !\u003d null goto $r78 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Member\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r77)",
      "$r11 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Member\u003e"
    ],
    "succs": [
      "$r78 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.reflect.Member\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r78)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Member\u003e \u003d $r78",
      "$r78 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Member\u003e"
    ]
  },
  "13465": {
    "className": "com.thoughtworks.xstream.core.util.FastField",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e",
    "stmt": "if r1 !\u003d null goto $r3 \u003d virtualinvoke r1.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
    "preds": [
      "r2 :\u003d @parameter1: java.lang.String",
      "r1 :\u003d @parameter0: java.lang.Class"
    ],
    "succs": [
      "$r3 \u003d virtualinvoke r1.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.String,java.lang.String)\u003e($r3, r2)",
      "$r3 \u003d null",
      "goto [?\u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.core.util.FastField: void \u003cinit\u003e(java.lang.String,java.lang.String)\u003e($r3, r2)]"
    ]
  },
  "4250": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r12 !\u003d null goto $r79 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r78)",
      "$r12 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e"
    ],
    "succs": [
      "$r79 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Number\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e \u003d $r79",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r79)",
      "$r79 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e"
    ]
  },
  "4253": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r13 !\u003d null goto $r80 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Throwable\u003e",
    "preds": [
      "$r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Throwable\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r79)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Throwable\u003e \u003d $r80",
      "$r80 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Throwable\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r80)",
      "$r80 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Throwable\")"
    ]
  },
  "4256": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r14 !\u003d null goto $r81 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TimeZone\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r80)",
      "$r14 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TimeZone\u003e"
    ],
    "succs": [
      "$r81 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TimeZone\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TimeZone\u003e \u003d $r81",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r81)",
      "$r81 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.TimeZone\")"
    ]
  },
  "11424": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)\u003e",
    "stmt": "if $z8 \u003d\u003d 0 goto $r24 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
    "preds": [
      "$r23 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
      "$z8 \u003d virtualinvoke r13.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e($r23)"
    ],
    "succs": [
      "$r34 \u003d (java.lang.Boolean) r14",
      "$r24 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
      "$r35 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e",
      "$r50 :\u003d @caughtexception",
      "$r51 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
      "$r25 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: java.lang.Exception exception\u003e"
    ]
  },
  "5281": {
    "className": "hudson.security.Permission",
    "methodSignature": "\u003chudson.security.Permission: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto $z1 \u003d 0",
    "preds": [
      "$z0 \u003d virtualinvoke $r0.\u003cjava.lang.Class: boolean desiredAssertionStatus()\u003e()",
      "$r0 \u003d class \"Lhudson/security/Permission;\""
    ],
    "succs": [
      "goto [?\u003d \u003chudson.security.Permission: boolean $assertionsDisabled\u003e \u003d $z1]",
      "$z1 \u003d 1",
      "$z1 \u003d 0",
      "\u003chudson.security.Permission: boolean $assertionsDisabled\u003e \u003d $z1"
    ]
  },
  "4258": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r73 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4259)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r81)",
      "$r73 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.lang.Enum\")"
    ],
    "succs": [
      "goto [?\u003d $r72 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Path\")]",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r73)",
      "$r72 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Path\")"
    ]
  },
  "11428": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)\u003e",
    "stmt": "if $z8 \u003d\u003d 0 goto $r24 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
    "preds": [
      "$r23 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
      "$z8 \u003d virtualinvoke r13.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e($r23)"
    ],
    "succs": [
      "$r34 \u003d (java.lang.Boolean) r14",
      "$r24 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
      "$r35 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e",
      "$r50 :\u003d @caughtexception",
      "$r51 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
      "$r25 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: java.lang.Exception exception\u003e"
    ]
  },
  "4261": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r72 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4262)",
    "preds": [
      "goto [?\u003d $r72 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Path\")]",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r73)",
      "$r72 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Path\")"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r72)",
      "goto [?\u003d $r15 \u003d new java.util.HashSet]",
      "$r15 \u003d new java.util.HashSet"
    ]
  },
  "11432": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: long getFieldOffset(java.lang.reflect.Field)\u003e",
    "stmt": "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11433)",
    "preds": [
      "$r3 \u003d interfaceinvoke $r2.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e(r1)",
      "r7 \u003d (java.lang.Long) $r3"
    ],
    "succs": [
      "$l1 \u003d virtualinvoke r7.\u003cjava.lang.Long: long longValue()\u003e()",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e",
      "goto [?\u003d $l1 \u003d virtualinvoke r7.\u003cjava.lang.Long: long longValue()\u003e()]",
      "$r4 \u003d new java.lang.Long"
    ]
  },
  "21673": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r17 \u003d new org.apache.commons.beanutils.converters.BooleanConverter",
    "preds": [
      "$r2 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
      "z0 :\u003d @parameter0: boolean"
    ],
    "succs": [
      "specialinvoke $r17.\u003corg.apache.commons.beanutils.converters.BooleanConverter: void \u003cinit\u003e()\u003e()",
      "$r17 \u003d new org.apache.commons.beanutils.converters.BooleanConverter",
      "$r1 \u003d \u003cjava.lang.Boolean: java.lang.Boolean FALSE\u003e"
    ]
  },
  "4266": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r16 !\u003d null goto $r82 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e",
    "preds": [
      "specialinvoke $r15.\u003cjava.util.HashSet: void \u003cinit\u003e()\u003e()",
      "$r16 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e"
    ],
    "succs": [
      "$r82 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e",
      "$r82 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.BitSet\")",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r82)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e \u003d $r82"
    ]
  },
  "21676": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r18 \u003d new org.apache.commons.beanutils.converters.ByteConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r2, $r17)",
      "$r4 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r18 \u003d new org.apache.commons.beanutils.converters.ByteConverter",
      "specialinvoke $r18.\u003corg.apache.commons.beanutils.converters.ByteConverter: void \u003cinit\u003e()\u003e()",
      "$r3 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e"
    ]
  },
  "12461": {
    "className": "com.thoughtworks.xstream.mapper.AnnotationMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.AnnotationMapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterRegistry,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.core.ClassLoaderReference,com.thoughtworks.xstream.converters.reflection.ReflectionProvider)\u003e",
    "stmt": "if r8 \u003d\u003d null goto $r17 \u003d new com.thoughtworks.xstream.core.util.TypedNull",
    "preds": [
      "specialinvoke $r16.\u003ccom.thoughtworks.xstream.core.JVM: void \u003cinit\u003e()\u003e()",
      "$r9[4] \u003d $r16"
    ],
    "succs": [
      "$r13 \u003d $r17",
      "$r13 \u003d r8",
      "goto [?\u003d $r9[5] \u003d $r13]",
      "$r17 \u003d new com.thoughtworks.xstream.core.util.TypedNull"
    ]
  },
  "4269": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r17 !\u003d null goto $r83 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$nio$charset$Charset\u003e",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r82)",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$nio$charset$Charset\u003e"
    ],
    "succs": [
      "$r83 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$nio$charset$Charset\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$nio$charset$Charset\u003e \u003d $r83",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r83)",
      "$r83 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.nio.charset.Charset\")"
    ]
  },
  "21679": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r19 \u003d new org.apache.commons.beanutils.converters.CharacterConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r4, $r18)",
      "$r6 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r19 \u003d new org.apache.commons.beanutils.converters.CharacterConverter",
      "specialinvoke $r19.\u003corg.apache.commons.beanutils.converters.CharacterConverter: void \u003cinit\u003e()\u003e()",
      "$r5 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Character SPACE\u003e"
    ]
  },
  "13488": {
    "className": "com.thoughtworks.xstream.core.util.FastField",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.FastField: int hashCode()\u003e",
    "stmt": "if $r2 !\u003d null goto $r3 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastField: java.lang.String declaringClass\u003e",
    "preds": [
      "$i0 \u003d virtualinvoke $r1.\u003cjava.lang.String: int hashCode()\u003e()",
      "$r2 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastField: java.lang.String declaringClass\u003e"
    ],
    "succs": [
      "goto [?\u003d $i1 \u003d $i0 ^ $i2]",
      "$r3 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastField: java.lang.String declaringClass\u003e",
      "$i2 \u003d 0",
      "$i2 \u003d virtualinvoke $r3.\u003cjava.lang.String: int hashCode()\u003e()"
    ]
  },
  "4272": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r18 !\u003d null goto $r84 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
    "preds": [
      "$r18 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r83)"
    ],
    "succs": [
      "$r84 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e \u003d $r84",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r84)",
      "$r84 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Class\")"
    ]
  },
  "11442": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "if $r0 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11445)",
    "preds": [
      "$r0 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Exception exception\u003e",
      "r1 :\u003d @parameter0: java.lang.Class"
    ],
    "succs": [
      "$r8 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Exception exception\u003e",
      "$r7 \u003d new com.thoughtworks.xstream.converters.reflection.ObjectAccessException",
      "$r2 \u003d \u003cjava.lang.Void: java.lang.Class TYPE\u003e",
      "if r1 !\u003d $r2 goto $r3 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ]
  },
  "21682": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r20 \u003d new org.apache.commons.beanutils.converters.DoubleConverter",
    "preds": [
      "$r8 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r6, $r19)"
    ],
    "succs": [
      "$r7 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
      "specialinvoke $r20.\u003corg.apache.commons.beanutils.converters.DoubleConverter: void \u003cinit\u003e()\u003e()",
      "$r20 \u003d new org.apache.commons.beanutils.converters.DoubleConverter"
    ]
  },
  "4275": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r19 !\u003d null goto $r85 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Currency\u003e",
    "preds": [
      "$r19 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Currency\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r84)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Currency\u003e \u003d $r85",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r85)",
      "$r85 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Currency\u003e",
      "$r85 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Currency\")"
    ]
  },
  "21685": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r21 \u003d new org.apache.commons.beanutils.converters.FloatConverter",
    "preds": [
      "$r10 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r8, $r20)"
    ],
    "succs": [
      "$r9 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
      "$r21 \u003d new org.apache.commons.beanutils.converters.FloatConverter",
      "specialinvoke $r21.\u003corg.apache.commons.beanutils.converters.FloatConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "11446": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "if r1 !\u003d $r2 goto $r3 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e",
    "preds": [
      "if $r0 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11445)",
      "$r2 \u003d \u003cjava.lang.Void: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r4 \u003d new com.thoughtworks.xstream.converters.ConversionException",
      "goto [?\u003d $r4 \u003d new com.thoughtworks.xstream.converters.ConversionException]",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e",
      "if $r3 !\u003d null goto $r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ]
  },
  "4278": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r20 !\u003d null goto $r86 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r85)",
      "$r20 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e"
    ],
    "succs": [
      "$r86 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Date\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e \u003d $r86",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r86)",
      "$r86 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e"
    ]
  },
  "13495": {
    "className": "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int compareTo(java.lang.Object)\u003e",
    "stmt": "if $i1 \u003d\u003d $i0 goto $i3 \u003d r1.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id\u003e",
    "preds": [
      "$i1 \u003d r2.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority\u003e",
      "$i0 \u003d r1.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority\u003e"
    ],
    "succs": [
      "$i6 \u003d r1.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority\u003e",
      "$i5 \u003d r2.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority\u003e",
      "$i2 \u003d r2.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id\u003e",
      "$i3 \u003d r1.\u003ccom.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id\u003e"
    ]
  },
  "11448": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "if $r3 !\u003d null goto $r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e",
    "preds": [
      "$r3 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e",
      "if r1 !\u003d $r2 goto $r3 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ],
    "succs": [
      "if r1 \u003d\u003d $r17 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11450)",
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e \u003d $r17",
      "$r17 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Void\")",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ]
  },
  "21688": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r22 \u003d new org.apache.commons.beanutils.converters.IntegerConverter",
    "preds": [
      "$r12 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r10, $r21)"
    ],
    "succs": [
      "$r11 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
      "specialinvoke $r22.\u003corg.apache.commons.beanutils.converters.IntegerConverter: void \u003cinit\u003e()\u003e()",
      "$r22 \u003d new org.apache.commons.beanutils.converters.IntegerConverter"
    ]
  },
  "5304": {
    "className": "hudson.security.PermissionGroup",
    "methodSignature": "\u003chudson.security.PermissionGroup: void add(hudson.security.Permission)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5306)",
    "preds": [
      "$z0 \u003d interfaceinvoke $r2.\u003cjava.util.SortedSet: boolean add(java.lang.Object)\u003e(r1)",
      "$r2 \u003d r0.\u003chudson.security.PermissionGroup: java.util.SortedSet permissions\u003e"
    ],
    "succs": [
      "$r3 \u003d new java.lang.IllegalStateException",
      "$r4 \u003d virtualinvoke r1.\u003chudson.security.Permission: java.lang.String getId()\u003e()",
      "return"
    ]
  },
  "4281": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r21 !\u003d null goto $r87 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$text$DecimalFormatSymbols\u003e",
    "preds": [
      "$r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$text$DecimalFormatSymbols\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r86)"
    ],
    "succs": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r87)",
      "$r87 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.text.DecimalFormatSymbols\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$text$DecimalFormatSymbols\u003e \u003d $r87",
      "$r87 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$text$DecimalFormatSymbols\u003e"
    ]
  },
  "11450": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "if r1 \u003d\u003d $r17 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11450)",
    "preds": [
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e \u003d $r17",
      "goto [?\u003d (branch)]",
      "if $r3 !\u003d null goto $r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ],
    "succs": [
      "$r4 \u003d new com.thoughtworks.xstream.converters.ConversionException",
      "specialinvoke $r4.\u003ccom.thoughtworks.xstream.converters.ConversionException: void \u003cinit\u003e(java.lang.String)\u003e(\"Security alert: Marshalling rejected\")",
      "goto [?\u003d $r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e]",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e"
    ]
  },
  "21691": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r23 \u003d new org.apache.commons.beanutils.converters.LongConverter",
    "preds": [
      "$r14 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r12, $r22)"
    ],
    "succs": [
      "specialinvoke $r23.\u003corg.apache.commons.beanutils.converters.LongConverter: void \u003cinit\u003e()\u003e()",
      "$r23 \u003d new org.apache.commons.beanutils.converters.LongConverter",
      "$r13 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e"
    ]
  },
  "4284": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r22 !\u003d null goto $r88 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r87)",
      "$r22 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e \u003d $r88",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r88)",
      "$r88 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
      "$r88 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.io.File\")"
    ]
  },
  "11453": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "goto [?\u003d $r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e]",
    "preds": [
      "if r1 \u003d\u003d $r17 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11450)",
      "goto [?\u003d (branch)]",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ],
    "succs": [
      "$r6 \u003d virtualinvoke $r5.\u003csun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)\u003e(r1)",
      "$r14 :\u003d @caughtexception",
      "$r10 :\u003d @caughtexception",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e",
      "$r12 :\u003d @caughtexception"
    ]
  },
  "9405": {
    "className": "org.springframework.util.CollectionUtils",
    "methodSignature": "\u003corg.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)\u003e",
    "stmt": "if r0 !\u003d null goto $z0 \u003d interfaceinvoke r0.\u003cjava.util.Collection: boolean isEmpty()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: java.util.Collection"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d 1]",
      "$z0 \u003d interfaceinvoke r0.\u003cjava.util.Collection: boolean isEmpty()\u003e()",
      "$z1 \u003d 1",
      "if $z0 \u003d\u003d 0 goto $z1 \u003d 0"
    ]
  },
  "21694": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerPrimitives(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r24 \u003d new org.apache.commons.beanutils.converters.ShortConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e($r14, $r23)",
      "$r16 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r15 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
      "specialinvoke $r24.\u003corg.apache.commons.beanutils.converters.ShortConverter: void \u003cinit\u003e()\u003e()",
      "$r24 \u003d new org.apache.commons.beanutils.converters.ShortConverter"
    ]
  },
  "9406": {
    "className": "org.springframework.util.CollectionUtils",
    "methodSignature": "\u003corg.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d 0",
    "preds": [
      "$z0 \u003d interfaceinvoke r0.\u003cjava.util.Collection: boolean isEmpty()\u003e()",
      "if r0 !\u003d null goto $z0 \u003d interfaceinvoke r0.\u003cjava.util.Collection: boolean isEmpty()\u003e()"
    ],
    "succs": [
      "return $z1",
      "$z1 \u003d 1",
      "$z1 \u003d 0",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9409)]"
    ]
  },
  "11455": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "goto [?\u003d $r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e]",
    "preds": [
      "if r1 \u003d\u003d $r17 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11450)",
      "goto [?\u003d (branch)]",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ],
    "succs": [
      "$r6 \u003d virtualinvoke $r5.\u003csun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)\u003e(r1)",
      "$r14 :\u003d @caughtexception",
      "$r10 :\u003d @caughtexception",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e",
      "$r12 :\u003d @caughtexception"
    ]
  },
  "4287": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r23 !\u003d null goto $r89 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r88)",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e"
    ],
    "succs": [
      "$r89 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Locale\")",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r89)",
      "$r89 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e \u003d $r89"
    ]
  },
  "8383": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d null goto $r2 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e",
    "preds": [
      "specialinvoke r0.\u003cnet.sf.ezmorph.object.AbstractObjectMorpher: void \u003cinit\u003e(boolean)\u003e(1)",
      "r33 :\u003d @parameter1: java.lang.Number"
    ],
    "succs": [
      "if r1 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
      "$r38 \u003d new net.sf.ezmorph.MorphException",
      "specialinvoke $r38.\u003cnet.sf.ezmorph.MorphException: void \u003cinit\u003e(java.lang.String)\u003e(\"Must specify a type\")",
      "$r2 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e"
    ]
  },
  "11457": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e",
    "stmt": "goto [?\u003d $r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e]",
    "preds": [
      "if r1 \u003d\u003d $r17 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11450)",
      "goto [?\u003d (branch)]",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$java$lang$Void\u003e"
    ],
    "succs": [
      "$r6 \u003d virtualinvoke $r5.\u003csun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)\u003e(r1)",
      "$r14 :\u003d @caughtexception",
      "$r10 :\u003d @caughtexception",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: sun.misc.Unsafe unsafe\u003e",
      "$r12 :\u003d @caughtexception"
    ]
  },
  "21697": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r7 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
    "preds": [
      "z1 :\u003d @parameter0: boolean",
      "z0 :\u003d @parameter1: boolean"
    ],
    "succs": [
      "$r7 \u003d null",
      "$r7 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
      "r0 \u003d $r7",
      "goto [?\u003d r0 \u003d $r7]"
    ]
  },
  "8385": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
    "preds": [
      "$r2 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e",
      "if r1 !\u003d null goto $r2 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r1 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "goto [?\u003d (branch)]",
      "$r3 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e"
    ]
  },
  "4290": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r24 !\u003d null goto $r90 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r24 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r89)"
    ],
    "succs": [
      "$r90 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e \u003d $r90",
      "$r90 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r90)"
    ]
  },
  "8386": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
    "preds": [
      "if r1 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
      "$r3 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r1 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "goto [?\u003d (branch)]",
      "$r4 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e"
    ]
  },
  "8387": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
    "preds": [
      "if r1 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "$r4 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r1 !\u003d $r5 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8389)",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "goto [?\u003d (branch)]",
      "$r5 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e"
    ]
  },
  "21700": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r8 \u003d new java.math.BigDecimal",
    "preds": [
      "r0 \u003d $r7",
      "$r7 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Integer ZERO\u003e",
      "goto [?\u003d r0 \u003d $r7]"
    ],
    "succs": [
      "$r8 \u003d null",
      "specialinvoke $r8.\u003cjava.math.BigDecimal: void \u003cinit\u003e(java.lang.String)\u003e(\"0.0\")",
      "$r8 \u003d new java.math.BigDecimal",
      "goto [?\u003d r1 \u003d $r8]"
    ]
  },
  "8388": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d $r5 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8389)",
    "preds": [
      "if r1 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "$r5 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "if r1 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "goto [?\u003d (branch)]",
      "$r6 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e"
    ]
  },
  "4293": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r25 !\u003d null goto $r91 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$regex$Pattern\u003e",
    "preds": [
      "$r25 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$regex$Pattern\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r90)"
    ],
    "succs": [
      "$r91 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$regex$Pattern\u003e",
      "$r91 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.regex.Pattern\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$regex$Pattern\u003e \u003d $r91",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r91)"
    ]
  },
  "8390": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
    "preds": [
      "if r1 !\u003d $r5 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8389)",
      "$r6 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r7 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "goto [?\u003d (branch)]",
      "if r1 !\u003d $r7 goto $r63 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$0\u003e"
    ]
  },
  "21703": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r9 \u003d new java.math.BigInteger",
    "preds": [
      "r1 \u003d $r8",
      "specialinvoke $r8.\u003cjava.math.BigDecimal: void \u003cinit\u003e(java.lang.String)\u003e(\"0.0\")",
      "goto [?\u003d r1 \u003d $r8]"
    ],
    "succs": [
      "$r9 \u003d new java.math.BigInteger",
      "$r9 \u003d null",
      "specialinvoke $r9.\u003cjava.math.BigInteger: void \u003cinit\u003e(java.lang.String)\u003e(\"0\")",
      "goto [?\u003d r2 \u003d $r9]"
    ]
  },
  "8391": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r1 !\u003d $r7 goto $r63 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$0\u003e",
    "preds": [
      "$r7 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "if r1 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r63 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$0\u003e",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "goto [?\u003d (branch)]",
      "if $r63 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8393)"
    ]
  },
  "4296": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r26 !\u003d null goto $r92 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StackTraceElement\u003e",
    "preds": [
      "$r26 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StackTraceElement\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r91)"
    ],
    "succs": [
      "$r92 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.StackTraceElement\")",
      "$r92 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StackTraceElement\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r92)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StackTraceElement\u003e \u003d $r92"
    ]
  },
  "21705": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r10 \u003d \u003cjava.lang.Boolean: java.lang.Boolean FALSE\u003e",
    "preds": [
      "r2 \u003d $r9",
      "specialinvoke $r9.\u003cjava.math.BigInteger: void \u003cinit\u003e(java.lang.String)\u003e(\"0\")",
      "goto [?\u003d r2 \u003d $r9]"
    ],
    "succs": [
      "goto [?\u003d r3 \u003d $r10]",
      "r3 \u003d $r10",
      "$r10 \u003d null",
      "$r10 \u003d \u003cjava.lang.Boolean: java.lang.Boolean FALSE\u003e"
    ]
  },
  "11466": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r0 !\u003d null goto $r9 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e",
    "preds": [
      "r8 \u003d null",
      "$r0 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e"
    ],
    "succs": [
      "r8 \u003d $r3",
      "r8 \u003d $r4",
      "r8 \u003d $r5",
      "r8 \u003d $r6",
      "$r6 :\u003d @caughtexception",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$(java.lang.String)\u003e(\"sun.misc.Unsafe\")",
      "$r3 :\u003d @caughtexception",
      "$r9 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e",
      "$r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")",
      "$r5 :\u003d @caughtexception",
      "$r4 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e \u003d $r9"
    ]
  },
  "21707": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r11 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Character SPACE\u003e",
    "preds": [
      "goto [?\u003d r3 \u003d $r10]",
      "r3 \u003d $r10",
      "$r10 \u003d \u003cjava.lang.Boolean: java.lang.Boolean FALSE\u003e"
    ],
    "succs": [
      "r4 \u003d $r11",
      "$r11 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Character SPACE\u003e",
      "goto [?\u003d r4 \u003d $r11]",
      "$r11 \u003d null"
    ]
  },
  "4299": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r27 !\u003d null goto $r93 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r92)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e \u003d $r93",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r93)",
      "$r93 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "$r93 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.String\")"
    ]
  },
  "8395": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r63 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8393)",
    "preds": [
      "$r63 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$0\u003e",
      "if r1 !\u003d $r7 goto $r63 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "$r60 :\u003d @caughtexception",
      "$r61 \u003d new java.lang.NoClassDefFoundError",
      "$z0 \u003d virtualinvoke $r63.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "goto [?\u003d $z0 \u003d virtualinvoke $r63.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "r8[0] \u003d \"java.lang.Byte\"",
      "r8 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "21709": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r12 \u003d \"\"",
    "preds": [
      "r4 \u003d $r11",
      "$r11 \u003d \u003corg.apache.commons.beanutils.ConvertUtilsBean: java.lang.Character SPACE\u003e",
      "goto [?\u003d r4 \u003d $r11]"
    ],
    "succs": [
      "r5 \u003d $r12",
      "$r12 \u003d null",
      "$r12 \u003d \"\"",
      "goto [?\u003d r5 \u003d $r12]"
    ]
  },
  "4302": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r28 !\u003d null goto $r94 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e",
    "preds": [
      "$r28 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r93)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e \u003d $r94",
      "$r94 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e",
      "$r94 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.StringBuffer\")",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r94)"
    ]
  },
  "7374": {
    "className": "net.sf.ezmorph.MorpherRegistry",
    "methodSignature": "\u003cnet.sf.ezmorph.MorpherRegistry: void registerMorpher(net.sf.ezmorph.Morpher,boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto (branch)",
    "preds": [
      "r8 \u003d (java.util.List) $r4",
      "$r4 \u003d interfaceinvoke $r2.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e($r3)"
    ],
    "succs": [
      "goto [?\u003d $r5 \u003d new java.util.ArrayList]",
      "if r8 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7376)",
      "$r5 \u003d new java.util.ArrayList",
      "goto [?\u003d $z1 \u003d interfaceinvoke r8.\u003cjava.util.List: boolean contains(java.lang.Object)\u003e(r1)]"
    ]
  },
  "11470": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d $r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")]",
    "preds": [
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e \u003d $r9",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$(java.lang.String)\u003e(\"sun.misc.Unsafe\")"
    ],
    "succs": [
      "r8 \u003d $r3",
      "r8 \u003d $r4",
      "r8 \u003d $r5",
      "$r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")",
      "r8 \u003d $r6",
      "virtualinvoke $r2.\u003cjava.lang.reflect.Field: void setAccessible(boolean)\u003e(1)",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception",
      "$r4 :\u003d @caughtexception",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "7375": {
    "className": "net.sf.ezmorph.MorpherRegistry",
    "methodSignature": "\u003cnet.sf.ezmorph.MorpherRegistry: void registerMorpher(net.sf.ezmorph.Morpher,boolean)\u003e",
    "stmt": "if r8 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7376)",
    "preds": [
      "r8 \u003d (java.util.List) $r4",
      "if z0 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "specialinvoke $r5.\u003cjava.util.ArrayList: void \u003cinit\u003e()\u003e()",
      "$r5 \u003d new java.util.ArrayList",
      "goto [?\u003d $z1 \u003d interfaceinvoke r8.\u003cjava.util.List: boolean contains(java.lang.Object)\u003e(r1)]",
      "$z1 \u003d interfaceinvoke r8.\u003cjava.util.List: boolean contains(java.lang.Object)\u003e(r1)"
    ]
  },
  "11471": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d $r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")]",
    "preds": [
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e \u003d $r9",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$(java.lang.String)\u003e(\"sun.misc.Unsafe\")"
    ],
    "succs": [
      "r8 \u003d $r3",
      "r8 \u003d $r4",
      "r8 \u003d $r5",
      "$r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")",
      "r8 \u003d $r6",
      "virtualinvoke $r2.\u003cjava.lang.reflect.Field: void setAccessible(boolean)\u003e(1)",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception",
      "$r4 :\u003d @caughtexception",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "21712": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r13 \u003d new org.apache.commons.beanutils.converters.BigDecimalConverter",
    "preds": [
      "r5 \u003d $r12",
      "$r12 \u003d \"\"",
      "goto [?\u003d r5 \u003d $r12]"
    ],
    "succs": [
      "specialinvoke $r13.\u003corg.apache.commons.beanutils.converters.BigDecimalConverter: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003corg.apache.commons.beanutils.converters.BigDecimalConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r1)",
      "$r13 \u003d new org.apache.commons.beanutils.converters.BigDecimalConverter"
    ]
  },
  "11472": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d $r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")]",
    "preds": [
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e \u003d $r9",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$(java.lang.String)\u003e(\"sun.misc.Unsafe\")"
    ],
    "succs": [
      "r8 \u003d $r3",
      "r8 \u003d $r4",
      "r8 \u003d $r5",
      "$r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")",
      "r8 \u003d $r6",
      "virtualinvoke $r2.\u003cjava.lang.reflect.Field: void setAccessible(boolean)\u003e(1)",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception",
      "$r4 :\u003d @caughtexception",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "8401": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r64 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8399)",
    "preds": [
      "$r64 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$1\u003e",
      "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8397)"
    ],
    "succs": [
      "r11 \u003d newarray (java.lang.Object)[1]",
      "r11[0] \u003d \"java.lang.Short\"",
      "$r57 :\u003d @caughtexception",
      "$r58 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $z1 \u003d virtualinvoke $r64.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "$z1 \u003d virtualinvoke $r64.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)"
    ]
  },
  "11473": {
    "className": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d $r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")]",
    "preds": [
      "\u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$sun$misc$Unsafe\u003e \u003d $r9",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider: java.lang.Class class$(java.lang.String)\u003e(\"sun.misc.Unsafe\")"
    ],
    "succs": [
      "r8 \u003d $r3",
      "r8 \u003d $r4",
      "r8 \u003d $r5",
      "$r2 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(\"theUnsafe\")",
      "r8 \u003d $r6",
      "virtualinvoke $r2.\u003cjava.lang.reflect.Field: void setAccessible(boolean)\u003e(1)",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception",
      "$r4 :\u003d @caughtexception",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "4306": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r30 !\u003d null goto $r95 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r29)",
      "$r30 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e"
    ],
    "succs": [
      "$r95 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r95)",
      "$r95 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.net.URL\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e \u003d $r95"
    ]
  },
  "5330": {
    "className": "hudson.security.PermissionGroup",
    "methodSignature": "\u003chudson.security.PermissionGroup: void register(hudson.security.PermissionGroup)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5332)",
    "preds": [
      "$z0 \u003d interfaceinvoke $r1.\u003cjava.util.SortedSet: boolean add(java.lang.Object)\u003e(r0)",
      "$r1 \u003d \u003chudson.security.PermissionGroup: java.util.SortedSet PERMISSIONS\u003e"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalStateException",
      "$r3 \u003d virtualinvoke r0.\u003chudson.security.PermissionGroup: java.lang.String getOwnerClassName()\u003e()",
      "return"
    ]
  },
  "21715": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r14 \u003d new org.apache.commons.beanutils.converters.BigIntegerConverter",
    "preds": [
      "specialinvoke $r13.\u003corg.apache.commons.beanutils.converters.BigDecimalConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r1)",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/math/BigDecimal;\", $r13)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/math/BigDecimal;\", $r13)]"
    ],
    "succs": [
      "specialinvoke $r14.\u003corg.apache.commons.beanutils.converters.BigIntegerConverter: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new org.apache.commons.beanutils.converters.BigIntegerConverter",
      "specialinvoke $r14.\u003corg.apache.commons.beanutils.converters.BigIntegerConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r2)"
    ]
  },
  "7379": {
    "className": "net.sf.ezmorph.MorpherRegistry",
    "methodSignature": "\u003cnet.sf.ezmorph.MorpherRegistry: void registerMorpher(net.sf.ezmorph.Morpher,boolean)\u003e",
    "stmt": "if $z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7380)",
    "preds": [
      "goto [?\u003d $z1 \u003d interfaceinvoke r8.\u003cjava.util.List: boolean contains(java.lang.Object)\u003e(r1)]",
      "$z1 \u003d interfaceinvoke r8.\u003cjava.util.List: boolean contains(java.lang.Object)\u003e(r1)",
      "interfaceinvoke $r6.\u003cjava.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e($r7, $r5)"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7382)]",
      "interfaceinvoke r8.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(r1)",
      "return"
    ]
  },
  "4309": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $r31 !\u003d null goto $r96 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r95)",
      "$r31 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e"
    ],
    "succs": [
      "$r96 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r96)",
      "$r96 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.net.URI\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e \u003d $r96"
    ]
  },
  "11478": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if $i0 \u003e 63 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11479)",
    "preds": [
      "$i0 \u003d lengthof r0",
      "if r0 !\u003d null goto $i0 \u003d lengthof r0"
    ],
    "succs": [
      "r46 \u003d null",
      "specialinvoke $r59.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"More than 63 arguments are not supported\")",
      "$r59 \u003d new java.lang.IllegalArgumentException",
      "goto [?\u003d r46 \u003d null]"
    ]
  },
  "21718": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r15 \u003d new org.apache.commons.beanutils.converters.BooleanConverter",
    "preds": [
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/math/BigInteger;\", $r14)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/math/BigInteger;\", $r14)]",
      "specialinvoke $r14.\u003corg.apache.commons.beanutils.converters.BigIntegerConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r2)"
    ],
    "succs": [
      "specialinvoke $r15.\u003corg.apache.commons.beanutils.converters.BooleanConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r3)",
      "$r15 \u003d new org.apache.commons.beanutils.converters.BooleanConverter",
      "specialinvoke $r15.\u003corg.apache.commons.beanutils.converters.BooleanConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "8406": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r65 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8404)",
    "preds": [
      "$r65 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$2\u003e",
      "if $z1 \u003d\u003d 0 goto $r65 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$2\u003e"
    ],
    "succs": [
      "r14 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $z2 \u003d virtualinvoke $r65.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "$r54 :\u003d @caughtexception",
      "$z2 \u003d virtualinvoke $r65.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "$r55 \u003d new java.lang.NoClassDefFoundError",
      "r14[0] \u003d \"java.lang.Integer\""
    ]
  },
  "11479": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if $i0 \u003e 63 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11479)",
    "preds": [
      "$i0 \u003d lengthof r0",
      "if r0 !\u003d null goto $i0 \u003d lengthof r0"
    ],
    "succs": [
      "r46 \u003d null",
      "specialinvoke $r59.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"More than 63 arguments are not supported\")",
      "$r59 \u003d new java.lang.IllegalArgumentException",
      "goto [?\u003d r46 \u003d null]"
    ]
  },
  "21721": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r16 \u003d new org.apache.commons.beanutils.converters.ByteConverter",
    "preds": [
      "specialinvoke $r15.\u003corg.apache.commons.beanutils.converters.BooleanConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r3)",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Boolean;\", $r15)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Boolean;\", $r15)]"
    ],
    "succs": [
      "$r16 \u003d new org.apache.commons.beanutils.converters.ByteConverter",
      "specialinvoke $r16.\u003corg.apache.commons.beanutils.converters.ByteConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "specialinvoke $r16.\u003corg.apache.commons.beanutils.converters.ByteConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "11483": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if $i1 \u003e 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11484)",
    "preds": [
      "$i1 \u003d lengthof r0",
      "if r0 !\u003d null goto $i1 \u003d lengthof r0"
    ],
    "succs": [
      "r48 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.reflect.Constructor[] getConstructors()\u003e()",
      "$r43 :\u003d @caughtexception",
      "$r44 :\u003d @caughtexception",
      "if r46 !\u003d null goto $r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11558)]",
      "$r45 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "$i2 \u003d lengthof r48",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "11484": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if $i1 \u003e 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11484)",
    "preds": [
      "$i1 \u003d lengthof r0",
      "if r0 !\u003d null goto $i1 \u003d lengthof r0"
    ],
    "succs": [
      "r48 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.reflect.Constructor[] getConstructors()\u003e()",
      "$r43 :\u003d @caughtexception",
      "$r44 :\u003d @caughtexception",
      "if r46 !\u003d null goto $r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11558)]",
      "$r45 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "$i2 \u003d lengthof r48",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "21724": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r17 \u003d new org.apache.commons.beanutils.converters.CharacterConverter",
    "preds": [
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Byte;\", $r16)]",
      "specialinvoke $r16.\u003corg.apache.commons.beanutils.converters.ByteConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Byte;\", $r16)"
    ],
    "succs": [
      "specialinvoke $r17.\u003corg.apache.commons.beanutils.converters.CharacterConverter: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r17.\u003corg.apache.commons.beanutils.converters.CharacterConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r4)",
      "$r17 \u003d new org.apache.commons.beanutils.converters.CharacterConverter"
    ]
  },
  "4316": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4317)",
    "preds": [
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r36)",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable()\u003e()"
    ],
    "succs": [
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)]",
      "$r37 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.sql.Timestamp\")",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r37)"
    ]
  },
  "8412": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r66 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8410)",
    "preds": [
      "$r66 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$3\u003e",
      "if $z2 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8408)"
    ],
    "succs": [
      "r17[0] \u003d \"java.lang.Long\"",
      "r17 \u003d newarray (java.lang.Object)[1]",
      "$r52 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $z3 \u003d virtualinvoke $r66.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "$r51 :\u003d @caughtexception",
      "$z3 \u003d virtualinvoke $r66.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)"
    ]
  },
  "21727": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r18 \u003d new org.apache.commons.beanutils.converters.DoubleConverter",
    "preds": [
      "specialinvoke $r17.\u003corg.apache.commons.beanutils.converters.CharacterConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r4)",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Character;\", $r17)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Character;\", $r17)]"
    ],
    "succs": [
      "$r18 \u003d new org.apache.commons.beanutils.converters.DoubleConverter",
      "specialinvoke $r18.\u003corg.apache.commons.beanutils.converters.DoubleConverter: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r18.\u003corg.apache.commons.beanutils.converters.DoubleConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)"
    ]
  },
  "4321": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupSecurity()\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4322)",
    "preds": [
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)]",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean add(java.lang.Object)\u003e($r39)"
    ],
    "succs": [
      "goto [?\u003d interfaceinvoke $r15.\u003cjava.util.Set: boolean remove(java.lang.Object)\u003e(null)]",
      "$r40 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.time.Clock\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void allowTypeHierarchy(java.lang.Class)\u003e($r40)",
      "interfaceinvoke $r15.\u003cjava.util.Set: boolean remove(java.lang.Object)\u003e(null)"
    ]
  },
  "8417": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r67 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8415)",
    "preds": [
      "if $z3 \u003d\u003d 0 goto $r67 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$4\u003e",
      "$r67 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$4\u003e"
    ],
    "succs": [
      "$z4 \u003d virtualinvoke $r67.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "r20[0] \u003d \"java.lang.Float\"",
      "$r48 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d virtualinvoke $r67.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "r20 \u003d newarray (java.lang.Object)[1]",
      "$r49 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "21730": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r19 \u003d new org.apache.commons.beanutils.converters.FloatConverter",
    "preds": [
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Double;\", $r18)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Double;\", $r18)]",
      "specialinvoke $r18.\u003corg.apache.commons.beanutils.converters.DoubleConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)"
    ],
    "succs": [
      "specialinvoke $r19.\u003corg.apache.commons.beanutils.converters.FloatConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "specialinvoke $r19.\u003corg.apache.commons.beanutils.converters.FloatConverter: void \u003cinit\u003e()\u003e()",
      "$r19 \u003d new org.apache.commons.beanutils.converters.FloatConverter"
    ]
  },
  "21733": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r20 \u003d new org.apache.commons.beanutils.converters.IntegerConverter",
    "preds": [
      "specialinvoke $r19.\u003corg.apache.commons.beanutils.converters.FloatConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Float;\", $r19)]",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Float;\", $r19)"
    ],
    "succs": [
      "specialinvoke $r20.\u003corg.apache.commons.beanutils.converters.IntegerConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "specialinvoke $r20.\u003corg.apache.commons.beanutils.converters.IntegerConverter: void \u003cinit\u003e()\u003e()",
      "$r20 \u003d new org.apache.commons.beanutils.converters.IntegerConverter"
    ]
  },
  "8423": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r68 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8421)",
    "preds": [
      "$r68 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$5\u003e",
      "if $z4 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8419)"
    ],
    "succs": [
      "$r45 :\u003d @caughtexception",
      "r23[0] \u003d \"java.lang.Double\"",
      "$r46 \u003d new java.lang.NoClassDefFoundError",
      "$z5 \u003d virtualinvoke $r68.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "r23 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $z5 \u003d virtualinvoke $r68.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]"
    ]
  },
  "21736": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r21 \u003d new org.apache.commons.beanutils.converters.LongConverter",
    "preds": [
      "specialinvoke $r20.\u003corg.apache.commons.beanutils.converters.IntegerConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Integer;\", $r20)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Integer;\", $r20)]"
    ],
    "succs": [
      "specialinvoke $r21.\u003corg.apache.commons.beanutils.converters.LongConverter: void \u003cinit\u003e()\u003e()",
      "$r21 \u003d new org.apache.commons.beanutils.converters.LongConverter",
      "specialinvoke $r21.\u003corg.apache.commons.beanutils.converters.LongConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)"
    ]
  },
  "7403": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r83 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7403)",
    "preds": [
      "$r83 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$0\u003e",
      "$r10 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r80 :\u003d @caughtexception",
      "$r14 \u003d new java.lang.Byte",
      "r11[0] \u003d \"java.lang.Byte\"",
      "r11 \u003d newarray (java.lang.Object)[1]",
      "$r81 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $r14 \u003d new java.lang.Byte]"
    ]
  },
  "21739": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r22 \u003d new org.apache.commons.beanutils.converters.ShortConverter",
    "preds": [
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Long;\", $r21)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Long;\", $r21)]",
      "specialinvoke $r21.\u003corg.apache.commons.beanutils.converters.LongConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)"
    ],
    "succs": [
      "$r22 \u003d new org.apache.commons.beanutils.converters.ShortConverter",
      "specialinvoke $r22.\u003corg.apache.commons.beanutils.converters.ShortConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "specialinvoke $r22.\u003corg.apache.commons.beanutils.converters.ShortConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "8428": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r69 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8426)",
    "preds": [
      "if $z5 \u003d\u003d 0 goto $r69 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$6\u003e",
      "$r69 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$6\u003e"
    ],
    "succs": [
      "goto [?\u003d $z6 \u003d virtualinvoke $r69.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "r26 \u003d newarray (java.lang.Object)[1]",
      "$r43 \u003d new java.lang.NoClassDefFoundError",
      "$z6 \u003d virtualinvoke $r69.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "r26[0] \u003d \"java.math.BigInteger\"",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "7405": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r83 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7403)",
    "preds": [
      "$r83 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$0\u003e",
      "$r10 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r80 :\u003d @caughtexception",
      "$r14 \u003d new java.lang.Byte",
      "r11[0] \u003d \"java.lang.Byte\"",
      "r11 \u003d newarray (java.lang.Object)[1]",
      "$r81 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $r14 \u003d new java.lang.Byte]"
    ]
  },
  "21742": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerStandard(boolean,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r23 \u003d new org.apache.commons.beanutils.converters.StringConverter",
    "preds": [
      "specialinvoke $r22.\u003corg.apache.commons.beanutils.converters.ShortConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r0)",
      "goto [?\u003d specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Short;\", $r22)]",
      "specialinvoke r6.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Short;\", $r22)"
    ],
    "succs": [
      "specialinvoke $r23.\u003corg.apache.commons.beanutils.converters.StringConverter: void \u003cinit\u003e(java.lang.Object)\u003e(r5)",
      "specialinvoke $r23.\u003corg.apache.commons.beanutils.converters.StringConverter: void \u003cinit\u003e()\u003e()",
      "$r23 \u003d new org.apache.commons.beanutils.converters.StringConverter"
    ]
  },
  "7409": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r84 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7409)",
    "preds": [
      "$r84 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$1\u003e",
      "$r16 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r77 :\u003d @caughtexception",
      "r17 \u003d newarray (java.lang.Object)[1]",
      "$r20 \u003d new java.lang.Short",
      "$r78 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $r20 \u003d new java.lang.Short]",
      "r17[0] \u003d \"java.lang.Short\""
    ]
  },
  "21746": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r1 \u003d new org.apache.commons.beanutils.converters.ClassConverter",
    "preds": [
      "z0 :\u003d @parameter0: boolean",
      "r0 :\u003d @this: org.apache.commons.beanutils.ConvertUtilsBean"
    ],
    "succs": [
      "specialinvoke $r1.\u003corg.apache.commons.beanutils.converters.ClassConverter: void \u003cinit\u003e()\u003e()",
      "$r1 \u003d new org.apache.commons.beanutils.converters.ClassConverter",
      "specialinvoke $r1.\u003corg.apache.commons.beanutils.converters.ClassConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)"
    ]
  },
  "8434": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $r70 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8432)",
    "preds": [
      "$r70 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$7\u003e",
      "if $z6 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8430)"
    ],
    "succs": [
      "$z7 \u003d virtualinvoke $r70.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "r29[0] \u003d \"java.math.BigDecimal\"",
      "goto [?\u003d $z7 \u003d virtualinvoke $r70.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]",
      "r29 \u003d newarray (java.lang.Object)[1]",
      "$r40 \u003d new java.lang.NoClassDefFoundError",
      "$r39 :\u003d @caughtexception"
    ]
  },
  "7411": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r84 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7409)",
    "preds": [
      "$r84 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$1\u003e",
      "$r16 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r77 :\u003d @caughtexception",
      "r17 \u003d newarray (java.lang.Object)[1]",
      "$r20 \u003d new java.lang.Short",
      "$r78 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $r20 \u003d new java.lang.Short]",
      "r17[0] \u003d \"java.lang.Short\""
    ]
  },
  "8436": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z7 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8436)",
    "preds": [
      "$z7 \u003d virtualinvoke $r70.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)",
      "goto [?\u003d $z7 \u003d virtualinvoke $r70.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r1)]"
    ],
    "succs": [
      "specialinvoke $r32.\u003cnet.sf.ezmorph.MorphException: void \u003cinit\u003e(java.lang.String)\u003e(\"Must specify a Number subclass\")",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "goto [?\u003d (branch)]",
      "$r32 \u003d new net.sf.ezmorph.MorphException"
    ]
  },
  "21749": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r2 \u003d new org.apache.commons.beanutils.converters.DateConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Class;\", $r1)",
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/lang/Class;\", $r1)]",
      "specialinvoke $r1.\u003corg.apache.commons.beanutils.converters.ClassConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)"
    ],
    "succs": [
      "specialinvoke $r2.\u003corg.apache.commons.beanutils.converters.DateConverter: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r2.\u003corg.apache.commons.beanutils.converters.DateConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "$r2 \u003d new org.apache.commons.beanutils.converters.DateConverter"
    ]
  },
  "8438": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
    "preds": [
      "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8397)",
      "if r1 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "goto [?\u003d (branch)]",
      "if $z1 \u003d\u003d 0 goto $r65 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$2\u003e",
      "if $z5 \u003d\u003d 0 goto $r69 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$6\u003e",
      "if r1 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "if r1 !\u003d $r5 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8389)",
      "if r1 !\u003d $r7 goto $r63 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$0\u003e",
      "if $z6 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8430)",
      "if $z4 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8419)",
      "if r1 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "if $z3 \u003d\u003d 0 goto $r67 \u003d \u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class class$4\u003e",
      "if $z2 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8408)",
      "if r1 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
      "if $z7 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8436)"
    ],
    "succs": [
      "if $z8 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8440)",
      "goto [?\u003d r0.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e \u003d r1]",
      "$z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "r0.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e \u003d r1"
    ]
  },
  "7415": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r85 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7415)",
    "preds": [
      "$r22 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r85 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$2\u003e"
    ],
    "succs": [
      "r23[0] \u003d \"java.lang.Integer\"",
      "$r75 \u003d new java.lang.NoClassDefFoundError",
      "r23 \u003d newarray (java.lang.Object)[1]",
      "$r26 \u003d new java.lang.Integer",
      "goto [?\u003d $r26 \u003d new java.lang.Integer]",
      "$r74 :\u003d @caughtexception"
    ]
  },
  "21752": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r3 \u003d new org.apache.commons.beanutils.converters.CalendarConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/util/Date;\", $r2)",
      "specialinvoke $r2.\u003corg.apache.commons.beanutils.converters.DateConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/util/Date;\", $r2)]"
    ],
    "succs": [
      "$r3 \u003d new org.apache.commons.beanutils.converters.CalendarConverter",
      "specialinvoke $r3.\u003corg.apache.commons.beanutils.converters.CalendarConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "specialinvoke $r3.\u003corg.apache.commons.beanutils.converters.CalendarConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "8440": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void \u003cinit\u003e(java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z8 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8440)",
    "preds": [
      "$z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)",
      "if r33 !\u003d null goto $z8 \u003d virtualinvoke r1.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r33)"
    ],
    "succs": [
      "$r34 \u003d new net.sf.ezmorph.MorphException",
      "goto [?\u003d r0.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e \u003d r1]",
      "$r35 \u003d new java.lang.StringBuffer",
      "r0.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e \u003d r1"
    ]
  },
  "7417": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r85 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7415)",
    "preds": [
      "$r22 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r85 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$2\u003e"
    ],
    "succs": [
      "r23[0] \u003d \"java.lang.Integer\"",
      "$r75 \u003d new java.lang.NoClassDefFoundError",
      "r23 \u003d newarray (java.lang.Object)[1]",
      "$r26 \u003d new java.lang.Integer",
      "goto [?\u003d $r26 \u003d new java.lang.Integer]",
      "$r74 :\u003d @caughtexception"
    ]
  },
  "21755": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r4 \u003d new org.apache.commons.beanutils.converters.FileConverter",
    "preds": [
      "specialinvoke $r3.\u003corg.apache.commons.beanutils.converters.CalendarConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/util/Calendar;\", $r3)]",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/util/Calendar;\", $r3)"
    ],
    "succs": [
      "$r4 \u003d new org.apache.commons.beanutils.converters.FileConverter",
      "specialinvoke $r4.\u003corg.apache.commons.beanutils.converters.FileConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "specialinvoke $r4.\u003corg.apache.commons.beanutils.converters.FileConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "7421": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r86 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7421)",
    "preds": [
      "$r86 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$3\u003e",
      "$r28 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r29[0] \u003d \"java.lang.Long\"",
      "$r71 :\u003d @caughtexception",
      "$r72 \u003d new java.lang.NoClassDefFoundError",
      "r29 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $r32 \u003d new java.lang.Long]",
      "$r32 \u003d new java.lang.Long"
    ]
  },
  "21758": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r5 \u003d new org.apache.commons.beanutils.converters.SqlDateConverter",
    "preds": [
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/io/File;\", $r4)]",
      "specialinvoke $r4.\u003corg.apache.commons.beanutils.converters.FileConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/io/File;\", $r4)"
    ],
    "succs": [
      "specialinvoke $r5.\u003corg.apache.commons.beanutils.converters.SqlDateConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "$r5 \u003d new org.apache.commons.beanutils.converters.SqlDateConverter",
      "specialinvoke $r5.\u003corg.apache.commons.beanutils.converters.SqlDateConverter: void \u003cinit\u003e()\u003e()"
    ]
  },
  "7423": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r86 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7421)",
    "preds": [
      "$r86 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$3\u003e",
      "$r28 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r29[0] \u003d \"java.lang.Long\"",
      "$r71 :\u003d @caughtexception",
      "$r72 \u003d new java.lang.NoClassDefFoundError",
      "r29 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $r32 \u003d new java.lang.Long]",
      "$r32 \u003d new java.lang.Long"
    ]
  },
  "21761": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r6 \u003d new org.apache.commons.beanutils.converters.SqlTimeConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/sql/Date;\", $r5)",
      "specialinvoke $r5.\u003corg.apache.commons.beanutils.converters.SqlDateConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/sql/Date;\", $r5)]"
    ],
    "succs": [
      "$r6 \u003d new org.apache.commons.beanutils.converters.SqlTimeConverter",
      "specialinvoke $r6.\u003corg.apache.commons.beanutils.converters.SqlTimeConverter: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r6.\u003corg.apache.commons.beanutils.converters.SqlTimeConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)"
    ]
  },
  "7427": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r87 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7427)",
    "preds": [
      "$r87 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$4\u003e",
      "$r34 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r35 \u003d newarray (java.lang.Object)[1]",
      "$r68 :\u003d @caughtexception",
      "$r38 \u003d new java.lang.Float",
      "r35[0] \u003d \"java.lang.Float\"",
      "goto [?\u003d $r38 \u003d new java.lang.Float]",
      "$r69 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "21764": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r7 \u003d new org.apache.commons.beanutils.converters.SqlTimestampConverter",
    "preds": [
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/sql/Time;\", $r6)",
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/sql/Time;\", $r6)]",
      "specialinvoke $r6.\u003corg.apache.commons.beanutils.converters.SqlTimeConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)"
    ],
    "succs": [
      "specialinvoke $r7.\u003corg.apache.commons.beanutils.converters.SqlTimestampConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "specialinvoke $r7.\u003corg.apache.commons.beanutils.converters.SqlTimestampConverter: void \u003cinit\u003e()\u003e()",
      "$r7 \u003d new org.apache.commons.beanutils.converters.SqlTimestampConverter"
    ]
  },
  "7429": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r87 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7427)",
    "preds": [
      "$r87 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$4\u003e",
      "$r34 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r35 \u003d newarray (java.lang.Object)[1]",
      "$r68 :\u003d @caughtexception",
      "$r38 \u003d new java.lang.Float",
      "r35[0] \u003d \"java.lang.Float\"",
      "goto [?\u003d $r38 \u003d new java.lang.Float]",
      "$r69 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "21767": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerOther(boolean)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r8 \u003d new org.apache.commons.beanutils.converters.URLConverter",
    "preds": [
      "specialinvoke $r7.\u003corg.apache.commons.beanutils.converters.SqlTimestampConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)",
      "goto [?\u003d specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/sql/Timestamp;\", $r7)]",
      "specialinvoke r0.\u003corg.apache.commons.beanutils.ConvertUtilsBean: void register(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(class \"Ljava/sql/Timestamp;\", $r7)"
    ],
    "succs": [
      "$r8 \u003d new org.apache.commons.beanutils.converters.URLConverter",
      "specialinvoke $r8.\u003corg.apache.commons.beanutils.converters.URLConverter: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r8.\u003corg.apache.commons.beanutils.converters.URLConverter: void \u003cinit\u003e(java.lang.Object)\u003e(null)"
    ]
  },
  "7433": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r88 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7433)",
    "preds": [
      "$r88 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$5\u003e",
      "$r40 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r66 \u003d new java.lang.NoClassDefFoundError",
      "r41[0] \u003d \"java.lang.Double\"",
      "$r65 :\u003d @caughtexception",
      "$r44 \u003d new java.lang.Double",
      "goto [?\u003d $r44 \u003d new java.lang.Double]",
      "r41 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "4362": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r1 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
    "preds": [
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e"
    ],
    "succs": [
      "$r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
      "return",
      "if $r2 !\u003d null goto $r113 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e"
    ]
  },
  "7435": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r88 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7433)",
    "preds": [
      "$r88 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$5\u003e",
      "$r40 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r66 \u003d new java.lang.NoClassDefFoundError",
      "r41[0] \u003d \"java.lang.Double\"",
      "$r65 :\u003d @caughtexception",
      "$r44 \u003d new java.lang.Double",
      "goto [?\u003d $r44 \u003d new java.lang.Double]",
      "r41 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "4364": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r2 !\u003d null goto $r113 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
    "preds": [
      "$r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
      "if $r1 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e"
    ],
    "succs": [
      "$r113 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"null\", $r113)",
      "$r113 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper$Null\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e \u003d $r113"
    ]
  },
  "7439": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r89 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7439)",
    "preds": [
      "$r46 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r89 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$6\u003e"
    ],
    "succs": [
      "r47[0] \u003d \"java.math.BigInteger\"",
      "$r50 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e",
      "$r63 \u003d new java.lang.NoClassDefFoundError",
      "$r62 :\u003d @caughtexception",
      "r47 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $r50 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e]"
    ]
  },
  "4367": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r3 !\u003d null goto $r114 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e",
    "preds": [
      "$r3 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"null\", $r113)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e \u003d $r114",
      "$r114 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Integer\")",
      "$r114 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"int\", $r114)"
    ]
  },
  "7441": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r89 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7439)",
    "preds": [
      "$r46 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r89 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$6\u003e"
    ],
    "succs": [
      "r47[0] \u003d \"java.math.BigInteger\"",
      "$r50 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e",
      "$r63 \u003d new java.lang.NoClassDefFoundError",
      "$r62 :\u003d @caughtexception",
      "r47 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $r50 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e]"
    ]
  },
  "4370": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r4 !\u003d null goto $r115 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e",
    "preds": [
      "$r4 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"int\", $r114)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e \u003d $r115",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"float\", $r115)",
      "$r115 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e",
      "$r115 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Float\")"
    ]
  },
  "7445": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r90 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7445)",
    "preds": [
      "$r52 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r90 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$7\u003e"
    ],
    "succs": [
      "$r59 :\u003d @caughtexception",
      "r53[0] \u003d \"java.math.BigDecimal\"",
      "r53 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $r56 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e]",
      "$r56 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e",
      "$r60 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "4373": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r5 !\u003d null goto $r116 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e",
    "preds": [
      "$r5 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"float\", $r115)"
    ],
    "succs": [
      "$r116 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Double\")",
      "$r116 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e \u003d $r116",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"double\", $r116)"
    ]
  },
  "7447": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectArrayMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r90 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7445)",
    "preds": [
      "$r52 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r90 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$7\u003e"
    ],
    "succs": [
      "$r59 :\u003d @caughtexception",
      "r53[0] \u003d \"java.math.BigDecimal\"",
      "r53 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d $r56 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e]",
      "$r56 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e",
      "$r60 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "4376": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r6 !\u003d null goto $r117 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e",
    "preds": [
      "$r6 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"double\", $r116)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"long\", $r117)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e \u003d $r117",
      "$r117 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Long\")",
      "$r117 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e"
    ]
  },
  "4379": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r7 !\u003d null goto $r118 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"long\", $r117)",
      "$r7 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e \u003d $r118",
      "$r118 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e",
      "$r118 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Short\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"short\", $r118)"
    ]
  },
  "7454": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r71 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7455)",
    "preds": [
      "$r71 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$0\u003e",
      "$r6 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r7 \u003d newarray (java.lang.Object)[1]",
      "$r68 :\u003d @caughtexception",
      "goto [?\u003d $r10 \u003d new java.lang.Byte]",
      "r7[0] \u003d \"java.lang.Byte\"",
      "$r10 \u003d new java.lang.Byte",
      "$r69 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "4382": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r8 !\u003d null goto $r119 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e",
    "preds": [
      "$r8 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"short\", $r118)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"char\", $r119)",
      "$r119 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e \u003d $r119",
      "$r119 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Character\")"
    ]
  },
  "7457": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r71 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7455)",
    "preds": [
      "$r71 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$0\u003e",
      "$r6 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r7 \u003d newarray (java.lang.Object)[1]",
      "$r68 :\u003d @caughtexception",
      "goto [?\u003d $r10 \u003d new java.lang.Byte]",
      "r7[0] \u003d \"java.lang.Byte\"",
      "$r10 \u003d new java.lang.Byte",
      "$r69 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "4385": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r9 !\u003d null goto $r120 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"char\", $r119)",
      "$r9 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"byte\", $r120)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e \u003d $r120",
      "$r120 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Byte\")",
      "$r120 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e"
    ]
  },
  "7459": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r72 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7460)",
    "preds": [
      "$r72 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$1\u003e",
      "$r11 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r12 \u003d newarray (java.lang.Object)[1]",
      "r12[0] \u003d \"java.lang.Short\"",
      "$r66 \u003d new java.lang.NoClassDefFoundError",
      "$r65 :\u003d @caughtexception",
      "goto [?\u003d $r15 \u003d new java.lang.Short]",
      "$r15 \u003d new java.lang.Short"
    ]
  },
  "4388": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r10 !\u003d null goto $r121 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"byte\", $r120)",
      "$r10 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e \u003d $r121",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"boolean\", $r121)",
      "$r121 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Boolean\")",
      "$r121 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e"
    ]
  },
  "21796": {
    "className": "org.apache.commons.beanutils.ConvertUtilsBean",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtilsBean: void registerArrayConverter(java.lang.Class,org.apache.commons.beanutils.Converter,boolean,int)\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r3 \u003d new org.apache.commons.beanutils.converters.ArrayConverter",
    "preds": [
      "$r1 \u003d staticinvoke \u003cjava.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)\u003e(r0, 0)",
      "r2 \u003d virtualinvoke $r1.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()"
    ],
    "succs": [
      "$r3 \u003d new org.apache.commons.beanutils.converters.ArrayConverter",
      "$r6 \u003d new org.apache.commons.beanutils.converters.ArrayConverter",
      "specialinvoke $r3.\u003corg.apache.commons.beanutils.converters.ArrayConverter: void \u003cinit\u003e(java.lang.Class,org.apache.commons.beanutils.Converter,int)\u003e(r2, r4, i0)",
      "specialinvoke $r6.\u003corg.apache.commons.beanutils.converters.ArrayConverter: void \u003cinit\u003e(java.lang.Class,org.apache.commons.beanutils.Converter)\u003e(r2, r4)"
    ]
  },
  "7462": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r72 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7460)",
    "preds": [
      "$r72 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$1\u003e",
      "$r11 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "r12 \u003d newarray (java.lang.Object)[1]",
      "r12[0] \u003d \"java.lang.Short\"",
      "$r66 \u003d new java.lang.NoClassDefFoundError",
      "$r65 :\u003d @caughtexception",
      "goto [?\u003d $r15 \u003d new java.lang.Short]",
      "$r15 \u003d new java.lang.Short"
    ]
  },
  "4390": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r11 !\u003d null goto $r122 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"boolean\", $r121)",
      "$r11 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e"
    ],
    "succs": [
      "$r122 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Number\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"number\", $r122)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e \u003d $r122",
      "$r122 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Number\u003e"
    ]
  },
  "7464": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r73 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7465)",
    "preds": [
      "$r73 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$2\u003e",
      "$r16 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "goto [?\u003d $r20 \u003d new java.lang.Integer]",
      "r17 \u003d newarray (java.lang.Object)[1]",
      "r17[0] \u003d \"java.lang.Integer\"",
      "$r63 \u003d new java.lang.NoClassDefFoundError",
      "$r20 \u003d new java.lang.Integer",
      "$r62 :\u003d @caughtexception"
    ]
  },
  "11561": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r46 !\u003d null goto $r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
    "preds": [
      "virtualinvoke $r60.\u003cjava.util.ArrayList: boolean addAll(java.util.Collection)\u003e(r47)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11558)]",
      "if r0 !\u003d null goto $i1 \u003d lengthof r0",
      "if $i1 \u003e 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11484)",
      "if r46 \u003d\u003d null goto (branch)",
      "l25 \u003d l26"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d (branch)]",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "$r45 :\u003d @caughtexception",
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "$r42 :\u003d @caughtexception",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()"
    ]
  },
  "4393": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r12 !\u003d null goto $r123 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r12 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"number\", $r122)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"object\", $r123)",
      "$r123 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e \u003d $r123",
      "$r123 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Object\u003e"
    ]
  },
  "11563": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r34 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11563)",
    "preds": [
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "goto [?\u003d (branch)]",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r45 :\u003d @caughtexception",
      "$r42 :\u003d @caughtexception",
      "i38 \u003d 0",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "virtualinvoke r34.\u003cjava.util.BitSet: void clear()\u003e()",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11570)]",
      "return r55"
    ]
  },
  "7467": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r73 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7465)",
    "preds": [
      "$r73 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$2\u003e",
      "$r16 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "goto [?\u003d $r20 \u003d new java.lang.Integer]",
      "r17 \u003d newarray (java.lang.Object)[1]",
      "r17[0] \u003d \"java.lang.Integer\"",
      "$r63 \u003d new java.lang.NoClassDefFoundError",
      "$r20 \u003d new java.lang.Integer",
      "$r62 :\u003d @caughtexception"
    ]
  },
  "7469": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r74 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7470)",
    "preds": [
      "$r74 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$3\u003e",
      "$r21 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r59 :\u003d @caughtexception",
      "goto [?\u003d $r25 \u003d new java.lang.Long]",
      "r22[0] \u003d \"java.lang.Long\"",
      "$r25 \u003d new java.lang.Long",
      "r22 \u003d newarray (java.lang.Object)[1]",
      "$r60 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "4397": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r13 !\u003d null goto $r124 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e",
    "preds": [
      "$r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"object\", $r123)"
    ],
    "succs": [
      "$r124 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e",
      "$r124 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.math.BigInteger\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"big-int\", $r124)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e \u003d $r124"
    ]
  },
  "7472": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r74 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7470)",
    "preds": [
      "$r74 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$3\u003e",
      "$r21 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r59 :\u003d @caughtexception",
      "goto [?\u003d $r25 \u003d new java.lang.Long]",
      "r22[0] \u003d \"java.lang.Long\"",
      "$r25 \u003d new java.lang.Long",
      "r22 \u003d newarray (java.lang.Object)[1]",
      "$r60 \u003d new java.lang.NoClassDefFoundError"
    ]
  },
  "4400": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r14 !\u003d null goto $r125 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e",
    "preds": [
      "$r14 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"big-int\", $r124)"
    ],
    "succs": [
      "$r125 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.math.BigDecimal\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e \u003d $r125",
      "$r125 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"big-decimal\", $r125)"
    ]
  },
  "7474": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r75 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7475)",
    "preds": [
      "$r75 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$4\u003e",
      "$r26 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r30 \u003d new java.lang.Float",
      "r27[0] \u003d \"java.lang.Float\"",
      "$r56 :\u003d @caughtexception",
      "$r57 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $r30 \u003d new java.lang.Float]",
      "r27 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "4402": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r15 !\u003d null goto $r126 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e",
    "preds": [
      "$r15 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"big-decimal\", $r125)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"string-buffer\", $r126)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e \u003d $r126",
      "$r126 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$StringBuffer\u003e",
      "$r126 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.StringBuffer\")"
    ]
  },
  "11571": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r34 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11563)",
    "preds": [
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "goto [?\u003d (branch)]",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r45 :\u003d @caughtexception",
      "$r42 :\u003d @caughtexception",
      "i38 \u003d 0",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "virtualinvoke r34.\u003cjava.util.BitSet: void clear()\u003e()",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11570)]",
      "return r55"
    ]
  },
  "11572": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r34 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11563)",
    "preds": [
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "goto [?\u003d (branch)]",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r45 :\u003d @caughtexception",
      "$r42 :\u003d @caughtexception",
      "i38 \u003d 0",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "virtualinvoke r34.\u003cjava.util.BitSet: void clear()\u003e()",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11570)]",
      "return r55"
    ]
  },
  "11573": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r34 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11563)",
    "preds": [
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "goto [?\u003d (branch)]",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r45 :\u003d @caughtexception",
      "$r42 :\u003d @caughtexception",
      "i38 \u003d 0",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "virtualinvoke r34.\u003cjava.util.BitSet: void clear()\u003e()",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11570)]",
      "return r55"
    ]
  },
  "7477": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r75 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7475)",
    "preds": [
      "$r75 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$4\u003e",
      "$r26 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r30 \u003d new java.lang.Float",
      "r27[0] \u003d \"java.lang.Float\"",
      "$r56 :\u003d @caughtexception",
      "$r57 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d $r30 \u003d new java.lang.Float]",
      "r27 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "4405": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r16 !\u003d null goto $r127 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"string-buffer\", $r126)",
      "$r16 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e"
    ],
    "succs": [
      "$r127 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e \u003d $r127",
      "$r127 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.String\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"string\", $r127)"
    ]
  },
  "11575": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r34 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11563)",
    "preds": [
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "goto [?\u003d (branch)]",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r45 :\u003d @caughtexception",
      "$r42 :\u003d @caughtexception",
      "i38 \u003d 0",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "virtualinvoke r34.\u003cjava.util.BitSet: void clear()\u003e()",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11570)]",
      "return r55"
    ]
  },
  "7479": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r76 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7480)",
    "preds": [
      "$r76 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$5\u003e",
      "$r31 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r35 \u003d new java.lang.Double",
      "r32 \u003d newarray (java.lang.Object)[1]",
      "$r54 \u003d new java.lang.NoClassDefFoundError",
      "$r53 :\u003d @caughtexception",
      "goto [?\u003d $r35 \u003d new java.lang.Double]",
      "r32[0] \u003d \"java.lang.Double\""
    ]
  },
  "11576": {
    "className": "com.thoughtworks.xstream.core.util.DependencyInjectionFactory",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[],java.util.BitSet)\u003e",
    "stmt": "if r34 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11563)",
    "preds": [
      "r55 \u003d virtualinvoke r46.\u003cjava.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])\u003e($r33)",
      "goto [?\u003d (branch)]",
      "$r33 \u003d virtualinvoke $r60.\u003cjava.util.ArrayList: java.lang.Object[] toArray()\u003e()",
      "r55 \u003d virtualinvoke r3.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r45 :\u003d @caughtexception",
      "$r42 :\u003d @caughtexception",
      "i38 \u003d 0",
      "r56 \u003d $r41",
      "r56 \u003d $r44",
      "r56 \u003d $r45",
      "$r44 :\u003d @caughtexception",
      "r56 \u003d $r42",
      "$r41 :\u003d @caughtexception",
      "virtualinvoke r34.\u003cjava.util.BitSet: void clear()\u003e()",
      "r56 \u003d virtualinvoke $r43.\u003cjava.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11570)]",
      "return r55"
    ]
  },
  "4408": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r17 !\u003d null goto $r128 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
    "preds": [
      "$r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"string\", $r127)"
    ],
    "succs": [
      "$r128 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Class\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e \u003d $r128",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"java-class\", $r128)",
      "$r128 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e"
    ]
  },
  "7482": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r76 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7480)",
    "preds": [
      "$r76 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$5\u003e",
      "$r31 \u003d new net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$r35 \u003d new java.lang.Double",
      "r32 \u003d newarray (java.lang.Object)[1]",
      "$r54 \u003d new java.lang.NoClassDefFoundError",
      "$r53 :\u003d @caughtexception",
      "goto [?\u003d $r35 \u003d new java.lang.Double]",
      "r32[0] \u003d \"java.lang.Double\""
    ]
  },
  "7484": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r77 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7485)",
    "preds": [
      "$r36 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r77 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$6\u003e"
    ],
    "succs": [
      "$r51 \u003d new java.lang.NoClassDefFoundError",
      "$r40 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e",
      "goto [?\u003d $r40 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e]",
      "r37[0] \u003d \"java.math.BigInteger\"",
      "$r50 :\u003d @caughtexception",
      "r37 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "4412": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r18 !\u003d null goto $r129 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Method\u003e",
    "preds": [
      "$r18 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Method\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"java-class\", $r128)"
    ],
    "succs": [
      "$r129 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.reflect.Method\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"method\", $r129)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Method\u003e \u003d $r129",
      "$r129 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Method\u003e"
    ]
  },
  "7487": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r77 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7485)",
    "preds": [
      "$r36 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r77 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$6\u003e"
    ],
    "succs": [
      "$r51 \u003d new java.lang.NoClassDefFoundError",
      "$r40 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e",
      "goto [?\u003d $r40 \u003d \u003cjava.math.BigInteger: java.math.BigInteger ZERO\u003e]",
      "r37[0] \u003d \"java.math.BigInteger\"",
      "$r50 :\u003d @caughtexception",
      "r37 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "4415": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r19 !\u003d null goto $r130 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Constructor\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"method\", $r129)",
      "$r19 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Constructor\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Constructor\u003e \u003d $r130",
      "$r130 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.reflect.Constructor\")",
      "$r130 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Constructor\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"constructor\", $r130)"
    ]
  },
  "7489": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r78 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7490)",
    "preds": [
      "$r41 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r78 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$7\u003e"
    ],
    "succs": [
      "$r45 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e",
      "$r48 \u003d new java.lang.NoClassDefFoundError",
      "r42[0] \u003d \"java.math.BigDecimal\"",
      "goto [?\u003d $r45 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e]",
      "r42 \u003d newarray (java.lang.Object)[1]",
      "$r47 :\u003d @caughtexception"
    ]
  },
  "11585": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: void init()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11586)",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean is15()\u003e()",
      "r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map dictionaryEntries\u003e \u003d $r8"
    ],
    "succs": [
      "goto [?\u003d $r7 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldUtil fieldUtil\u003e]",
      "$r7 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldUtil fieldUtil\u003e",
      "$r3 \u003d virtualinvoke $r2.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "$r6 :\u003d @caughtexception",
      "$r2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"com.thoughtworks.xstream.converters.reflection.FieldUtil15\", 1)"
    ]
  },
  "4418": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r20 !\u003d null goto $r131 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Field\u003e",
    "preds": [
      "$r20 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Field\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"constructor\", $r130)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Field\u003e \u003d $r131",
      "$r131 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$reflect$Field\u003e",
      "$r131 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.reflect.Field\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"field\", $r131)"
    ]
  },
  "7492": {
    "className": "net.sf.ezmorph.MorphUtils",
    "methodSignature": "\u003cnet.sf.ezmorph.MorphUtils: void registerStandardObjectMorphers(net.sf.ezmorph.MorpherRegistry)\u003e",
    "stmt": "if $r78 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7490)",
    "preds": [
      "$r41 \u003d new net.sf.ezmorph.object.NumberMorpher",
      "$r78 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.lang.Class class$7\u003e"
    ],
    "succs": [
      "$r45 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e",
      "$r48 \u003d new java.lang.NoClassDefFoundError",
      "r42[0] \u003d \"java.math.BigDecimal\"",
      "goto [?\u003d $r45 \u003d \u003cnet.sf.ezmorph.MorphUtils: java.math.BigDecimal BIGDECIMAL_ZERO\u003e]",
      "r42 \u003d newarray (java.lang.Object)[1]",
      "$r47 :\u003d @caughtexception"
    ]
  },
  "11588": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: void init()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11586)",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean is15()\u003e()",
      "r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map dictionaryEntries\u003e \u003d $r8"
    ],
    "succs": [
      "goto [?\u003d $r7 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldUtil fieldUtil\u003e]",
      "$r7 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldUtil fieldUtil\u003e",
      "$r3 \u003d virtualinvoke $r2.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "$r6 :\u003d @caughtexception",
      "$r2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"com.thoughtworks.xstream.converters.reflection.FieldUtil15\", 1)"
    ]
  },
  "4420": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r21 !\u003d null goto $r132 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e",
    "preds": [
      "$r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"field\", $r131)"
    ],
    "succs": [
      "$r132 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"date\", $r132)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Date\u003e \u003d $r132",
      "$r132 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Date\")"
    ]
  },
  "11590": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: void init()\u003e",
    "stmt": "if $r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11590)",
    "preds": [
      "goto [?\u003d $r7 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldUtil fieldUtil\u003e]",
      "$r7 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldUtil fieldUtil\u003e",
      "$r6 :\u003d @caughtexception"
    ],
    "succs": [
      "specialinvoke $r9.\u003ccom.thoughtworks.xstream.converters.reflection.FieldUtil14: void \u003cinit\u003e()\u003e()",
      "$r9 \u003d new com.thoughtworks.xstream.converters.reflection.FieldUtil14",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11592)]",
      "return"
    ]
  },
  "4423": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r22 !\u003d null goto $r133 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"date\", $r132)",
      "$r22 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e"
    ],
    "succs": [
      "$r133 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.net.URI\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e \u003d $r133",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"uri\", $r133)",
      "$r133 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e"
    ]
  },
  "4426": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r23 !\u003d null goto $r134 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"uri\", $r133)",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e"
    ],
    "succs": [
      "$r134 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.net.URL\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"url\", $r134)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e \u003d $r134",
      "$r134 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e"
    ]
  },
  "11595": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)\u003e",
    "stmt": "if r4 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11597)",
    "preds": [
      "r4 \u003d virtualinvoke r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field fieldOrNull(java.lang.Class,java.lang.String,java.lang.Class)\u003e(r1, r2, r3)",
      "r3 :\u003d @parameter2: java.lang.Class"
    ],
    "succs": [
      "return r4",
      "$r6 \u003d virtualinvoke r1.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
      "$r5 \u003d new com.thoughtworks.xstream.converters.reflection.MissingFieldException"
    ]
  },
  "8525": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void setDefaultValue(java.lang.Number)\u003e",
    "stmt": "if r0 !\u003d null goto $r2 \u003d r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.Number",
      "r1 :\u003d @this: net.sf.ezmorph.object.NumberMorpher"
    ],
    "succs": [
      "$z0 \u003d virtualinvoke $r2.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r0)",
      "r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Number defaultValue\u003e \u003d r0",
      "goto [?\u003d r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Number defaultValue\u003e \u003d r0]",
      "$r2 \u003d r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e"
    ]
  },
  "4429": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r24 !\u003d null goto $r135 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e",
    "preds": [
      "$r24 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"url\", $r134)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"bit-set\", $r135)",
      "$r135 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e",
      "$r135 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.BitSet\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$BitSet\u003e \u003d $r135"
    ]
  },
  "11599": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field fieldOrNull(java.lang.Class,java.lang.String,java.lang.Class)\u003e",
    "stmt": "if r2 \u003d\u003d null goto $z0 \u003d 0",
    "preds": [
      "r3 :\u003d @parameter1: java.lang.String",
      "r2 :\u003d @parameter2: java.lang.Class"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$r6 \u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e(r1, $z0)",
      "$z0 \u003d 1",
      "goto [?\u003d $r6 \u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e(r1, $z0)]"
    ]
  },
  "8527": {
    "className": "net.sf.ezmorph.object.NumberMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.NumberMorpher: void setDefaultValue(java.lang.Number)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8527)",
    "preds": [
      "$z0 \u003d virtualinvoke $r2.\u003cjava.lang.Class: boolean isInstance(java.lang.Object)\u003e(r0)",
      "$r2 \u003d r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Class type\u003e"
    ],
    "succs": [
      "$r4 \u003d new java.lang.StringBuffer",
      "r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Number defaultValue\u003e \u003d r0",
      "goto [?\u003d r1.\u003cnet.sf.ezmorph.object.NumberMorpher: java.lang.Number defaultValue\u003e \u003d r0]",
      "$r3 \u003d new net.sf.ezmorph.MorphException"
    ]
  },
  "4432": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r25 !\u003d null goto $r136 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
    "preds": [
      "$r25 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"bit-set\", $r135)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"map\", $r136)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e \u003d $r136",
      "$r136 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "$r136 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Map\")"
    ]
  },
  "11602": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field fieldOrNull(java.lang.Class,java.lang.String,java.lang.Class)\u003e",
    "stmt": "if r2 \u003d\u003d null goto $r7 \u003d r3",
    "preds": [
      "$z0 \u003d 0",
      "$r6 \u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e(r1, $z0)",
      "goto [?\u003d $r6 \u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e(r1, $z0)]"
    ],
    "succs": [
      "$r7 \u003d r3",
      "$r7 \u003d $r8",
      "$r4 \u003d interfaceinvoke $r6.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e($r7)",
      "$r8 \u003d new com.thoughtworks.xstream.converters.reflection.FieldKey"
    ]
  },
  "4435": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r26 !\u003d null goto $r137 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"map\", $r136)",
      "$r26 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e \u003d $r137",
      "$r137 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r137 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Map$Entry\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"entry\", $r137)"
    ]
  },
  "4439": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r27 !\u003d null goto $r138 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Properties\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Properties\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"entry\", $r137)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"properties\", $r138)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Properties\u003e \u003d $r138",
      "$r138 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Properties\")",
      "$r138 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Properties\u003e"
    ]
  },
  "11610": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e",
    "stmt": "if r9 !\u003d null goto r10 \u003d specialinvoke r4.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry getDictionaryEntry(java.lang.Class)\u003e(r9)",
    "preds": [
      "$z2 \u003d virtualinvoke $r11.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(r9)",
      "if $z2 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "r10 \u003d specialinvoke r4.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry getDictionaryEntry(java.lang.Class)\u003e(r9)",
      "r10 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry OBJECT_DICTIONARY_ENTRY\u003e",
      "goto [?\u003d (branch)]",
      "if r10 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11614)"
    ]
  },
  "4442": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r28 !\u003d null goto $r139 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"properties\", $r138)",
      "$r28 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e"
    ],
    "succs": [
      "$r139 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e",
      "$r139 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.List\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e \u003d $r139",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"list\", $r139)"
    ]
  },
  "9563": {
    "className": "org.acegisecurity.GrantedAuthority",
    "methodSignature": "\u003corg.acegisecurity.GrantedAuthority: org.springframework.security.core.GrantedAuthority toSpring()\u003e",
    "stmt": "if r0 !\u003d $r1 goto $r2 \u003d new org.springframework.security.core.authority.SimpleGrantedAuthority",
    "preds": [
      "r0 :\u003d @this: org.acegisecurity.GrantedAuthority",
      "$r1 \u003d \u003chudson.security.SecurityRealm: org.acegisecurity.GrantedAuthority AUTHENTICATED_AUTHORITY\u003e"
    ],
    "succs": [
      "$r4 \u003d \u003chudson.security.SecurityRealm: org.springframework.security.core.GrantedAuthority AUTHENTICATED_AUTHORITY2\u003e",
      "$r2 \u003d new org.springframework.security.core.authority.SimpleGrantedAuthority",
      "return $r4",
      "$r3 \u003d interfaceinvoke r0.\u003corg.acegisecurity.GrantedAuthority: java.lang.String getAuthority()\u003e()"
    ]
  },
  "4445": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r29 !\u003d null goto $r140 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e",
    "preds": [
      "$r29 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"list\", $r139)"
    ],
    "succs": [
      "$r140 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Set\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"set\", $r140)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e \u003d $r140",
      "$r140 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e"
    ]
  },
  "9567": {
    "className": "org.acegisecurity.GrantedAuthority",
    "methodSignature": "\u003corg.acegisecurity.GrantedAuthority: java.util.Collection toSpring(org.acegisecurity.GrantedAuthority[])\u003e",
    "stmt": "if r0 \u003d\u003d null goto $r6 \u003d staticinvoke \u003cjava.util.Collections: java.util.Set emptySet()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: org.acegisecurity.GrantedAuthority[]"
    ],
    "succs": [
      "return $r6",
      "$r6 \u003d staticinvoke \u003cjava.util.Collections: java.util.Set emptySet()\u003e()",
      "$r2 \u003d staticinvoke \u003cjava.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])\u003e(r0)",
      "$r1 \u003d staticinvoke \u003corg.acegisecurity.GrantedAuthority$toSpring__14: java.util.function.Function bootstrap$()\u003e()"
    ]
  },
  "4448": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r30 !\u003d null goto $r141 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e",
    "preds": [
      "$r30 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"set\", $r140)"
    ],
    "succs": [
      "$r141 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e \u003d $r141",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"sorted-set\", $r141)",
      "$r141 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.SortedSet\")"
    ]
  },
  "4451": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r31 !\u003d null goto $r142 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$LinkedList\u003e",
    "preds": [
      "$r31 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$LinkedList\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"sorted-set\", $r141)"
    ],
    "succs": [
      "$r142 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$LinkedList\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"linked-list\", $r142)",
      "$r142 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.LinkedList\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$LinkedList\u003e \u003d $r142"
    ]
  },
  "4454": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r32 !\u003d null goto $r143 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Vector\u003e",
    "preds": [
      "$r32 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Vector\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"linked-list\", $r142)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Vector\u003e \u003d $r143",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"vector\", $r143)",
      "$r143 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Vector\")",
      "$r143 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Vector\u003e"
    ]
  },
  "11623": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e",
    "stmt": "if r5 !\u003d null goto r13 \u003d r5",
    "preds": [
      "r5 \u003d specialinvoke r4.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry getDictionaryEntry(java.lang.Class)\u003e(r12)",
      "entermonitor r4"
    ],
    "succs": [
      "exitmonitor r4",
      "r13 \u003d r5",
      "$r6 \u003d r4.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map dictionaryEntries\u003e",
      "interfaceinvoke $r6.\u003cjava.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e(r12, r13)",
      "$r8 :\u003d @caughtexception"
    ]
  },
  "11624": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e",
    "stmt": "goto [?\u003d exitmonitor r4]",
    "preds": [
      "$r6 \u003d r4.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map dictionaryEntries\u003e",
      "interfaceinvoke $r6.\u003cjava.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e(r12, r13)"
    ],
    "succs": [
      "exitmonitor r4",
      "$r8 :\u003d @caughtexception",
      "goto [?\u003d r10 \u003d r13]"
    ]
  },
  "4457": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r33 !\u003d null goto $r144 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeMap\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"vector\", $r143)",
      "$r33 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeMap\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeMap\u003e \u003d $r144",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"tree-map\", $r144)",
      "$r144 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.TreeMap\")",
      "$r144 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeMap\u003e"
    ]
  },
  "11627": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto $r14 \u003d virtualinvoke r10.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry: java.util.Map getKeyedByFieldName()\u003e()",
    "preds": [
      "$z0 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: boolean hasNext()\u003e()",
      "if $z0 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "$r14 \u003d virtualinvoke r10.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry: java.util.Map getKeyedByFieldKey()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11628)]",
      "$r14 \u003d virtualinvoke r10.\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry: java.util.Map getKeyedByFieldName()\u003e()",
      "return $r14"
    ]
  },
  "4460": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r34 !\u003d null goto $r145 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"tree-map\", $r144)",
      "$r34 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e"
    ],
    "succs": [
      "$r145 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.TreeSet\")",
      "$r145 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e \u003d $r145",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"tree-set\", $r145)"
    ]
  },
  "9582": {
    "className": "org.acegisecurity.userdetails.UserDetails",
    "methodSignature": "\u003corg.acegisecurity.userdetails.UserDetails: java.lang.Object toSpringPrincipal(java.lang.Object)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9584)",
    "preds": [
      "$z0 \u003d r0 instanceof org.acegisecurity.userdetails.UserDetails",
      "r0 :\u003d @parameter0: java.lang.Object"
    ],
    "succs": [
      "$r2 \u003d interfaceinvoke $r1.\u003corg.acegisecurity.userdetails.UserDetails: org.springframework.security.core.userdetails.UserDetails toSpring()\u003e()",
      "return r0",
      "$r1 \u003d (org.acegisecurity.userdetails.UserDetails) r0"
    ]
  },
  "21871": {
    "className": "org.apache.commons.beanutils.WeakFastHashMap",
    "methodSignature": "\u003corg.apache.commons.beanutils.WeakFastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
    "preds": [
      "r3 :\u003d @parameter1: java.lang.Object",
      "$z0 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: boolean fast\u003e"
    ],
    "succs": [
      "entermonitor r0",
      "$r10 :\u003d @caughtexception",
      "$r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "$r6 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "entermonitor $r1"
    ]
  },
  "4463": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r35 !\u003d null goto $r146 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Hashtable\u003e",
    "preds": [
      "$r35 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Hashtable\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"tree-set\", $r145)"
    ],
    "succs": [
      "$r146 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Hashtable\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Hashtable\u003e \u003d $r146",
      "$r146 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Hashtable\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"hashtable\", $r146)"
    ]
  },
  "11633": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry buildDictionaryEntryForClass(java.lang.Class,com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry)\u003e",
    "stmt": "if $z0 !\u003d 0 goto $i0 \u003d lengthof r6",
    "preds": [
      "r6 \u003d virtualinvoke r5.\u003cjava.lang.Class: java.lang.reflect.Field[] getDeclaredFields()\u003e()",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()\u003e()"
    ],
    "succs": [
      "$i0 \u003d lengthof r6",
      "goto [?\u003d i10 \u003d 0]",
      "i8 \u003d $i0 \u003e\u003e 1",
      "i10 \u003d 0"
    ]
  },
  "21874": {
    "className": "org.apache.commons.beanutils.WeakFastHashMap",
    "methodSignature": "\u003corg.apache.commons.beanutils.WeakFastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
    "preds": [
      "r3 :\u003d @parameter1: java.lang.Object",
      "$z0 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: boolean fast\u003e"
    ],
    "succs": [
      "entermonitor r0",
      "$r10 :\u003d @caughtexception",
      "$r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "$r6 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "entermonitor $r1"
    ]
  },
  "11639": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry buildDictionaryEntryForClass(java.lang.Class,com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry)\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11640)",
    "preds": [
      "$z2 \u003d virtualinvoke $r12.\u003cjava.lang.String: boolean startsWith(java.lang.String)\u003e(\"$jacoco\")",
      "$r12 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: java.lang.String getName()\u003e()"
    ],
    "succs": [
      "goto [?\u003d i10 \u003d i10 + 1]",
      "goto [?\u003d $z3 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: boolean isAccessible()\u003e()]",
      "$z3 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: boolean isAccessible()\u003e()",
      "i10 \u003d i10 + 1"
    ]
  },
  "4471": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4472)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"singleton-set\", $r47)",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()"
    ],
    "succs": [
      "$r48 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"java.awt.Color\", 0)",
      "goto [?\u003d $r112 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")]",
      "$r112 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"awt-color\", $r48)"
    ]
  },
  "11640": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry buildDictionaryEntryForClass(java.lang.Class,com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry)\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11640)",
    "preds": [
      "$z2 \u003d virtualinvoke $r12.\u003cjava.lang.String: boolean startsWith(java.lang.String)\u003e(\"$jacoco\")",
      "$r12 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: java.lang.String getName()\u003e()"
    ],
    "succs": [
      "goto [?\u003d i10 \u003d i10 + 1]",
      "goto [?\u003d $z3 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: boolean isAccessible()\u003e()]",
      "$z3 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: boolean isAccessible()\u003e()",
      "i10 \u003d i10 + 1"
    ]
  },
  "11641": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry buildDictionaryEntryForClass(java.lang.Class,com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry)\u003e",
    "stmt": "if $z3 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11642)",
    "preds": [
      "goto [?\u003d $z3 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: boolean isAccessible()\u003e()]",
      "$z3 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: boolean isAccessible()\u003e()"
    ],
    "succs": [
      "virtualinvoke r20.\u003cjava.lang.reflect.Field: void setAccessible(boolean)\u003e(1)",
      "$r25 \u003d new com.thoughtworks.xstream.converters.reflection.FieldKey",
      "goto [?\u003d $r25 \u003d new com.thoughtworks.xstream.converters.reflection.FieldKey]"
    ]
  },
  "4477": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r112 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4477)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"awt-text-attribute\", $r50)",
      "goto [?\u003d $r112 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")]",
      "$r112 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"activation-data-flavor\", $r112)",
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable()\u003e()",
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable()\u003e()]"
    ]
  },
  "11646": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldDictionary",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldDictionary: com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry buildDictionaryEntryForClass(java.lang.Class,com.thoughtworks.xstream.converters.reflection.FieldDictionary$DictionaryEntry)\u003e",
    "stmt": "if $r18 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11646)",
    "preds": [
      "$r17 \u003d interfaceinvoke $r23.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e($r16)",
      "$r18 \u003d (java.lang.reflect.Field) $r17"
    ],
    "succs": [
      "$r21 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: java.lang.String getName()\u003e()",
      "$i5 \u003d $i4 \u0026 8",
      "goto [?\u003d $r21 \u003d virtualinvoke r20.\u003cjava.lang.reflect.Field: java.lang.String getName()\u003e()]",
      "$i4 \u003d virtualinvoke $r18.\u003cjava.lang.reflect.Field: int getModifiers()\u003e()"
    ]
  },
  "4479": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4480)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"activation-data-flavor\", $r112)",
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable()\u003e()",
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable()\u003e()]"
    ],
    "succs": [
      "goto [?\u003d $r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e]",
      "$r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"sql-timestamp\", $r51)",
      "$r51 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.sql.Timestamp\")"
    ]
  },
  "21890": {
    "className": "org.apache.commons.beanutils.WeakFastHashMap",
    "methodSignature": "\u003corg.apache.commons.beanutils.WeakFastHashMap: void clear()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
    "preds": [
      "$z0 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: boolean fast\u003e",
      "r0 :\u003d @this: org.apache.commons.beanutils.WeakFastHashMap"
    ],
    "succs": [
      "entermonitor r0",
      "$r3 \u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map createMap()\u003e()",
      "$r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "entermonitor $r1",
      "$r5 :\u003d @caughtexception"
    ]
  },
  "21891": {
    "className": "org.apache.commons.beanutils.WeakFastHashMap",
    "methodSignature": "\u003corg.apache.commons.beanutils.WeakFastHashMap: void clear()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
    "preds": [
      "$z0 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: boolean fast\u003e",
      "r0 :\u003d @this: org.apache.commons.beanutils.WeakFastHashMap"
    ],
    "succs": [
      "entermonitor r0",
      "$r3 \u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map createMap()\u003e()",
      "$r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "entermonitor $r1",
      "$r5 :\u003d @caughtexception"
    ]
  },
  "4484": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r54 !\u003d null goto $r147 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
    "preds": [
      "goto [?\u003d $r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e]",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"sql-date\", $r53)",
      "$r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e"
    ],
    "succs": [
      "$r147 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.io.File\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e \u003d $r147",
      "$r147 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"file\", $r147)"
    ]
  },
  "4487": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r55 !\u003d null goto $r148 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e",
    "preds": [
      "$r55 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"file\", $r147)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e \u003d $r148",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"locale\", $r148)",
      "$r148 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Locale\u003e",
      "$r148 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Locale\")"
    ]
  },
  "21895": {
    "className": "org.apache.commons.beanutils.WeakFastHashMap",
    "methodSignature": "\u003corg.apache.commons.beanutils.WeakFastHashMap: void clear()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
    "preds": [
      "$z0 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: boolean fast\u003e",
      "r0 :\u003d @this: org.apache.commons.beanutils.WeakFastHashMap"
    ],
    "succs": [
      "entermonitor r0",
      "$r3 \u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map createMap()\u003e()",
      "$r1 \u003d r0.\u003corg.apache.commons.beanutils.WeakFastHashMap: java.util.Map map\u003e",
      "entermonitor $r1",
      "$r5 :\u003d @caughtexception"
    ]
  },
  "4490": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r56 !\u003d null goto $r149 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"locale\", $r148)",
      "$r56 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e"
    ],
    "succs": [
      "$r149 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Calendar\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e \u003d $r149",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"gregorian-calendar\", $r149)",
      "$r149 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e"
    ]
  },
  "4493": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4494)",
    "preds": [
      "$z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(4)",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"gregorian-calendar\", $r149)"
    ],
    "succs": [
      "$r57 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.util.LinkedHashMap\")",
      "goto [?\u003d $z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)]",
      "$z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void aliasDynamically(java.lang.String,java.lang.String)\u003e(\"auth-subject\", \"javax.security.auth.Subject\")"
    ]
  },
  "4501": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $z3 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4502)",
    "preds": [
      "goto [?\u003d $z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)]",
      "$z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)\u003e(\"charset\", $r61)"
    ],
    "succs": [
      "$r62 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.util.concurrent.ConcurrentHashMap\")",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void aliasDynamically(java.lang.String,java.lang.String)\u003e(\"xml-duration\", \"javax.xml.datatype.Duration\")",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)]"
    ]
  },
  "11670": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldKey",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: void \u003cinit\u003e(java.lang.String,java.lang.Class,int)\u003e",
    "stmt": "if r1 !\u003d null goto (branch)",
    "preds": [
      "i0 :\u003d @parameter2: int",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "$r4 \u003d new java.lang.IllegalArgumentException",
      "goto [?\u003d $r4 \u003d new java.lang.IllegalArgumentException]",
      "if r2 !\u003d null goto r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e \u003d r1",
      "r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e \u003d r1"
    ]
  },
  "11671": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldKey",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: void \u003cinit\u003e(java.lang.String,java.lang.Class,int)\u003e",
    "stmt": "if r2 !\u003d null goto r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e \u003d r1",
    "preds": [
      "if r1 !\u003d null goto (branch)",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.Class declaringClass\u003e \u003d r2",
      "specialinvoke $r4.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"fieldName or declaringClass is null\")",
      "$r4 \u003d new java.lang.IllegalArgumentException",
      "r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e \u003d r1"
    ]
  },
  "14750": {
    "className": "com.thoughtworks.xstream.converters.extended.FontConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.FontConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper)\u003e",
    "stmt": "if r1 !\u003d null goto $r2 \u003d new com.thoughtworks.xstream.converters.extended.TextAttributeConverter",
    "preds": [
      "r0.\u003ccom.thoughtworks.xstream.converters.extended.FontConverter: com.thoughtworks.xstream.mapper.Mapper mapper\u003e \u003d r1",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "r0.\u003ccom.thoughtworks.xstream.converters.extended.FontConverter: com.thoughtworks.xstream.converters.SingleValueConverter textAttributeConverter\u003e \u003d null",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14752)]",
      "specialinvoke $r2.\u003ccom.thoughtworks.xstream.converters.extended.TextAttributeConverter: void \u003cinit\u003e()\u003e()",
      "$r2 \u003d new com.thoughtworks.xstream.converters.extended.TextAttributeConverter"
    ]
  },
  "8606": {
    "className": "net.sf.ezmorph.object.ClassMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.object.ClassMorpher: java.lang.Class morphsTo()\u003e",
    "stmt": "if $r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8604)",
    "preds": [
      "r6 :\u003d @this: net.sf.ezmorph.object.ClassMorpher",
      "$r7 \u003d \u003cnet.sf.ezmorph.object.ClassMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "return $r7",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8607)]",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception",
      "r0[0] \u003d \"java.lang.Class\""
    ]
  },
  "4513": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $z4 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4514)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"atomic-reference\", $r70)",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)]"
    ],
    "succs": [
      "$z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)\u003e(\"path\", $r71)",
      "$r71 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Path\")",
      "goto [?\u003d $z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)]"
    ]
  },
  "11681": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldKey",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: boolean equals(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d r1 goto $z0 \u003d r1 instanceof com.thoughtworks.xstream.converters.reflection.FieldKey",
    "preds": [
      "r1 :\u003d @parameter0: java.lang.Object",
      "r0 :\u003d @this: com.thoughtworks.xstream.converters.reflection.FieldKey"
    ],
    "succs": [
      "return 1",
      "if $z0 !\u003d 0 goto r2 \u003d (com.thoughtworks.xstream.converters.reflection.FieldKey) r1",
      "$z0 \u003d r1 instanceof com.thoughtworks.xstream.converters.reflection.FieldKey"
    ]
  },
  "11682": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldKey",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $z0 !\u003d 0 goto r2 \u003d (com.thoughtworks.xstream.converters.reflection.FieldKey) r1",
    "preds": [
      "if r0 !\u003d r1 goto $z0 \u003d r1 instanceof com.thoughtworks.xstream.converters.reflection.FieldKey",
      "$z0 \u003d r1 instanceof com.thoughtworks.xstream.converters.reflection.FieldKey"
    ],
    "succs": [
      "r2 \u003d (com.thoughtworks.xstream.converters.reflection.FieldKey) r1",
      "return 0",
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.Class declaringClass\u003e"
    ]
  },
  "4516": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $z5 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4517)",
    "preds": [
      "$z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)\u003e(\"path\", $r71)",
      "goto [?\u003d $z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)]"
    ],
    "succs": [
      "$r72 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.time.Clock$FixedClock\")",
      "$r111 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.lang.invoke.SerializedLambda\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"fixed-clock\", $r72)",
      "goto [?\u003d $r111 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.lang.invoke.SerializedLambda\")]"
    ]
  },
  "11684": {
    "className": "com.thoughtworks.xstream.converters.reflection.FieldKey",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $z1 !\u003d 0 goto $r6 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e",
    "preds": [
      "$r3 \u003d r2.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.Class declaringClass\u003e",
      "$z1 \u003d virtualinvoke $r4.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e($r3)"
    ],
    "succs": [
      "$r6 \u003d r0.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e",
      "return 0",
      "$r5 \u003d r2.\u003ccom.thoughtworks.xstream.converters.reflection.FieldKey: java.lang.String fieldName\u003e"
    ]
  },
  "22965": {
    "className": "org.apache.commons.beanutils.converters.BooleanConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.BooleanConverter: void \u003cinit\u003e(java.lang.Object)\u003e",
    "stmt": "if r3 !\u003d $r4 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22966)",
    "preds": [
      "$r4 \u003d \u003corg.apache.commons.beanutils.converters.BooleanConverter: java.lang.Object NO_DEFAULT\u003e",
      "r0.\u003corg.apache.commons.beanutils.converters.BooleanConverter: java.lang.String[] falseStrings\u003e \u003d $r2"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22968)]",
      "virtualinvoke r0.\u003corg.apache.commons.beanutils.converters.BooleanConverter: void setDefaultValue(java.lang.Object)\u003e(r3)",
      "return"
    ]
  },
  "11705": {
    "className": "com.thoughtworks.xstream.core.util.OrderRetainingMap",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap: void putAll(java.util.Map)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11708)",
    "preds": [
      "$z0 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: boolean hasNext()\u003e()",
      "goto [?\u003d $z0 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: boolean hasNext()\u003e()]",
      "r2 \u003d interfaceinvoke $r1.\u003cjava.util.Set: java.util.Iterator iterator()\u003e()"
    ],
    "succs": [
      "r4 \u003d (java.util.Map$Entry) $r3",
      "$r3 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: java.lang.Object next()\u003e()",
      "return"
    ]
  },
  "11712": {
    "className": "com.thoughtworks.xstream.core.util.OrderRetainingMap",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e",
    "stmt": "if i0 \u003e\u003d 0 goto $r4 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder\u003e",
    "preds": [
      "i0 \u003d virtualinvoke $r2.\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap$ArraySet: int lastIndexOf(java.lang.Object)\u003e(r1)",
      "$r2 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap: com.thoughtworks.xstream.core.util.OrderRetainingMap$ArraySet keyOrder\u003e"
    ],
    "succs": [
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder\u003e",
      "$r6 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap: com.thoughtworks.xstream.core.util.OrderRetainingMap$ArraySet keyOrder\u003e",
      "interfaceinvoke $r4.\u003cjava.util.List: java.lang.Object set(int,java.lang.Object)\u003e(i0, r3)",
      "virtualinvoke $r6.\u003ccom.thoughtworks.xstream.core.util.OrderRetainingMap$ArraySet: boolean add(java.lang.Object)\u003e(r1)"
    ]
  },
  "8649": {
    "className": "net.sf.ezmorph.array.ObjectArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: void setMorpher(net.sf.ezmorph.Morpher)\u003e",
    "stmt": "if r0 !\u003d null goto $r1 \u003d interfaceinvoke r0.\u003cnet.sf.ezmorph.Morpher: java.lang.Class morphsTo()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: net.sf.ezmorph.Morpher",
      "r2 :\u003d @this: net.sf.ezmorph.array.ObjectArrayMorpher"
    ],
    "succs": [
      "specialinvoke $r14.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"morpher can not be null\")",
      "$r1 \u003d interfaceinvoke r0.\u003cnet.sf.ezmorph.Morpher: java.lang.Class morphsTo()\u003e()",
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "$r14 \u003d new java.lang.IllegalArgumentException"
    ]
  },
  "8652": {
    "className": "net.sf.ezmorph.array.ObjectArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: void setMorpher(net.sf.ezmorph.Morpher)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto r2.\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: net.sf.ezmorph.Morpher morpher\u003e \u003d r0",
    "preds": [
      "$r1 \u003d interfaceinvoke r0.\u003cnet.sf.ezmorph.Morpher: java.lang.Class morphsTo()\u003e()",
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.Class: boolean isArray()\u003e()"
    ],
    "succs": [
      "$r13 \u003d new java.lang.IllegalArgumentException",
      "$r3 \u003d interfaceinvoke r0.\u003cnet.sf.ezmorph.Morpher: java.lang.Class morphsTo()\u003e()",
      "r2.\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: net.sf.ezmorph.Morpher morpher\u003e \u003d r0",
      "specialinvoke $r13.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"morpher target class can not be an array\")"
    ]
  },
  "4557": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupAliases()\u003e",
    "stmt": "if $r111 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4558)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(\"optional-long\", $r110)",
      "$r111 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.lang.invoke.SerializedLambda\")",
      "goto [?\u003d $r111 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.lang.invoke.SerializedLambda\")]"
    ],
    "succs": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void aliasDynamically(java.lang.String,java.lang.String)\u003e(\"serialized-lambda\", \"java.lang.invoke.SerializedLambda\")",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4560)]",
      "return"
    ]
  },
  "4561": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void aliasDynamically(java.lang.String,java.lang.String)\u003e",
    "stmt": "if r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4562)",
    "preds": [
      "r1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(r0)",
      "r0 :\u003d @parameter1: java.lang.String"
    ],
    "succs": [
      "virtualinvoke r2.\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e(r3, r1)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4564)]",
      "return"
    ]
  },
  "8661": {
    "className": "net.sf.ezmorph.array.ObjectArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: void setMorpher(net.sf.ezmorph.Morpher)\u003e",
    "stmt": "if $r21 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8659)",
    "preds": [
      "$r21 \u003d \u003cnet.sf.ezmorph.array.ObjectArrayMorpher: java.lang.Class class$0\u003e",
      "$r7 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "$r18 :\u003d @caughtexception",
      "$r19 \u003d new java.lang.NoClassDefFoundError",
      "r8[0] \u003d \"java.lang.Object\"",
      "goto [?\u003d $r7[0] \u003d $r21]",
      "$r7[0] \u003d $r21",
      "r8 \u003d newarray (java.lang.Object)[1]",
      "$r16 \u003d new java.lang.IllegalArgumentException",
      "$r15 :\u003d @caughtexception"
    ]
  },
  "4565": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r1 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e",
    "preds": [
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper\u003e"
    ],
    "succs": [
      "$r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e",
      "if $r2 !\u003d null goto $r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e",
      "return"
    ]
  },
  "8662": {
    "className": "net.sf.ezmorph.array.ObjectArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: void setMorpher(net.sf.ezmorph.Morpher)\u003e",
    "stmt": "goto [?\u003d $r7[0] \u003d $r21]",
    "preds": [
      "\u003cnet.sf.ezmorph.array.ObjectArrayMorpher: java.lang.Class class$0\u003e \u003d $r21",
      "$r21 \u003d staticinvoke \u003cjava.lang.Class: java.lang.Class forName(java.lang.String)\u003e($r10)"
    ],
    "succs": [
      "$r12 \u003d virtualinvoke $r11.\u003cjava.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])\u003e(\"morph\", $r7)",
      "$r15 :\u003d @caughtexception",
      "$r7[0] \u003d $r21"
    ]
  },
  "4567": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r2 !\u003d null goto $r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e",
    "preds": [
      "$r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e",
      "if $r1 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e"
    ],
    "succs": [
      "$r3 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "$r13 \u003d $r12",
      "$r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e",
      "$r12 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.HashMap\")"
    ]
  },
  "4568": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r3 !\u003d null goto $r15 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
    "preds": [
      "goto [?\u003d $r3 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e]",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "$r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashMap\u003e"
    ],
    "succs": [
      "$r14 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Map\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r13, $r15)",
      "$r15 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Map\u003e",
      "$r15 \u003d $r14"
    ]
  },
  "23003": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto (branch)",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.Class",
      "r45 :\u003d @parameter1: java.lang.Object"
    ],
    "succs": [
      "$r42 \u003d specialinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertToDefaultType(java.lang.Class,java.lang.Object)\u003e(r0, r45)",
      "return $r42",
      "$r46 \u003d null",
      "$r46 \u003d virtualinvoke r45.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "if r45 !\u003d null goto $r46 \u003d virtualinvoke r45.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()"
    ]
  },
  "11740": {
    "className": "com.thoughtworks.xstream.core.util.PresortedMap",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.PresortedMap: void \u003cinit\u003e(java.util.Comparator,com.thoughtworks.xstream.core.util.PresortedMap$ArraySet)\u003e",
    "stmt": "if r1 \u003d\u003d null goto $r4 \u003d new com.thoughtworks.xstream.core.util.PresortedMap$ArraySetComparator",
    "preds": [
      "r2 :\u003d @parameter1: com.thoughtworks.xstream.core.util.PresortedMap$ArraySet",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "$r3 \u003d $r4",
      "$r4 \u003d new com.thoughtworks.xstream.core.util.PresortedMap$ArraySetComparator",
      "$r3 \u003d r1",
      "goto [?\u003d $r5 \u003d (java.util.Comparator) $r3]"
    ]
  },
  "4572": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r16 !\u003d null goto $r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$ArrayList\u003e",
    "preds": [
      "$r16 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$ArrayList\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r13, $r15)"
    ],
    "succs": [
      "$r17 \u003d $r11",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$ArrayList\u003e",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e",
      "$r11 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.ArrayList\")"
    ]
  },
  "23005": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if r45 !\u003d null goto $r46 \u003d virtualinvoke r45.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "if r0 !\u003d null goto (branch)",
      "r45 :\u003d @parameter1: java.lang.Object"
    ],
    "succs": [
      "$r46 \u003d null",
      "$r46 \u003d virtualinvoke r45.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23007)]",
      "$r41 \u003d staticinvoke \u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e(r0)"
    ]
  },
  "4573": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r4 !\u003d null goto $r19 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e",
    "preds": [
      "goto [?\u003d $r4 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e]",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e",
      "$r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$ArrayList\u003e"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r17, $r19)",
      "$r19 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$List\u003e",
      "$r18 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.List\")",
      "$r19 \u003d $r18"
    ]
  },
  "4577": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r20 !\u003d null goto $r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashSet\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r17, $r19)",
      "$r20 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashSet\u003e"
    ],
    "succs": [
      "$r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashSet\u003e",
      "$r10 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.HashSet\")",
      "$r21 \u003d $r10",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e"
    ]
  },
  "21985": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d null goto $z0 \u003d virtualinvoke r0.\u003cjava.lang.Class: boolean isPrimitive()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.Class"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21987)]",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.Class: boolean isPrimitive()\u003e()",
      "if $z0 !\u003d 0 goto $r1 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "return r0"
    ]
  },
  "23010": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23010)",
    "preds": [
      "$z0 \u003d interfaceinvoke $r2.\u003corg.apache.commons.logging.Log: boolean isDebugEnabled()\u003e()",
      "$r2 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $r48 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e(r45)]",
      "$r48 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e(r45)",
      "$r18 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()",
      "$r3 \u003d new java.lang.StringBuilder"
    ]
  },
  "4578": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r5 !\u003d null goto $r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e",
    "preds": [
      "goto [?\u003d $r5 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e]",
      "$r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$HashSet\u003e",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e"
    ],
    "succs": [
      "$r22 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Set\")",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Set\u003e",
      "$r23 \u003d $r22",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r21, $r23)"
    ]
  },
  "21988": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r1 goto $r2 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
    "preds": [
      "if $z0 !\u003d 0 goto $r1 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e",
      "$r1 \u003d \u003cjava.lang.Integer: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r2 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "return class \"Ljava/lang/Integer;\""
    ]
  },
  "4581": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r24 !\u003d null goto $r25 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e",
    "preds": [
      "$r24 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r21, $r23)"
    ],
    "succs": [
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.TreeSet\")",
      "$r25 \u003d $r9",
      "$r25 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e",
      "$r6 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e"
    ]
  },
  "21989": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
    "preds": [
      "$r2 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r1 goto $r2 \u003d \u003cjava.lang.Double: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r3 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "return class \"Ljava/lang/Double;\"",
      "if r0 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e"
    ]
  },
  "21990": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
    "preds": [
      "$r3 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r2 goto $r3 \u003d \u003cjava.lang.Long: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r0 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e",
      "return class \"Ljava/lang/Long;\"",
      "$r4 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e"
    ]
  },
  "4583": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r6 !\u003d null goto $r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e",
    "preds": [
      "$r25 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$TreeSet\u003e",
      "goto [?\u003d $r6 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e]",
      "$r6 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r25, $r27)",
      "$r27 \u003d $r26",
      "$r26 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.SortedSet\")",
      "$r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$SortedSet\u003e"
    ]
  },
  "21991": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e",
    "preds": [
      "$r4 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r3 goto $r4 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "return class \"Ljava/lang/Boolean;\"",
      "if r0 !\u003d $r5 goto $r6 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
      "$r5 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e"
    ]
  },
  "21992": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r5 goto $r6 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
    "preds": [
      "if r0 !\u003d $r4 goto $r5 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e",
      "$r5 \u003d \u003cjava.lang.Float: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r0 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e",
      "return class \"Ljava/lang/Float;\"",
      "$r6 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e"
    ]
  },
  "23017": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $r48 !\u003d null goto r49 \u003d virtualinvoke $r48.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "goto [?\u003d $r48 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e(r45)]",
      "interfaceinvoke $r18.\u003corg.apache.commons.logging.Log: void debug(java.lang.Object)\u003e($r17)",
      "$r48 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e(r45)"
    ],
    "succs": [
      "$r40 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object handleMissing(java.lang.Class)\u003e($r41)",
      "r49 \u003d virtualinvoke $r48.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "return $r40",
      "$r43 :\u003d @caughtexception",
      "$z1 \u003d virtualinvoke $r41.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/String;\")"
    ]
  },
  "21993": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e",
    "preds": [
      "if r0 !\u003d $r5 goto $r6 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e",
      "$r6 \u003d \u003cjava.lang.Short: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "if r0 !\u003d $r7 goto $r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e",
      "return class \"Ljava/lang/Short;\"",
      "$r7 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e"
    ]
  },
  "15850": {
    "className": "hudson.util.RobustReflectionConverter",
    "methodSignature": "\u003chudson.util.RobustReflectionConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,hudson.util.XStream2$ClassOwnership)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto (branch)",
    "preds": [
      "r0.\u003chudson.util.RobustReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider\u003e \u003d r4",
      "$z0 \u003d \u003chudson.util.RobustReflectionConverter: boolean $assertionsDisabled\u003e"
    ],
    "succs": [
      "goto [?\u003d r0.\u003chudson.util.RobustReflectionConverter: hudson.util.XStream2$ClassOwnership classOwnership\u003e \u003d r5]",
      "$r6 \u003d new java.lang.AssertionError",
      "if r5 \u003d\u003d null goto $r6 \u003d new java.lang.AssertionError",
      "r0.\u003chudson.util.RobustReflectionConverter: hudson.util.XStream2$ClassOwnership classOwnership\u003e \u003d r5"
    ]
  },
  "21994": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r7 goto $r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e",
    "preds": [
      "if r0 !\u003d $r6 goto $r7 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e",
      "$r7 \u003d \u003cjava.lang.Byte: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "$r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r8 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21996)",
      "return class \"Ljava/lang/Byte;\""
    ]
  },
  "4587": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r28 !\u003d null goto $r29 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$GregorianCalendar\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r25, $r27)",
      "$r28 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$GregorianCalendar\u003e"
    ],
    "succs": [
      "$r8 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.GregorianCalendar\")",
      "$r29 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$GregorianCalendar\u003e",
      "$r7 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
      "$r29 \u003d $r8"
    ]
  },
  "21995": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r8 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21996)",
    "preds": [
      "$r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r7 goto $r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "return class \"Ljava/lang/Character;\"",
      "return r0"
    ]
  },
  "4588": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupDefaultImplementations()\u003e",
    "stmt": "if $r7 !\u003d null goto $r31 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
    "preds": [
      "$r29 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$GregorianCalendar\u003e",
      "$r7 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
      "goto [?\u003d $r7 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e]"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e($r29, $r31)",
      "$r30 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Calendar\")",
      "$r31 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$util$Calendar\u003e",
      "$r31 \u003d $r30"
    ]
  },
  "15852": {
    "className": "hudson.util.RobustReflectionConverter",
    "methodSignature": "\u003chudson.util.RobustReflectionConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,hudson.util.XStream2$ClassOwnership)\u003e",
    "stmt": "if r5 \u003d\u003d null goto $r6 \u003d new java.lang.AssertionError",
    "preds": [
      "$z0 \u003d \u003chudson.util.RobustReflectionConverter: boolean $assertionsDisabled\u003e",
      "if $z0 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "goto [?\u003d r0.\u003chudson.util.RobustReflectionConverter: hudson.util.XStream2$ClassOwnership classOwnership\u003e \u003d r5]",
      "$r6 \u003d new java.lang.AssertionError",
      "specialinvoke $r6.\u003cjava.lang.AssertionError: void \u003cinit\u003e()\u003e()",
      "r0.\u003chudson.util.RobustReflectionConverter: hudson.util.XStream2$ClassOwnership classOwnership\u003e \u003d r5"
    ]
  },
  "21996": {
    "className": "org.apache.commons.beanutils.ConvertUtils",
    "methodSignature": "\u003corg.apache.commons.beanutils.ConvertUtils: java.lang.Class primitiveToWrapper(java.lang.Class)\u003e",
    "stmt": "if r0 !\u003d $r8 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21996)",
    "preds": [
      "$r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e",
      "if r0 !\u003d $r7 goto $r8 \u003d \u003cjava.lang.Character: java.lang.Class TYPE\u003e"
    ],
    "succs": [
      "return class \"Ljava/lang/Character;\"",
      "return r0"
    ]
  },
  "14831": {
    "className": "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter: void \u003cinit\u003e(java.lang.Class)\u003e",
    "stmt": "if $z0 !\u003d 0 goto r0.\u003ccom.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter: java.lang.Class type\u003e \u003d r2",
    "preds": [
      "$r12 \u003d \u003ccom.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter: java.lang.Class class$java$text$AttributedCharacterIterator$Attribute\u003e",
      "$z0 \u003d virtualinvoke $r12.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)",
      "goto [?\u003d $z0 \u003d virtualinvoke $r12.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)]"
    ],
    "succs": [
      "$r4 \u003d new java.lang.StringBuffer",
      "$r3 \u003d new java.lang.IllegalArgumentException",
      "r0.\u003ccom.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter: java.lang.Class type\u003e \u003d r2",
      "return"
    ]
  },
  "15856": {
    "className": "hudson.util.RobustReflectionConverter",
    "methodSignature": "\u003chudson.util.RobustReflectionConverter: void addCriticalField(java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15857)",
    "preds": [
      "$r4 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e",
      "$z0 \u003d interfaceinvoke $r4.\u003cjava.util.Map: boolean containsKey(java.lang.Object)\u003e(r3)"
    ],
    "succs": [
      "$r7 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e",
      "$r14 :\u003d @caughtexception",
      "$r6 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e",
      "goto [?\u003d $r7 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e]",
      "$r5 \u003d new java.util.HashSet",
      "$r15 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.concurrent.locks.ReadWriteLock criticalFieldsLock\u003e"
    ]
  },
  "23026": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z3 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23026)",
    "preds": [
      "$r21 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()",
      "$z3 \u003d interfaceinvoke $r21.\u003corg.apache.commons.logging.Log: boolean isDebugEnabled()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $r28 \u003d virtualinvoke $r41.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e($r48)]",
      "$r43 :\u003d @caughtexception",
      "$r28 \u003d virtualinvoke $r41.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e($r48)",
      "$r44 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object handleError(java.lang.Class,java.lang.Object,java.lang.Throwable)\u003e($r41, $r48, $r43)",
      "$r22 \u003d new java.lang.StringBuilder",
      "$r27 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()"
    ]
  },
  "15860": {
    "className": "hudson.util.RobustReflectionConverter",
    "methodSignature": "\u003chudson.util.RobustReflectionConverter: void addCriticalField(java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15857)",
    "preds": [
      "$r4 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e",
      "$z0 \u003d interfaceinvoke $r4.\u003cjava.util.Map: boolean containsKey(java.lang.Object)\u003e(r3)"
    ],
    "succs": [
      "$r7 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e",
      "$r14 :\u003d @caughtexception",
      "$r6 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e",
      "goto [?\u003d $r7 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.Map criticalFields\u003e]",
      "$r5 \u003d new java.util.HashSet",
      "$r15 \u003d r0.\u003chudson.util.RobustReflectionConverter: java.util.concurrent.locks.ReadWriteLock criticalFieldsLock\u003e"
    ]
  },
  "23033": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z4 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23033)",
    "preds": [
      "$r29 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()",
      "$z4 \u003d interfaceinvoke $r29.\u003corg.apache.commons.logging.Log: boolean isDebugEnabled()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $r39 \u003d virtualinvoke $r41.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e(r50)]",
      "$r43 :\u003d @caughtexception",
      "$r44 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object handleError(java.lang.Class,java.lang.Object,java.lang.Throwable)\u003e($r41, $r48, $r43)",
      "$r30 \u003d new java.lang.StringBuilder",
      "$r39 \u003d virtualinvoke $r41.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e(r50)",
      "$r38 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()"
    ]
  },
  "23036": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convert(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "goto [?\u003d $r39 \u003d virtualinvoke $r41.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e(r50)]",
    "preds": [
      "$z4 \u003d interfaceinvoke $r29.\u003corg.apache.commons.logging.Log: boolean isDebugEnabled()\u003e()",
      "if $z4 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23033)"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r39 \u003d virtualinvoke $r41.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e(r50)",
      "return $r39",
      "$r44 \u003d virtualinvoke r1.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object handleError(java.lang.Class,java.lang.Object,java.lang.Throwable)\u003e($r41, $r48, $r43)"
    ]
  },
  "23039": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto $r1 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "r6 :\u003d @this: org.apache.commons.beanutils.converters.AbstractConverter",
      "r0 :\u003d @parameter0: java.lang.Object"
    ],
    "succs": [
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "return null",
      "$r1 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()"
    ]
  },
  "23040": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d r0 instanceof java.util.Collection",
    "preds": [
      "$z0 \u003d virtualinvoke $r1.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "$r1 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()"
    ],
    "succs": [
      "if $z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23048)",
      "$z1 \u003d r0 instanceof java.util.Collection",
      "if $i1 \u003c\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23043)",
      "$i1 \u003d staticinvoke \u003cjava.lang.reflect.Array: int getLength(java.lang.Object)\u003e(r0)"
    ]
  },
  "23044": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Object convertArray(java.lang.Object)\u003e",
    "stmt": "if $z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23048)",
    "preds": [
      "$z1 \u003d r0 instanceof java.util.Collection",
      "if $z0 \u003d\u003d 0 goto $z1 \u003d r0 instanceof java.util.Collection"
    ],
    "succs": [
      "r2 \u003d (java.util.Collection) r0",
      "$i0 \u003d interfaceinvoke r2.\u003cjava.util.Collection: int size()\u003e()",
      "return r0"
    ]
  },
  "11783": {
    "className": "com.thoughtworks.xstream.core.util.PresortedSet",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.PresortedSet: void \u003cinit\u003e(java.util.Comparator,java.util.Collection)\u003e",
    "stmt": "if r3 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11783)",
    "preds": [
      "r0.\u003ccom.thoughtworks.xstream.core.util.PresortedSet: java.util.Comparator comparator\u003e \u003d r2",
      "r0.\u003ccom.thoughtworks.xstream.core.util.PresortedSet: java.util.List list\u003e \u003d $r1"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11785)]",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.core.util.PresortedSet: boolean addAll(java.util.Collection)\u003e(r3)",
      "return"
    ]
  },
  "4622": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4623)",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)\u003e($r157, 0)",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable()\u003e()"
    ],
    "succs": [
      "specialinvoke $r158.\u003ccom.thoughtworks.xstream.converters.extended.SqlTimestampConverter: void \u003cinit\u003e()\u003e()",
      "$r161 \u003d new com.thoughtworks.xstream.converters.extended.DynamicProxyConverter",
      "goto [?\u003d $r161 \u003d new com.thoughtworks.xstream.converters.extended.DynamicProxyConverter]",
      "$r158 \u003d new com.thoughtworks.xstream.converters.extended.SqlTimestampConverter"
    ]
  },
  "22031": {
    "className": "org.apache.commons.logging.impl.SLF4JLogFactory",
    "methodSignature": "\u003corg.apache.commons.logging.impl.SLF4JLogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r15 \u003d new org.apache.commons.logging.impl.SLF4JLog",
    "preds": [
      "$z0 \u003d r5 instanceof org.slf4j.spi.LocationAwareLogger",
      "r5 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)\u003e(r1)"
    ],
    "succs": [
      "specialinvoke $r15.\u003corg.apache.commons.logging.impl.SLF4JLog: void \u003cinit\u003e(org.slf4j.Logger)\u003e(r5)",
      "$r10 \u003d (org.slf4j.spi.LocationAwareLogger) r5",
      "$r15 \u003d new org.apache.commons.logging.impl.SLF4JLog",
      "$r14 \u003d new org.apache.commons.logging.impl.SLF4JLocationAwareLog"
    ]
  },
  "22033": {
    "className": "org.apache.commons.logging.impl.SLF4JLogFactory",
    "methodSignature": "\u003corg.apache.commons.logging.impl.SLF4JLogFactory: org.apache.commons.logging.Log getInstance(java.lang.String)\u003e",
    "stmt": "if $r11 !\u003d null goto $r13 \u003d $r11",
    "preds": [
      "$r8 \u003d interfaceinvoke $r7.\u003cjava.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)\u003e(r1, r12)",
      "$r11 \u003d (org.apache.commons.logging.Log) $r8"
    ],
    "succs": [
      "$r16 \u003d (org.apache.commons.logging.Log) $r13",
      "$r13 \u003d $r11",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22034)]",
      "$r13 \u003d r12"
    ]
  },
  "8721": {
    "className": "org.springframework.security.authentication.AnonymousAuthenticationToken",
    "methodSignature": "\u003corg.springframework.security.authentication.AnonymousAuthenticationToken: void \u003cinit\u003e(java.lang.Integer,java.lang.Object,java.util.Collection)\u003e",
    "stmt": "if r2 !\u003d null goto $r3 \u003d \"\"",
    "preds": [
      "r1 :\u003d @parameter2: java.util.Collection",
      "specialinvoke r0.\u003corg.springframework.security.authentication.AbstractAuthenticationToken: void \u003cinit\u003e(java.util.Collection)\u003e(r1)"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d 0]",
      "$z1 \u003d 0",
      "$r3 \u003d \"\"",
      "$z0 \u003d virtualinvoke $r3.\u003cjava.lang.String: boolean equals(java.lang.Object)\u003e(r2)"
    ]
  },
  "8722": {
    "className": "org.springframework.security.authentication.AnonymousAuthenticationToken",
    "methodSignature": "\u003corg.springframework.security.authentication.AnonymousAuthenticationToken: void \u003cinit\u003e(java.lang.Integer,java.lang.Object,java.util.Collection)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d 1",
    "preds": [
      "$r3 \u003d \"\"",
      "$z0 \u003d virtualinvoke $r3.\u003cjava.lang.String: boolean equals(java.lang.Object)\u003e(r2)"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d 0]",
      "$z1 \u003d 1",
      "$z1 \u003d 0",
      "goto [?\u003d staticinvoke \u003corg.springframework.util.Assert: void isTrue(boolean,java.lang.String)\u003e($z1, \"principal cannot be null or empty\")]"
    ]
  },
  "4631": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4632)",
    "preds": [
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)\u003e($r164, 0)"
    ],
    "succs": [
      "$z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable()\u003e()",
      "goto [?\u003d $z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable()\u003e()]",
      "$r165 \u003d new com.thoughtworks.xstream.converters.extended.FontConverter",
      "$r59 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e"
    ]
  },
  "4636": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4637)",
    "preds": [
      "$z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable()\u003e()",
      "goto [?\u003d $z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable()\u003e()]",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)\u003e($r167, 0)"
    ],
    "succs": [
      "$r169 \u003d new com.thoughtworks.xstream.converters.extended.LocaleConverter",
      "goto [?\u003d $r169 \u003d new com.thoughtworks.xstream.converters.extended.LocaleConverter]",
      "$r64 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper\u003e",
      "$r168 \u003d new com.thoughtworks.xstream.converters.extended.LookAndFeelConverter"
    ]
  },
  "4641": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z3 !\u003d 0 goto $r67 \u003d newarray (java.lang.Class)[1]",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)\u003e($r170, 0)",
      "$z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(4)"
    ],
    "succs": [
      "$r68 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$z6 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "$r67 \u003d newarray (java.lang.Class)[1]",
      "goto [?\u003d $z6 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)]"
    ]
  },
  "4642": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r68 !\u003d null goto $r112 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r68 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r67 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "$r112 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r112",
      "$r112 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r67[0] \u003d $r112"
    ]
  },
  "21027": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass: void add(com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl)\u003e",
    "stmt": "if $r6 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21028)",
    "preds": [
      "interfaceinvoke $r4.\u003cjava.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e($r5, r1)",
      "$r6 \u003d virtualinvoke r1.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl: java.lang.String getItemFieldName()\u003e()"
    ],
    "succs": [
      "$r8 \u003d virtualinvoke r1.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl: java.lang.String getItemFieldName()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21030)]",
      "return",
      "$r7 \u003d r0.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass: java.util.Map itemFieldNameToDef\u003e"
    ]
  },
  "22052": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: java.util.ServiceLoader getServiceLoader(java.lang.ClassLoader)\u003e",
    "stmt": "if r0 !\u003d null goto r2 \u003d staticinvoke \u003corg.slf4j.LoggerFactory$lambda_getServiceLoader_0__5: java.security.PrivilegedAction bootstrap$(java.lang.ClassLoader)\u003e(r1)",
    "preds": [
      "r0 \u003d staticinvoke \u003cjava.lang.System: java.lang.SecurityManager getSecurityManager()\u003e()",
      "r1 :\u003d @parameter0: java.lang.ClassLoader"
    ],
    "succs": [
      "$r3 \u003d staticinvoke \u003cjava.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)\u003e(r2)",
      "r4 \u003d staticinvoke \u003cjava.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)\u003e(class \"Lorg/slf4j/spi/SLF4JServiceProvider;\", r1)",
      "r2 \u003d staticinvoke \u003corg.slf4j.LoggerFactory$lambda_getServiceLoader_0__5: java.security.PrivilegedAction bootstrap$(java.lang.ClassLoader)\u003e(r1)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22054)]"
    ]
  },
  "12837": {
    "className": "com.thoughtworks.xstream.security.NoTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.NoTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto $r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.Object",
      "r3 :\u003d @this: com.thoughtworks.xstream.security.NoTypePermission"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$r1 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "8741": {
    "className": "org.springframework.security.authentication.AbstractAuthenticationToken",
    "methodSignature": "\u003corg.springframework.security.authentication.AbstractAuthenticationToken: void \u003cinit\u003e(java.util.Collection)\u003e",
    "stmt": "if r1 !\u003d null goto r2 \u003d interfaceinvoke r1.\u003cjava.util.Collection: java.util.Iterator iterator()\u003e()",
    "preds": [
      "r0.\u003corg.springframework.security.authentication.AbstractAuthenticationToken: boolean authenticated\u003e \u003d 0",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "$z0 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: boolean hasNext()\u003e()",
      "r2 \u003d interfaceinvoke r1.\u003cjava.util.Collection: java.util.Iterator iterator()\u003e()",
      "r0.\u003corg.springframework.security.authentication.AbstractAuthenticationToken: java.util.Collection authorities\u003e \u003d $r7",
      "$r7 \u003d \u003corg.springframework.security.core.authority.AuthorityUtils: java.util.List NO_AUTHORITIES\u003e"
    ]
  },
  "4646": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r72 !\u003d null goto $r113 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e",
    "preds": [
      "$r72 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e",
      "$r71 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "$r113 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$ConverterLookup\u003e \u003d $r113",
      "$r113 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.ConverterLookup\")",
      "$r71[0] \u003d $r113"
    ]
  },
  "12839": {
    "className": "com.thoughtworks.xstream.security.NoTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.NoTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $r1 !\u003d null goto $r4 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e",
    "preds": [
      "$r1 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()"
    ],
    "succs": [
      "$r4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.security.NoTypePermission\")",
      "if $r2 \u003d\u003d $r4 goto $z0 \u003d 1",
      "\u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e \u003d $r4",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e"
    ]
  },
  "12840": {
    "className": "com.thoughtworks.xstream.security.NoTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.NoTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $r2 \u003d\u003d $r4 goto $z0 \u003d 1",
    "preds": [
      "if $r1 !\u003d null goto $r4 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e",
      "goto [?\u003d (branch)]",
      "\u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e \u003d $r4",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.security.NoTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$NoTypePermission\u003e"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$z0 \u003d 1",
      "goto [?\u003d $z0 \u003d 0]",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12843)]"
    ]
  },
  "22062": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void performInitialization()\u003e",
    "stmt": "if $i0 \u003d\u003d 3 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22063)",
    "preds": [
      "staticinvoke \u003corg.slf4j.LoggerFactory: void bind()\u003e()",
      "$i0 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e"
    ],
    "succs": [
      "staticinvoke \u003corg.slf4j.LoggerFactory: void versionSanityCheck()\u003e()",
      "return",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22065)]"
    ]
  },
  "21038": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $r3 !\u003d null goto $r5 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "if r1 !\u003d null goto $r5 \u003d r1",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "$r4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "goto [?\u003d r0.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: java.lang.Class itemType\u003e \u003d $r5]",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e",
      "$r5 \u003d $r4"
    ]
  },
  "4655": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z6 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4656)",
    "preds": [
      "$z6 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.CharsetConverter\", 0, null, null)",
      "goto [?\u003d $z6 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)]"
    ],
    "succs": [
      "goto [?\u003d $r117 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")]",
      "if $r75 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4658)",
      "$r117 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")",
      "$r75 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.xml.datatype.Duration\")"
    ]
  },
  "21039": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: void \u003cinit\u003e(java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $r3 !\u003d null goto $r5 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "if r1 !\u003d null goto $r5 \u003d r1",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "$r4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "goto [?\u003d r0.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: java.lang.Class itemType\u003e \u003d $r5]",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e",
      "$r5 \u003d $r4"
    ]
  },
  "4657": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r75 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4658)",
    "preds": [
      "if $z6 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4656)",
      "$r75 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.xml.datatype.Duration\")"
    ],
    "succs": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.enums.EnumConverter\", 0, null, null)",
      "goto [?\u003d specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.enums.EnumConverter\", 0, null, null)]",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.DurationConverter\", 0, null, null)"
    ]
  },
  "4660": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r77 !\u003d null goto $r114 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r77 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r76 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r114",
      "$r114 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r114 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r76[0] \u003d $r114"
    ]
  },
  "22068": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void bind()\u003e",
    "stmt": "if r6 !\u003d null goto $z0 \u003d interfaceinvoke r6.\u003cjava.util.List: boolean isEmpty()\u003e()",
    "preds": [
      "staticinvoke \u003corg.slf4j.LoggerFactory: void reportMultipleBindingAmbiguity(java.util.List)\u003e(r6)",
      "r6 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: java.util.List findServiceProviders()\u003e()"
    ],
    "succs": [
      "$r4 :\u003d @caughtexception",
      "staticinvoke \u003corg.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)\u003e($r4)",
      "\u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 4",
      "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22070)",
      "goto [?\u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 4]",
      "$z0 \u003d interfaceinvoke r6.\u003cjava.util.List: boolean isEmpty()\u003e()"
    ]
  },
  "22069": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void bind()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22070)",
    "preds": [
      "if r6 !\u003d null goto $z0 \u003d interfaceinvoke r6.\u003cjava.util.List: boolean isEmpty()\u003e()",
      "$z0 \u003d interfaceinvoke r6.\u003cjava.util.List: boolean isEmpty()\u003e()"
    ],
    "succs": [
      "$r1 \u003d (org.slf4j.spi.SLF4JServiceProvider) $r0",
      "$r4 :\u003d @caughtexception",
      "staticinvoke \u003corg.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)\u003e($r4)",
      "$r0 \u003d interfaceinvoke r6.\u003cjava.util.List: java.lang.Object get(int)\u003e(0)",
      "\u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 4",
      "goto [?\u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 4]"
    ]
  },
  "11829": {
    "className": "com.thoughtworks.xstream.core.util.FastStack",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)\u003e",
    "stmt": "if $i2 \u003e\u003d $i1 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11830)",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack\u003e",
      "$i1 \u003d lengthof $r1"
    ],
    "succs": [
      "goto [?\u003d $r3 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack\u003e]",
      "$i3 \u003d lengthof $r2",
      "$r3 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack\u003e",
      "$r2 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack\u003e"
    ]
  },
  "4664": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r81 !\u003d null goto $r115 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r80 \u003d newarray (java.lang.Class)[1]",
      "$r81 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r115",
      "$r115 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r80[0] \u003d $r115",
      "$r115 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ]
  },
  "23096": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: void setDefaultValue(java.lang.Object)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23096)",
    "preds": [
      "$r1 \u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()",
      "$z0 \u003d interfaceinvoke $r1.\u003corg.apache.commons.logging.Log: boolean isDebugEnabled()\u003e()"
    ],
    "succs": [
      "if r3 !\u003d null goto $r8 \u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.converters.AbstractConverter: java.lang.Class getDefaultType()\u003e()",
      "goto [?\u003d (branch)]",
      "$r7 \u003d virtualinvoke r0.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e()",
      "$r2 \u003d new java.lang.StringBuilder"
    ]
  },
  "21053": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: int hashCode()\u003e",
    "stmt": "if $r2 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21054)",
    "preds": [
      "i2 \u003d $i0 \u003c\u003c 7",
      "$r2 \u003d r0.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: java.lang.String itemFieldName\u003e"
    ],
    "succs": [
      "$i1 \u003d virtualinvoke $r3.\u003cjava.lang.String: int hashCode()\u003e()",
      "return i2",
      "$r3 \u003d r0.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType: java.lang.String itemFieldName\u003e",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(21056)]"
    ]
  },
  "12861": {
    "className": "com.thoughtworks.xstream.security.AnyTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.AnyTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto $r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "r3 :\u003d @this: com.thoughtworks.xstream.security.AnyTypePermission",
      "r0 :\u003d @parameter0: java.lang.Object"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$r1 \u003d \u003ccom.thoughtworks.xstream.security.AnyTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$AnyTypePermission\u003e",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "22080": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void bind()\u003e",
    "stmt": "goto [?\u003d staticinvoke \u003corg.slf4j.LoggerFactory: void postBindCleanUp()\u003e()]",
    "preds": [
      "staticinvoke \u003corg.slf4j.LoggerFactory: void reportActualBinding(java.util.List)\u003e(r6)",
      "\u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 3"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22083)]",
      "$r4 :\u003d @caughtexception",
      "staticinvoke \u003corg.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)\u003e($r4)",
      "staticinvoke \u003corg.slf4j.LoggerFactory: void postBindCleanUp()\u003e()"
    ]
  },
  "4673": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r85 !\u003d null goto $r116 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r84 \u003d newarray (java.lang.Class)[1]",
      "$r85 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r116",
      "$r116 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r84[0] \u003d $r116",
      "$r116 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ]
  },
  "23107": {
    "className": "org.apache.commons.beanutils.converters.AbstractConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log()\u003e",
    "stmt": "if $r1 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23105)",
    "preds": [
      "$r1 \u003d r0.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log\u003e",
      "r0 :\u003d @this: org.apache.commons.beanutils.converters.AbstractConverter"
    ],
    "succs": [
      "goto [?\u003d $r4 \u003d r0.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log\u003e]",
      "$r4 \u003d r0.\u003corg.apache.commons.beanutils.converters.AbstractConverter: org.apache.commons.logging.Log log\u003e",
      "$r3 \u003d staticinvoke \u003corg.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)\u003e($r2)",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()"
    ]
  },
  "4679": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r117 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4679)",
    "preds": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.AtomicReferenceConverter\", 0, $r84, $r86)",
      "goto [?\u003d $r117 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")]",
      "$r117 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"javax.activation.ActivationDataFlavor\")"
    ],
    "succs": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.ActivationDataFlavorConverter\", 0, null, null)",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)]"
    ]
  },
  "4681": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z4 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4682)",
    "preds": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.ActivationDataFlavorConverter\", 0, null, null)",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)]"
    ],
    "succs": [
      "$z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.PathConverter\", 0, null, null)",
      "goto [?\u003d $z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)]"
    ]
  },
  "4684": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $z5 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4685)",
    "preds": [
      "$z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.extended.PathConverter\", 0, null, null)",
      "goto [?\u003d $z5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)]"
    ],
    "succs": [
      "goto [?\u003d $r171 \u003d new com.thoughtworks.xstream.core.util.SelfStreamingInstanceChecker]",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.time.DurationConverter\", 0, null, null)",
      "$r171 \u003d new com.thoughtworks.xstream.core.util.SelfStreamingInstanceChecker",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e(\"com.thoughtworks.xstream.converters.time.ChronologyConverter\", 0, null, null)"
    ]
  },
  "11861": {
    "className": "com.thoughtworks.xstream.core.ClassLoaderReference",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.ClassLoaderReference: void setReference(java.lang.ClassLoader)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r3 \u003d r1",
    "preds": [
      "r1 :\u003d @parameter0: java.lang.ClassLoader",
      "$z0 \u003d r1 instanceof com.thoughtworks.xstream.core.util.ClassLoaderReference"
    ],
    "succs": [
      "$r3 \u003d virtualinvoke $r2.\u003ccom.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()\u003e()",
      "r0.\u003ccom.thoughtworks.xstream.core.ClassLoaderReference: java.lang.ClassLoader reference\u003e \u003d $r3",
      "$r2 \u003d (com.thoughtworks.xstream.core.util.ClassLoaderReference) r1",
      "$r3 \u003d r1"
    ]
  },
  "12885": {
    "className": "com.thoughtworks.xstream.security.PrimitiveTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.PrimitiveTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto $r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.Object",
      "r3 :\u003d @this: com.thoughtworks.xstream.security.PrimitiveTypePermission"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$r1 \u003d \u003ccom.thoughtworks.xstream.security.PrimitiveTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$PrimitiveTypePermission\u003e",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "12889": {
    "className": "com.thoughtworks.xstream.security.PrimitiveTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.PrimitiveTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $r2 \u003d\u003d $r4 goto $z0 \u003d 1",
    "preds": [
      "$r4 \u003d \u003ccom.thoughtworks.xstream.security.PrimitiveTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$PrimitiveTypePermission\u003e",
      "if $r1 !\u003d null goto $r4 \u003d \u003ccom.thoughtworks.xstream.security.PrimitiveTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$PrimitiveTypePermission\u003e",
      "goto [?\u003d (branch)]",
      "\u003ccom.thoughtworks.xstream.security.PrimitiveTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$PrimitiveTypePermission\u003e \u003d $r4"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$z0 \u003d 1",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12891)]",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "4699": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r89 !\u003d null goto $r118 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r89 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r88 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "$r118 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r118 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r118",
      "$r88[0] \u003d $r118"
    ]
  },
  "22107": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void fixSubstituteLoggers()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto exitmonitor $r0",
    "preds": [
      "r6 \u003d interfaceinvoke $r5.\u003cjava.util.List: java.util.Iterator iterator()\u003e()",
      "goto [?\u003d $z0 \u003d interfaceinvoke r6.\u003cjava.util.Iterator: boolean hasNext()\u003e()]",
      "$z0 \u003d interfaceinvoke r6.\u003cjava.util.Iterator: boolean hasNext()\u003e()"
    ],
    "succs": [
      "$r11 :\u003d @caughtexception",
      "$r7 \u003d interfaceinvoke r6.\u003cjava.util.Iterator: java.lang.Object next()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22111)]",
      "r8 \u003d (org.slf4j.helpers.SubstituteLogger) $r7",
      "exitmonitor $r0"
    ]
  },
  "22110": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void fixSubstituteLoggers()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto exitmonitor $r0",
    "preds": [
      "r6 \u003d interfaceinvoke $r5.\u003cjava.util.List: java.util.Iterator iterator()\u003e()",
      "goto [?\u003d $z0 \u003d interfaceinvoke r6.\u003cjava.util.Iterator: boolean hasNext()\u003e()]",
      "$z0 \u003d interfaceinvoke r6.\u003cjava.util.Iterator: boolean hasNext()\u003e()"
    ],
    "succs": [
      "$r11 :\u003d @caughtexception",
      "$r7 \u003d interfaceinvoke r6.\u003cjava.util.Iterator: java.lang.Object next()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22111)]",
      "r8 \u003d (org.slf4j.helpers.SubstituteLogger) $r7",
      "exitmonitor $r0"
    ]
  },
  "23134": {
    "className": "org.apache.commons.beanutils.converters.ConverterFacade",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.ConverterFacade: void \u003cinit\u003e(org.apache.commons.beanutils.Converter)\u003e",
    "stmt": "if r1 !\u003d null goto r0.\u003corg.apache.commons.beanutils.converters.ConverterFacade: org.apache.commons.beanutils.Converter converter\u003e \u003d r1",
    "preds": [
      "r1 :\u003d @parameter0: org.apache.commons.beanutils.Converter",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalArgumentException",
      "r0.\u003corg.apache.commons.beanutils.converters.ConverterFacade: org.apache.commons.beanutils.Converter converter\u003e \u003d r1",
      "specialinvoke $r2.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"Converter is missing\")",
      "return"
    ]
  },
  "4704": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r93 !\u003d null goto $r119 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r92 \u003d newarray (java.lang.Class)[1]",
      "$r93 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ],
    "succs": [
      "$r119 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r119",
      "$r119 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r92[0] \u003d $r119"
    ]
  },
  "4708": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r97 !\u003d null goto $r120 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r97 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r96 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r120",
      "$r96[0] \u003d $r120",
      "$r120 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r120 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")"
    ]
  },
  "22117": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void replayEvents()\u003e",
    "stmt": "if $i1 !\u003d 0 goto r4 \u003d interfaceinvoke $r3.\u003cjava.util.List: java.util.Iterator iterator()\u003e()",
    "preds": [
      "specialinvoke $r3.\u003cjava.util.ArrayList: void \u003cinit\u003e(int)\u003e(128)",
      "goto [?\u003d $i1 \u003d virtualinvoke r2.\u003cjava.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)\u003e($r3, 128)]",
      "$i1 \u003d virtualinvoke r2.\u003cjava.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)\u003e($r3, 128)"
    ],
    "succs": [
      "$z0 \u003d interfaceinvoke r4.\u003cjava.util.Iterator: boolean hasNext()\u003e()",
      "r4 \u003d interfaceinvoke $r3.\u003cjava.util.List: java.util.Iterator iterator()\u003e()",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22124)]",
      "return"
    ]
  },
  "12902": {
    "className": "com.thoughtworks.xstream.security.ArrayTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.ArrayTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto $r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "r3 :\u003d @this: com.thoughtworks.xstream.security.ArrayTypePermission",
      "r0 :\u003d @parameter0: java.lang.Object"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$r1 \u003d \u003ccom.thoughtworks.xstream.security.ArrayTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$ArrayTypePermission\u003e",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "12906": {
    "className": "com.thoughtworks.xstream.security.ArrayTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.ArrayTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $r2 \u003d\u003d $r4 goto $z0 \u003d 1",
    "preds": [
      "\u003ccom.thoughtworks.xstream.security.ArrayTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$ArrayTypePermission\u003e \u003d $r4",
      "goto [?\u003d (branch)]",
      "if $r1 !\u003d null goto $r4 \u003d \u003ccom.thoughtworks.xstream.security.ArrayTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$ArrayTypePermission\u003e",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.security.ArrayTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$ArrayTypePermission\u003e"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12908)]",
      "$z0 \u003d 0",
      "$z0 \u003d 1",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "4716": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r101 !\u003d null goto $r121 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r101 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r100 \u003d newarray (java.lang.Class)[3]"
    ],
    "succs": [
      "$r100[0] \u003d $r121",
      "$r121 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r121",
      "$r121 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e"
    ]
  },
  "4719": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r102 !\u003d null goto $r122 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e",
    "preds": [
      "$r100[0] \u003d $r121",
      "$r102 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e"
    ],
    "succs": [
      "$r122 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e",
      "$r122 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.ReflectionProvider\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$ReflectionProvider\u003e \u003d $r122",
      "$r100[1] \u003d $r122"
    ]
  },
  "4721": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r103 !\u003d null goto $r123 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e",
    "preds": [
      "$r100[1] \u003d $r122",
      "$r103 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e"
    ],
    "succs": [
      "$r123 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.ClassLoaderReference\")",
      "$r123 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$core$ClassLoaderReference\u003e \u003d $r123",
      "$r100[2] \u003d $r123"
    ]
  },
  "4724": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupConverters()\u003e",
    "stmt": "if $r109 !\u003d null goto $r124 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
    "preds": [
      "$r109 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r108 \u003d newarray (java.lang.Class)[1]"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e \u003d $r124",
      "$r124 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper\u003e",
      "$r124 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper\")",
      "$r108[0] \u003d $r124"
    ]
  },
  "9844": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void \u003cinit\u003e()\u003e",
    "stmt": "if $r3 !\u003d null goto $r7 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "r0.\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders\u003e \u003d $r2",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$Object\u003e \u003d $r7",
      "$r4 \u003d virtualinvoke $r7.\u003cjava.lang.Class: java.lang.ClassLoader getClassLoader()\u003e()",
      "$r7 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$Object\u003e",
      "$r7 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")"
    ]
  },
  "12919": {
    "className": "com.thoughtworks.xstream.security.InterfaceTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.InterfaceTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if r0 !\u003d null goto $r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
    "preds": [
      "r3 :\u003d @this: com.thoughtworks.xstream.security.InterfaceTypePermission",
      "r0 :\u003d @parameter0: java.lang.Object"
    ],
    "succs": [
      "$z0 \u003d 0",
      "$r1 \u003d \u003ccom.thoughtworks.xstream.security.InterfaceTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$InterfaceTypePermission\u003e",
      "$r2 \u003d virtualinvoke r0.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "12923": {
    "className": "com.thoughtworks.xstream.security.InterfaceTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.InterfaceTypePermission: boolean equals(java.lang.Object)\u003e",
    "stmt": "if $r2 \u003d\u003d $r4 goto $z0 \u003d 1",
    "preds": [
      "\u003ccom.thoughtworks.xstream.security.InterfaceTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$InterfaceTypePermission\u003e \u003d $r4",
      "goto [?\u003d (branch)]",
      "$r4 \u003d \u003ccom.thoughtworks.xstream.security.InterfaceTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$InterfaceTypePermission\u003e",
      "if $r1 !\u003d null goto $r4 \u003d \u003ccom.thoughtworks.xstream.security.InterfaceTypePermission: java.lang.Class class$com$thoughtworks$xstream$security$InterfaceTypePermission\u003e"
    ],
    "succs": [
      "$z0 \u003d 0",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12925)]",
      "$z0 \u003d 1",
      "goto [?\u003d $z0 \u003d 0]"
    ]
  },
  "13952": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cinit\u003e(java.lang.String,java.lang.String,java.lang.String[],java.util.Locale,java.util.TimeZone,boolean)\u003e",
    "stmt": "if r1 \u003d\u003d null goto r0.\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat defaultEraFormat\u003e \u003d null",
    "preds": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter: void \u003cinit\u003e()\u003e()",
      "z0 :\u003d @parameter5: boolean"
    ],
    "succs": [
      "$r10 \u003d new com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat",
      "r0.\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat defaultEraFormat\u003e \u003d null",
      "specialinvoke $r10.\u003ccom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat: void \u003cinit\u003e(java.lang.String,java.util.TimeZone,java.util.Locale,int,int,boolean)\u003e(r1, r4, r5, 4, 20, z0)",
      "$r2 \u003d new com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat"
    ]
  },
  "9857": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void addInternal(java.lang.ClassLoader)\u003e",
    "stmt": "if r9 \u003d\u003d r3 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9858)",
    "preds": [
      "if r9 !\u003d null goto (branch)",
      "r9 \u003d (java.lang.ClassLoader) $r8"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9860)]",
      "interfaceinvoke r2.\u003cjava.util.Iterator: void remove()\u003e()",
      "goto [?\u003d $z0 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: boolean hasNext()\u003e()]",
      "r10 \u003d r7"
    ]
  },
  "4737": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4738)",
    "preds": [
      "$z2 \u003d r15 instanceof com.thoughtworks.xstream.converters.SingleValueConverter",
      "if $z1 \u003d\u003d 0 goto $z2 \u003d r15 instanceof com.thoughtworks.xstream.converters.SingleValueConverter"
    ],
    "succs": [
      "$r16 \u003d (com.thoughtworks.xstream.converters.SingleValueConverter) r15",
      "$r18 :\u003d @caughtexception",
      "$r24 :\u003d @caughtexception",
      "virtualinvoke r1.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)\u003e($r16, i0)",
      "goto [?\u003d (branch)]",
      "$r19 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r25 \u003d new com.thoughtworks.xstream.InitializationException",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4744)]"
    ]
  },
  "9858": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void addInternal(java.lang.ClassLoader)\u003e",
    "stmt": "if r9 \u003d\u003d r3 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9858)",
    "preds": [
      "if r9 !\u003d null goto (branch)",
      "r9 \u003d (java.lang.ClassLoader) $r8"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9860)]",
      "interfaceinvoke r2.\u003cjava.util.Iterator: void remove()\u003e()",
      "goto [?\u003d $z0 \u003d interfaceinvoke r2.\u003cjava.util.Iterator: boolean hasNext()\u003e()]",
      "r10 \u003d r7"
    ]
  },
  "23170": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z1 \u003d\u003d 0 goto $z2 \u003d r0 instanceof java.util.Date",
    "preds": [
      "$z1 \u003d r0 instanceof java.lang.Boolean",
      "if $z0 \u003d\u003d 0 goto $z1 \u003d r0 instanceof java.lang.Boolean"
    ],
    "succs": [
      "$r19 \u003d (java.lang.Boolean) r0",
      "if $z2 !\u003d 0 goto $r3 \u003d class \"Ljava/lang/Long;\"",
      "$z8 \u003d virtualinvoke $r19.\u003cjava.lang.Boolean: boolean booleanValue()\u003e()",
      "$z2 \u003d r0 instanceof java.util.Date"
    ]
  },
  "13954": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cinit\u003e(java.lang.String,java.lang.String,java.lang.String[],java.util.Locale,java.util.TimeZone,boolean)\u003e",
    "stmt": "if r6 \u003d\u003d null goto $r11 \u003d newarray (com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat)[0]",
    "preds": [
      "r0.\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat defaultFormat\u003e \u003d $r2",
      "specialinvoke $r2.\u003ccom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat: void \u003cinit\u003e(java.lang.String,java.util.TimeZone,java.util.Locale,int,int,boolean)\u003e(r3, r4, r5, 4, 20, z0)"
    ],
    "succs": [
      "r0.\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat[] acceptableFormats\u003e \u003d $r11",
      "$i0 \u003d lengthof r6",
      "$r11 \u003d newarray (com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat)[$i0]",
      "$r11 \u003d newarray (com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat)[0]"
    ]
  },
  "4740": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4738)",
    "preds": [
      "$z2 \u003d r15 instanceof com.thoughtworks.xstream.converters.SingleValueConverter",
      "if $z1 \u003d\u003d 0 goto $z2 \u003d r15 instanceof com.thoughtworks.xstream.converters.SingleValueConverter"
    ],
    "succs": [
      "$r16 \u003d (com.thoughtworks.xstream.converters.SingleValueConverter) r15",
      "$r18 :\u003d @caughtexception",
      "$r24 :\u003d @caughtexception",
      "virtualinvoke r1.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)\u003e($r16, i0)",
      "goto [?\u003d (branch)]",
      "$r19 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r25 \u003d new com.thoughtworks.xstream.InitializationException",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4744)]"
    ]
  },
  "8836": {
    "className": "org.springframework.util.Assert",
    "methodSignature": "\u003corg.springframework.util.Assert: void isTrue(boolean,java.lang.String)\u003e",
    "stmt": "if z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8838)",
    "preds": [
      "r1 :\u003d @parameter1: java.lang.String",
      "z0 :\u003d @parameter0: boolean"
    ],
    "succs": [
      "specialinvoke $r0.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(r1)",
      "$r0 \u003d new java.lang.IllegalArgumentException",
      "return"
    ]
  },
  "9861": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void addInternal(java.lang.ClassLoader)\u003e",
    "stmt": "if r10 \u003d\u003d null goto $r11 \u003d new java.lang.ref.WeakReference",
    "preds": [
      "$r5 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders\u003e",
      "if $z0 \u003d\u003d 0 goto $r5 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders\u003e"
    ],
    "succs": [
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.ref.ReferenceQueue queue\u003e",
      "$r11 \u003d r10",
      "$r11 \u003d new java.lang.ref.WeakReference",
      "goto [?\u003d interfaceinvoke $r5.\u003cjava.util.List: void add(int,java.lang.Object)\u003e(0, $r11)]"
    ]
  },
  "23174": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z2 !\u003d 0 goto $r3 \u003d class \"Ljava/lang/Long;\"",
    "preds": [
      "if $z1 \u003d\u003d 0 goto $z2 \u003d r0 instanceof java.util.Date",
      "$z2 \u003d r0 instanceof java.util.Date"
    ],
    "succs": [
      "$r3 \u003d class \"Ljava/lang/Long;\"",
      "$z4 \u003d r0 instanceof java.util.Calendar",
      "goto [?\u003d $z4 \u003d r0 instanceof java.util.Calendar]",
      "$z3 \u003d virtualinvoke $r3.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(r2)"
    ]
  },
  "4742": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void registerConverterDynamically(java.lang.String,int,java.lang.Class[],java.lang.Object[])\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4738)",
    "preds": [
      "$z2 \u003d r15 instanceof com.thoughtworks.xstream.converters.SingleValueConverter",
      "if $z1 \u003d\u003d 0 goto $z2 \u003d r15 instanceof com.thoughtworks.xstream.converters.SingleValueConverter"
    ],
    "succs": [
      "$r16 \u003d (com.thoughtworks.xstream.converters.SingleValueConverter) r15",
      "$r18 :\u003d @caughtexception",
      "$r24 :\u003d @caughtexception",
      "virtualinvoke r1.\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)\u003e($r16, i0)",
      "goto [?\u003d (branch)]",
      "$r19 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r25 \u003d new com.thoughtworks.xstream.InitializationException",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4744)]"
    ]
  },
  "23175": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z3 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23176)",
    "preds": [
      "$r3 \u003d class \"Ljava/lang/Long;\"",
      "$z3 \u003d virtualinvoke $r3.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(r2)"
    ],
    "succs": [
      "$z4 \u003d r0 instanceof java.util.Calendar",
      "$r5 \u003d (java.util.Date) r0",
      "goto [?\u003d $z4 \u003d r0 instanceof java.util.Calendar]",
      "$r4 \u003d new java.lang.Long"
    ]
  },
  "23176": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object convertToType(java.lang.Class,java.lang.Object)\u003e",
    "stmt": "if $z3 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(23176)",
    "preds": [
      "$r3 \u003d class \"Ljava/lang/Long;\"",
      "$z3 \u003d virtualinvoke $r3.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(r2)"
    ],
    "succs": [
      "$z4 \u003d r0 instanceof java.util.Calendar",
      "$r5 \u003d (java.util.Date) r0",
      "goto [?\u003d $z4 \u003d r0 instanceof java.util.Calendar]",
      "$r4 \u003d new java.lang.Long"
    ]
  },
  "12936": {
    "className": "com.thoughtworks.xstream.security.ExplicitTypePermission",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.ExplicitTypePermission: void \u003cinit\u003e(java.lang.String[])\u003e",
    "stmt": "if r1 !\u003d null goto $r4 \u003d new java.util.HashSet",
    "preds": [
      "r1 :\u003d @parameter0: java.lang.String[]",
      "specialinvoke r0.\u003cjava.lang.Object: void \u003cinit\u003e()\u003e()"
    ],
    "succs": [
      "$r3 \u003d $r4",
      "$r3 \u003d \u003cjava.util.Collections: java.util.Set EMPTY_SET\u003e",
      "$r4 \u003d new java.util.HashSet",
      "goto [?\u003d r0.\u003ccom.thoughtworks.xstream.security.ExplicitTypePermission: java.util.Set names\u003e \u003d $r3]"
    ]
  },
  "22152": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void versionSanityCheck()\u003e",
    "stmt": "if $z0 !\u003d 0 goto z1 \u003d 1",
    "preds": [
      "$z0 \u003d virtualinvoke r14.\u003cjava.lang.String: boolean startsWith(java.lang.String)\u003e(r11)",
      "r11 \u003d r1[i1]"
    ],
    "succs": [
      "goto [?\u003d i1 \u003d i1 + 1]",
      "$r13 :\u003d @caughtexception",
      "$r12 :\u003d @caughtexception",
      "z1 \u003d 1",
      "staticinvoke \u003corg.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)\u003e(\"Unexpected problem occured during version sanity check\", $r12)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22165)]",
      "i1 \u003d i1 + 1"
    ]
  },
  "4745": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r1 !\u003d null goto $r2 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper\u003e",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$r2 \u003d \u003cjava.lang.Boolean: java.lang.Class TYPE\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r2, 0)",
      "return"
    ]
  },
  "4747": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r3 !\u003d null goto $r44 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r2, 0)",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e"
    ],
    "succs": [
      "$r44 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e",
      "$r44 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Boolean\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Boolean\u003e \u003d $r44",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r44, 0)"
    ]
  },
  "22156": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void versionSanityCheck()\u003e",
    "stmt": "if z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22156)",
    "preds": [
      "if i1 \u003e\u003d i0 goto (branch)",
      "goto [?\u003d (branch)]",
      "i1 \u003d 0"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22161)]",
      "$r13 :\u003d @caughtexception",
      "$r12 :\u003d @caughtexception",
      "specialinvoke $r2.\u003cjava.lang.StringBuilder: void \u003cinit\u003e()\u003e()",
      "staticinvoke \u003corg.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)\u003e(\"Unexpected problem occured during version sanity check\", $r12)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22165)]",
      "$r2 \u003d new java.lang.StringBuilder"
    ]
  },
  "9870": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class loadClass(java.lang.String)\u003e",
    "stmt": "if r12 \u003d\u003d r19 goto r19 \u003d null",
    "preds": [
      "$r11 \u003d interfaceinvoke r20.\u003cjava.util.Iterator: java.lang.Object next()\u003e()",
      "r12 \u003d (java.lang.ClassLoader) $r11"
    ],
    "succs": [
      "goto [?\u003d $r16 \u003d newarray (java.lang.Object)[1]]",
      "r19 \u003d null",
      "$r17 :\u003d @caughtexception",
      "$r16 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "12942": {
    "className": "com.thoughtworks.xstream.security.ExplicitTypePermission$1",
    "methodSignature": "\u003ccom.thoughtworks.xstream.security.ExplicitTypePermission$1: java.lang.String[] getNames()\u003e",
    "stmt": "if $r1 !\u003d null goto $r2 \u003d r0.\u003ccom.thoughtworks.xstream.security.ExplicitTypePermission$1: java.lang.Class[] val$types\u003e",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.security.ExplicitTypePermission$1: java.lang.Class[] val$types\u003e",
      "r0 :\u003d @this: com.thoughtworks.xstream.security.ExplicitTypePermission$1"
    ],
    "succs": [
      "$i0 \u003d lengthof $r2",
      "$r2 \u003d r0.\u003ccom.thoughtworks.xstream.security.ExplicitTypePermission$1: java.lang.Class[] val$types\u003e",
      "return null"
    ]
  },
  "4751": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r5 !\u003d null goto $r45 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r4, 0)",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e"
    ],
    "succs": [
      "$r45 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Byte\")",
      "$r45 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Byte\u003e \u003d $r45",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r45, 0)"
    ]
  },
  "9873": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class loadClass(java.lang.String)\u003e",
    "stmt": "if r12 \u003d\u003d r19 goto r19 \u003d null",
    "preds": [
      "$r11 \u003d interfaceinvoke r20.\u003cjava.util.Iterator: java.lang.Object next()\u003e()",
      "r12 \u003d (java.lang.ClassLoader) $r11"
    ],
    "succs": [
      "goto [?\u003d $r16 \u003d newarray (java.lang.Object)[1]]",
      "r19 \u003d null",
      "$r17 :\u003d @caughtexception",
      "$r16 \u003d newarray (java.lang.Object)[1]"
    ]
  },
  "22162": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void versionSanityCheck()\u003e",
    "stmt": "if $z0 !\u003d 0 goto z1 \u003d 1",
    "preds": [
      "$z0 \u003d virtualinvoke r14.\u003cjava.lang.String: boolean startsWith(java.lang.String)\u003e(r11)",
      "r11 \u003d r1[i1]"
    ],
    "succs": [
      "goto [?\u003d i1 \u003d i1 + 1]",
      "$r13 :\u003d @caughtexception",
      "$r12 :\u003d @caughtexception",
      "z1 \u003d 1",
      "staticinvoke \u003corg.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)\u003e(\"Unexpected problem occured during version sanity check\", $r12)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22165)]",
      "i1 \u003d i1 + 1"
    ]
  },
  "7826": {
    "className": "net.sf.ezmorph.array.BooleanArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.BooleanArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7827)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.BooleanArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "r0 \u003d newarray (java.lang.Object)[1]",
      "r0[0] \u003d \"[Z\"",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "\u003cnet.sf.ezmorph.array.BooleanArrayMorpher: java.lang.Class BOOLEAN_ARRAY_CLASS\u003e \u003d $r6",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.BooleanArrayMorpher: java.lang.Class BOOLEAN_ARRAY_CLASS\u003e \u003d $r6]",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "9874": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class loadClass(java.lang.String)\u003e",
    "stmt": "if r19 \u003d\u003d null goto $r5 \u003d new java.lang.ClassNotFoundException",
    "preds": [
      "$z0 \u003d interfaceinvoke r20.\u003cjava.util.Iterator: boolean hasNext()\u003e()",
      "if $z0 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "r7 \u003d newarray (java.lang.Object)[1]",
      "$r5 \u003d new java.lang.ClassNotFoundException",
      "r7[0] \u003d r6",
      "specialinvoke $r5.\u003cjava.lang.ClassNotFoundException: void \u003cinit\u003e(java.lang.String)\u003e(r6)"
    ]
  },
  "8850": {
    "className": "org.springframework.util.Assert",
    "methodSignature": "\u003corg.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8852)",
    "preds": [
      "r2 :\u003d @parameter1: java.lang.String",
      "r0 :\u003d @parameter0: java.lang.Object"
    ],
    "succs": [
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(r2)",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "return"
    ]
  },
  "4755": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r7 !\u003d null goto $r46 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r6, 0)",
      "$r7 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r46, 0)",
      "$r46 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e",
      "$r46 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Character\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Character\u003e \u003d $r46"
    ]
  },
  "22163": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void versionSanityCheck()\u003e",
    "stmt": "goto [?\u003d (branch)]",
    "preds": [
      "goto [?\u003d i1 \u003d i1 + 1]",
      "z1 \u003d 1",
      "i1 \u003d i1 + 1"
    ],
    "succs": [
      "if i1 \u003e\u003d i0 goto (branch)",
      "staticinvoke \u003corg.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)\u003e(\"Unexpected problem occured during version sanity check\", $r12)",
      "if z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22156)",
      "r11 \u003d r1[i1]",
      "$r12 :\u003d @caughtexception"
    ]
  },
  "9876": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class loadClass(java.lang.String)\u003e",
    "stmt": "if r19 \u003d\u003d null goto $r5 \u003d new java.lang.ClassNotFoundException",
    "preds": [
      "$z0 \u003d interfaceinvoke r20.\u003cjava.util.Iterator: boolean hasNext()\u003e()",
      "if $z0 \u003d\u003d 0 goto (branch)"
    ],
    "succs": [
      "r7 \u003d newarray (java.lang.Object)[1]",
      "$r5 \u003d new java.lang.ClassNotFoundException",
      "r7[0] \u003d r6",
      "specialinvoke $r5.\u003cjava.lang.ClassNotFoundException: void \u003cinit\u003e(java.lang.String)\u003e(r6)"
    ]
  },
  "9877": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void cleanup()\u003e",
    "stmt": "if $r3 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9879)",
    "preds": [
      "$r3 \u003d (java.lang.ref.WeakReference) $r2",
      "$r2 \u003d virtualinvoke $r1.\u003cjava.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()\u003e()"
    ],
    "succs": [
      "interfaceinvoke $r4.\u003cjava.util.List: boolean remove(java.lang.Object)\u003e($r3)",
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders\u003e",
      "return"
    ]
  },
  "7829": {
    "className": "net.sf.ezmorph.array.BooleanArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.BooleanArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7827)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.BooleanArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "r0 \u003d newarray (java.lang.Object)[1]",
      "r0[0] \u003d \"[Z\"",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "\u003cnet.sf.ezmorph.array.BooleanArrayMorpher: java.lang.Class BOOLEAN_ARRAY_CLASS\u003e \u003d $r6",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.BooleanArrayMorpher: java.lang.Class BOOLEAN_ARRAY_CLASS\u003e \u003d $r6]",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "22166": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: boolean isAmbiguousProviderList(java.util.List)\u003e",
    "stmt": "if $i0 \u003c\u003d 1 goto $z0 \u003d 0",
    "preds": [
      "$i0 \u003d interfaceinvoke r0.\u003cjava.util.List: int size()\u003e()",
      "r0 :\u003d @parameter0: java.util.List"
    ],
    "succs": [
      "return $z0",
      "$z0 \u003d 0",
      "$z0 \u003d 1",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22168)]"
    ]
  },
  "4759": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r9 !\u003d null goto $r47 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r8, 0)",
      "$r9 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e"
    ],
    "succs": [
      "$r47 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Double\u003e \u003d $r47",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r47, 0)",
      "$r47 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Double\")"
    ]
  },
  "23193": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Byte;\")",
    "preds": [
      "$r2 \u003d virtualinvoke r1.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e($r2)"
    ],
    "succs": [
      "$z1 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Byte;\")",
      "return $r119",
      "$r119 \u003d virtualinvoke r0.\u003cjava.lang.Class: java.lang.Object cast(java.lang.Object)\u003e(r1)",
      "if $z1 \u003d\u003d 0 goto $z2 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Short;\")"
    ]
  },
  "8857": {
    "className": "org.springframework.util.Assert",
    "methodSignature": "\u003corg.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8859)",
    "preds": [
      "r2 :\u003d @parameter1: java.lang.String",
      "$z0 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean hasLength(java.lang.String)\u003e(r0)"
    ],
    "succs": [
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(r2)",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "return"
    ]
  },
  "22170": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void reportMultipleBindingAmbiguity(java.util.List)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22170)",
    "preds": [
      "$z0 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: boolean isAmbiguousProviderList(java.util.List)\u003e(r0)",
      "r0 :\u003d @parameter0: java.util.List"
    ],
    "succs": [
      "r1 \u003d interfaceinvoke r0.\u003cjava.util.List: java.util.Iterator iterator()\u003e()",
      "staticinvoke \u003corg.slf4j.helpers.Util: void report(java.lang.String)\u003e(\"Class path contains multiple SLF4J providers.\")",
      "return",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22176)]"
    ]
  },
  "9882": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9883)",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9892)]",
      "$r4 :\u003d @caughtexception",
      "$r0 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$ClassLoader\u003e",
      "if $r0 !\u003d null goto $r5 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$ClassLoader\u003e",
      "return"
    ]
  },
  "4763": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r11 !\u003d null goto $r48 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e",
    "preds": [
      "$r11 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r10, 0)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e \u003d $r48",
      "$r48 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Float\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r48, 0)",
      "$r48 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Float\")"
    ]
  },
  "23196": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $i16 \u003c\u003d 0 goto $b11 \u003d l13 cmp -128L",
    "preds": [
      "$i16 \u003d (int) $b10",
      "$b10 \u003d l13 cmp 127L"
    ],
    "succs": [
      "$r121 \u003d new org.apache.commons.beanutils.ConversionException",
      "$r120 \u003d new java.lang.StringBuilder",
      "$i17 \u003d (int) $b11",
      "$b11 \u003d l13 cmp -128L"
    ]
  },
  "9885": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r0 !\u003d null goto $r5 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$ClassLoader\u003e",
    "preds": [
      "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9883)",
      "$r0 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$ClassLoader\u003e"
    ],
    "succs": [
      "$r5 \u003d \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$ClassLoader\u003e",
      "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$java$lang$ClassLoader\u003e \u003d $r5",
      "$r4 :\u003d @caughtexception",
      "$r1 \u003d (java.lang.Class[]) null",
      "$r5 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.ClassLoader\")",
      "return"
    ]
  },
  "4767": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r13 !\u003d null goto $r49 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r12, 0)",
      "$r13 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e"
    ],
    "succs": [
      "$r49 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Integer\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r49, 0)",
      "$r49 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Integer\u003e \u003d $r49"
    ]
  },
  "23199": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $i17 \u003e\u003d 0 goto $r124 \u003d new java.lang.Byte",
    "preds": [
      "$i17 \u003d (int) $b11",
      "$b11 \u003d l13 cmp -128L"
    ],
    "succs": [
      "$b12 \u003d virtualinvoke r1.\u003cjava.lang.Number: byte byteValue()\u003e()",
      "$r122 \u003d new java.lang.StringBuilder",
      "$r124 \u003d new java.lang.Byte",
      "$r123 \u003d new org.apache.commons.beanutils.ConversionException"
    ]
  },
  "9887": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9888)",
    "preds": [
      "$r3 \u003d virtualinvoke $r5.\u003cjava.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])\u003e(\"registerAsParallelCapable\", $r1)",
      "$z1 \u003d virtualinvoke $r3.\u003cjava.lang.reflect.Method: boolean isAccessible()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $r2 \u003d (java.lang.Object[]) null]",
      "virtualinvoke $r3.\u003cjava.lang.reflect.Method: void setAccessible(boolean)\u003e(1)",
      "$r4 :\u003d @caughtexception",
      "$r2 \u003d (java.lang.Object[]) null",
      "return"
    ]
  },
  "8864": {
    "className": "org.springframework.util.Assert",
    "methodSignature": "\u003corg.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8866)",
    "preds": [
      "r2 :\u003d @parameter1: java.lang.String",
      "$z0 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean hasText(java.lang.String)\u003e(r0)"
    ],
    "succs": [
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(r2)",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "return"
    ]
  },
  "22177": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void reportActualBinding(java.util.List)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: boolean isAmbiguousProviderList(java.util.List)\u003e(r0)",
    "preds": [
      "$z0 \u003d interfaceinvoke r0.\u003cjava.util.List: boolean isEmpty()\u003e()",
      "r0 :\u003d @parameter0: java.util.List"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22181)]",
      "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22179)",
      "$z1 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: boolean isAmbiguousProviderList(java.util.List)\u003e(r0)",
      "return"
    ]
  },
  "4771": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r15 !\u003d null goto $r50 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e",
    "preds": [
      "$r15 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r14, 0)"
    ],
    "succs": [
      "$r50 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Long\")",
      "$r50 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r50, 0)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Long\u003e \u003d $r50"
    ]
  },
  "22179": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: void reportActualBinding(java.util.List)\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22179)",
    "preds": [
      "$z1 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: boolean isAmbiguousProviderList(java.util.List)\u003e(r0)",
      "if $z0 \u003d\u003d 0 goto $z1 \u003d staticinvoke \u003corg.slf4j.LoggerFactory: boolean isAmbiguousProviderList(java.util.List)\u003e(r0)"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22181)]",
      "$r1 \u003d new java.lang.StringBuilder",
      "specialinvoke $r1.\u003cjava.lang.StringBuilder: void \u003cinit\u003e()\u003e()",
      "return"
    ]
  },
  "9891": {
    "className": "com.thoughtworks.xstream.core.util.CompositeClassLoader",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CompositeClassLoader: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z1 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9888)",
    "preds": [
      "$r3 \u003d virtualinvoke $r5.\u003cjava.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])\u003e(\"registerAsParallelCapable\", $r1)",
      "$z1 \u003d virtualinvoke $r3.\u003cjava.lang.reflect.Method: boolean isAccessible()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $r2 \u003d (java.lang.Object[]) null]",
      "virtualinvoke $r3.\u003cjava.lang.reflect.Method: void setAccessible(boolean)\u003e(1)",
      "$r4 :\u003d @caughtexception",
      "$r2 \u003d (java.lang.Object[]) null",
      "return"
    ]
  },
  "23204": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $i18 \u003c\u003d 0 goto $b8 \u003d l14 cmp -32768L",
    "preds": [
      "$i18 \u003d (int) $b7",
      "$b7 \u003d l14 cmp 32767L"
    ],
    "succs": [
      "$b8 \u003d l14 cmp -32768L",
      "$r125 \u003d new java.lang.StringBuilder",
      "$i19 \u003d (int) $b8",
      "$r126 \u003d new org.apache.commons.beanutils.ConversionException"
    ]
  },
  "4775": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r17 !\u003d null goto $r51 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e",
    "preds": [
      "$r17 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r16, 0)"
    ],
    "succs": [
      "$r51 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Short\u003e \u003d $r51",
      "$r51 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Short\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r51, 0)"
    ]
  },
  "23207": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $i19 \u003e\u003d 0 goto $r129 \u003d new java.lang.Short",
    "preds": [
      "$b8 \u003d l14 cmp -32768L",
      "$i19 \u003d (int) $b8"
    ],
    "succs": [
      "$r129 \u003d new java.lang.Short",
      "$r127 \u003d new java.lang.StringBuilder",
      "$r128 \u003d new org.apache.commons.beanutils.ConversionException",
      "$s9 \u003d virtualinvoke r1.\u003cjava.lang.Number: short shortValue()\u003e()"
    ]
  },
  "16041": {
    "className": "hudson.util.RobustReflectionConverter",
    "methodSignature": "\u003chudson.util.RobustReflectionConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto $z3 \u003d 0",
    "preds": [
      "$r0 \u003d class \"Lhudson/util/RobustReflectionConverter;\"",
      "$z0 \u003d virtualinvoke $r0.\u003cjava.lang.Class: boolean desiredAssertionStatus()\u003e()"
    ],
    "succs": [
      "$z3 \u003d 1",
      "goto [?\u003d \u003chudson.util.RobustReflectionConverter: boolean $assertionsDisabled\u003e \u003d $z3]",
      "$z3 \u003d 0",
      "\u003chudson.util.RobustReflectionConverter: boolean $assertionsDisabled\u003e \u003d $z3"
    ]
  },
  "4778": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r18 !\u003d null goto $r52 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
    "preds": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r51, 0)",
      "$r18 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e"
    ],
    "succs": [
      "$r52 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.Mapper$Null\")",
      "$r52 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r52, 0)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$com$thoughtworks$xstream$mapper$Mapper$Null\u003e \u003d $r52"
    ]
  },
  "23211": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z3 \u003d\u003d 0 goto $z4 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Long;\")",
    "preds": [
      "$z3 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Integer;\")",
      "if $z2 \u003d\u003d 0 goto $z3 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Integer;\")"
    ],
    "succs": [
      "if $z4 \u003d\u003d 0 goto $z5 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Float;\")",
      "$b4 \u003d l15 cmp 2147483647L",
      "$z4 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/lang/Long;\")",
      "l15 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()"
    ]
  },
  "13996": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r9 \u003d \"yyyy-MM-dd HH:mm:ss.S \\\u0027UTC\\\u0027\"",
    "preds": [
      "specialinvoke $r1.\u003cjava.util.ArrayList: void \u003cinit\u003e()\u003e()",
      "z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat()\u003e()"
    ],
    "succs": [
      "goto [?\u003d \u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_PATTERN\u003e \u003d $r9]",
      "$r9 \u003d \"yyyy-MM-dd HH:mm:ss.S z\"",
      "$r9 \u003d \"yyyy-MM-dd HH:mm:ss.S \\\u0027UTC\\\u0027\"",
      "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_PATTERN\u003e \u003d $r9"
    ]
  },
  "4781": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r19 !\u003d null goto $r53 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e",
    "preds": [
      "$r19 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r52, 0)"
    ],
    "succs": [
      "$r53 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigDecimal\u003e \u003d $r53",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r53, 0)",
      "$r53 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.math.BigDecimal\")"
    ]
  },
  "13998": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto $r10 \u003d \"yyyy-MM-dd G HH:mm:ss.S \\\u0027UTC\\\u0027\"",
    "preds": [
      "goto [?\u003d \u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_PATTERN\u003e \u003d $r9]",
      "$r9 \u003d \"yyyy-MM-dd HH:mm:ss.S \\\u0027UTC\\\u0027\"",
      "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_PATTERN\u003e \u003d $r9"
    ],
    "succs": [
      "goto [?\u003d \u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_ERA_PATTERN\u003e \u003d $r10]",
      "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_ERA_PATTERN\u003e \u003d $r10",
      "$r10 \u003d \"yyyy-MM-dd G HH:mm:ss.S z\"",
      "$r10 \u003d \"yyyy-MM-dd G HH:mm:ss.S \\\u0027UTC\\\u0027\""
    ]
  },
  "4784": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r20 !\u003d null goto $r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e",
    "preds": [
      "$r20 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r53, 0)"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e \u003d $r54",
      "$r54 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.math.BigInteger\")",
      "$r54 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$math$BigInteger\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r54, 0)"
    ]
  },
  "14001": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14001)",
    "preds": [
      "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: java.lang.String DEFAULT_ERA_PATTERN\u003e \u003d $r10",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss.S z\")"
    ],
    "succs": [
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss.S a\")",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss.S z\")",
      "goto [?\u003d interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss.S a\")]"
    ]
  },
  "4787": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r21 !\u003d null goto $r55 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
    "preds": [
      "$r21 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r54, 0)"
    ],
    "succs": [
      "$r55 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e \u003d $r55",
      "$r55 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.String\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r55, 0)"
    ]
  },
  "4790": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r22 !\u003d null goto $r56 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e",
    "preds": [
      "$r22 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r55, 0)"
    ],
    "succs": [
      "$r56 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.net.URL\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e \u003d $r56",
      "$r56 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URL\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r56, 0)"
    ]
  },
  "23222": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $i22 \u003c\u003d 0 goto $r138 \u003d new java.lang.Float",
    "preds": [
      "$i22 \u003d (int) $b2",
      "$b2 \u003d $d1 cmpl 3.4028234663852886E38"
    ],
    "succs": [
      "$r137 \u003d new org.apache.commons.beanutils.ConversionException",
      "$f0 \u003d virtualinvoke r1.\u003cjava.lang.Number: float floatValue()\u003e()",
      "$r138 \u003d new java.lang.Float",
      "$r136 \u003d new java.lang.StringBuilder"
    ]
  },
  "14006": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14006)",
    "preds": [
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss z\")",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ssz\")"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseISO8601TimeZoneInDateFormat()\u003e()]",
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseISO8601TimeZoneInDateFormat()\u003e()",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss \\\u0027UTC\\\u0027\")"
    ]
  },
  "14008": {
    "className": "com.thoughtworks.xstream.converters.basic.DateConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.basic.DateConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14009)",
    "preds": [
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseISO8601TimeZoneInDateFormat()\u003e()]",
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseISO8601TimeZoneInDateFormat()\u003e()",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ss \\\u0027UTC\\\u0027\")"
    ],
    "succs": [
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd\\\u0027T\\\u0027HH:mm:ssX\")",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ssa\")",
      "goto [?\u003d interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd HH:mm:ssa\")]",
      "interfaceinvoke $r1.\u003cjava.util.List: boolean add(java.lang.Object)\u003e(\"yyyy-MM-dd\\\u0027T\\\u0027HH:mm:ss.SX\")"
    ]
  },
  "4793": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r23 !\u003d null goto $r57 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
    "preds": [
      "$r23 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r56, 0)"
    ],
    "succs": [
      "$r57 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e",
      "$r57 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.io.File\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r57, 0)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$io$File\u003e \u003d $r57"
    ]
  },
  "22201": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()\u003e",
    "stmt": "if $i1 \u003d\u003d 0 goto \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 1",
    "preds": [
      "$i1 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e",
      "entermonitor class \"Lorg/slf4j/LoggerFactory;\""
    ],
    "succs": [
      "goto [?\u003d exitmonitor class \"Lorg/slf4j/LoggerFactory;\"]",
      "$r5 :\u003d @caughtexception",
      "\u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 1",
      "staticinvoke \u003corg.slf4j.LoggerFactory: void performInitialization()\u003e()",
      "exitmonitor class \"Lorg/slf4j/LoggerFactory;\""
    ]
  },
  "4796": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r24 !\u003d null goto $r58 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
    "preds": [
      "$r24 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r57, 0)"
    ],
    "succs": [
      "$r58 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e",
      "$r58 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Class\")",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r58, 0)",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$Class\u003e \u003d $r58"
    ]
  },
  "23228": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z11 \u003d\u003d 0 goto $z12 \u003d r1 instanceof java.lang.Double",
    "preds": [
      "$z11 \u003d r1 instanceof java.lang.Float",
      "if $z7 \u003d\u003d 0 goto $z8 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/math/BigInteger;\")"
    ],
    "succs": [
      "$r140 \u003d new java.math.BigDecimal",
      "goto [?\u003d $r140 \u003d new java.math.BigDecimal]",
      "$z12 \u003d r1 instanceof java.lang.Double",
      "if $z12 \u003d\u003d 0 goto $z13 \u003d r1 instanceof java.math.BigInteger"
    ]
  },
  "23229": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z12 \u003d\u003d 0 goto $z13 \u003d r1 instanceof java.math.BigInteger",
    "preds": [
      "$z12 \u003d r1 instanceof java.lang.Double",
      "if $z11 \u003d\u003d 0 goto $z12 \u003d r1 instanceof java.lang.Double"
    ],
    "succs": [
      "$r140 \u003d new java.math.BigDecimal",
      "$r34 \u003d virtualinvoke r1.\u003cjava.lang.Object: java.lang.String toString()\u003e()",
      "$z13 \u003d r1 instanceof java.math.BigInteger",
      "if $z13 \u003d\u003d 0 goto $z14 \u003d r1 instanceof java.math.BigDecimal"
    ]
  },
  "22205": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()\u003e",
    "stmt": "if $i1 \u003d\u003d 0 goto \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 1",
    "preds": [
      "$i1 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e",
      "entermonitor class \"Lorg/slf4j/LoggerFactory;\""
    ],
    "succs": [
      "goto [?\u003d exitmonitor class \"Lorg/slf4j/LoggerFactory;\"]",
      "$r5 :\u003d @caughtexception",
      "\u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e \u003d 1",
      "staticinvoke \u003corg.slf4j.LoggerFactory: void performInitialization()\u003e()",
      "exitmonitor class \"Lorg/slf4j/LoggerFactory;\""
    ]
  },
  "4799": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4800)",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(7)",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r58, 0)"
    ],
    "succs": [
      "r25 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Paths\")",
      "if r25 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4802)",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()"
    ]
  },
  "23231": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z13 \u003d\u003d 0 goto $z14 \u003d r1 instanceof java.math.BigDecimal",
    "preds": [
      "$z13 \u003d r1 instanceof java.math.BigInteger",
      "if $z12 \u003d\u003d 0 goto $z13 \u003d r1 instanceof java.math.BigInteger"
    ],
    "succs": [
      "$r141 \u003d new java.math.BigDecimal",
      "$r31 \u003d (java.math.BigInteger) r1",
      "$z14 \u003d r1 instanceof java.math.BigDecimal",
      "if $z14 \u003d\u003d 0 goto $l1 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()"
    ]
  },
  "22207": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()\u003e",
    "stmt": "tableswitch($i2) {     case 1: goto $r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e;     case 2: goto $r2 \u003d new java.lang.IllegalStateException;     case 3: goto $r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e;     case 4: goto $r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e;     default: goto $r4 \u003d new java.lang.IllegalStateException; }",
    "preds": [
      "$i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e",
      "goto [?\u003d $i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e]"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalStateException",
      "$r4 \u003d new java.lang.IllegalStateException",
      "$r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e",
      "$r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e",
      "$r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e",
      "specialinvoke $r4.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"Unreachable code\")",
      "return $r1",
      "return $r0",
      "specialinvoke $r2.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also https://www.slf4j.org/codes.html#unsuccessfulInit\")",
      "return $r3"
    ]
  },
  "22208": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()\u003e",
    "stmt": "tableswitch($i2) {     case 1: goto $r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e;     case 2: goto $r2 \u003d new java.lang.IllegalStateException;     case 3: goto $r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e;     case 4: goto $r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e;     default: goto $r4 \u003d new java.lang.IllegalStateException; }",
    "preds": [
      "$i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e",
      "goto [?\u003d $i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e]"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalStateException",
      "$r4 \u003d new java.lang.IllegalStateException",
      "$r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e",
      "$r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e",
      "$r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e",
      "specialinvoke $r4.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"Unreachable code\")",
      "return $r1",
      "return $r0",
      "specialinvoke $r2.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also https://www.slf4j.org/codes.html#unsuccessfulInit\")",
      "return $r3"
    ]
  },
  "4801": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if r25 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4802)",
    "preds": [
      "r25 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.nio.file.Paths\")",
      "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4800)"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "$r40 :\u003d @caughtexception",
      "$r26 \u003d newarray (java.lang.Class)[2]",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "23233": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z14 \u003d\u003d 0 goto $l1 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
    "preds": [
      "$z14 \u003d r1 instanceof java.math.BigDecimal",
      "if $z13 \u003d\u003d 0 goto $z14 \u003d r1 instanceof java.math.BigDecimal"
    ],
    "succs": [
      "$r25 \u003d staticinvoke \u003cjava.math.BigDecimal: java.math.BigDecimal valueOf(long)\u003e($l1)",
      "$r28 \u003d virtualinvoke r1.\u003cjava.lang.Object: java.lang.String toString()\u003e()",
      "$l1 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
      "$r142 \u003d new java.math.BigDecimal"
    ]
  },
  "22209": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()\u003e",
    "stmt": "tableswitch($i2) {     case 1: goto $r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e;     case 2: goto $r2 \u003d new java.lang.IllegalStateException;     case 3: goto $r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e;     case 4: goto $r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e;     default: goto $r4 \u003d new java.lang.IllegalStateException; }",
    "preds": [
      "$i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e",
      "goto [?\u003d $i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e]"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalStateException",
      "$r4 \u003d new java.lang.IllegalStateException",
      "$r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e",
      "$r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e",
      "$r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e",
      "specialinvoke $r4.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"Unreachable code\")",
      "return $r1",
      "return $r0",
      "specialinvoke $r2.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also https://www.slf4j.org/codes.html#unsuccessfulInit\")",
      "return $r3"
    ]
  },
  "22210": {
    "className": "org.slf4j.LoggerFactory",
    "methodSignature": "\u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()\u003e",
    "stmt": "tableswitch($i2) {     case 1: goto $r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e;     case 2: goto $r2 \u003d new java.lang.IllegalStateException;     case 3: goto $r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e;     case 4: goto $r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e;     default: goto $r4 \u003d new java.lang.IllegalStateException; }",
    "preds": [
      "$i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e",
      "goto [?\u003d $i2 \u003d \u003corg.slf4j.LoggerFactory: int INITIALIZATION_STATE\u003e]"
    ],
    "succs": [
      "$r2 \u003d new java.lang.IllegalStateException",
      "$r4 \u003d new java.lang.IllegalStateException",
      "$r0 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER\u003e",
      "$r3 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER\u003e",
      "$r1 \u003d \u003corg.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider PROVIDER\u003e",
      "specialinvoke $r4.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"Unreachable code\")",
      "return $r1",
      "return $r0",
      "specialinvoke $r2.\u003cjava.lang.IllegalStateException: void \u003cinit\u003e(java.lang.String)\u003e(\"org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also https://www.slf4j.org/codes.html#unsuccessfulInit\")",
      "return $r3"
    ]
  },
  "4803": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r27 !\u003d null goto $r59 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "$r26 \u003d newarray (java.lang.Class)[2]"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "$r40 :\u003d @caughtexception",
      "$r59 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.String\")",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "$r26[0] \u003d $r59",
      "$r59 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$lang$String\u003e \u003d $r59"
    ]
  },
  "23235": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z14 \u003d\u003d 0 goto $l1 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
    "preds": [
      "$z14 \u003d r1 instanceof java.math.BigDecimal",
      "if $z13 \u003d\u003d 0 goto $z14 \u003d r1 instanceof java.math.BigDecimal"
    ],
    "succs": [
      "$r25 \u003d staticinvoke \u003cjava.math.BigDecimal: java.math.BigDecimal valueOf(long)\u003e($l1)",
      "$r28 \u003d virtualinvoke r1.\u003cjava.lang.Object: java.lang.String toString()\u003e()",
      "$l1 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
      "$r142 \u003d new java.math.BigDecimal"
    ]
  },
  "23236": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z10 \u003d\u003d 0 goto $l0 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
    "preds": [
      "if $z8 \u003d\u003d 0 goto $r143 \u003d new java.lang.StringBuilder",
      "$z10 \u003d r1 instanceof java.math.BigDecimal"
    ],
    "succs": [
      "$l0 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
      "$r20 \u003d staticinvoke \u003cjava.math.BigInteger: java.math.BigInteger valueOf(long)\u003e($l0)",
      "$r22 \u003d (java.math.BigDecimal) r1",
      "$r23 \u003d virtualinvoke $r22.\u003cjava.math.BigDecimal: java.math.BigInteger toBigInteger()\u003e()"
    ]
  },
  "4806": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r28 !\u003d null goto $r60 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class array$Ljava$lang$String\u003e",
    "preds": [
      "$r26[0] \u003d $r59",
      "$r28 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class array$Ljava$lang$String\u003e"
    ],
    "succs": [
      "$r60 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"[Ljava.lang.String;\")",
      "$r43 :\u003d @caughtexception",
      "$r40 :\u003d @caughtexception",
      "$r60 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class array$Ljava$lang$String\u003e",
      "$r26[1] \u003d $r60",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class array$Ljava$lang$String\u003e \u003d $r60",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "23238": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z10 \u003d\u003d 0 goto $l0 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
    "preds": [
      "if $z8 \u003d\u003d 0 goto $r143 \u003d new java.lang.StringBuilder",
      "$z10 \u003d r1 instanceof java.math.BigDecimal"
    ],
    "succs": [
      "$l0 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
      "$r20 \u003d staticinvoke \u003cjava.math.BigInteger: java.math.BigInteger valueOf(long)\u003e($l0)",
      "$r22 \u003d (java.math.BigDecimal) r1",
      "$r23 \u003d virtualinvoke $r22.\u003cjava.math.BigDecimal: java.math.BigInteger toBigInteger()\u003e()"
    ]
  },
  "4807": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r39 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4808)",
    "preds": [
      "$r26[1] \u003d $r60",
      "$r39 \u003d virtualinvoke r25.\u003cjava.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])\u003e(\"get\", $r26)"
    ],
    "succs": [
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4812)]",
      "$r40 :\u003d @caughtexception",
      "$r29 \u003d newarray (java.lang.Object)[2]",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r29[0] \u003d \".\"",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "23239": {
    "className": "org.apache.commons.beanutils.converters.NumberConverter",
    "methodSignature": "\u003corg.apache.commons.beanutils.converters.NumberConverter: java.lang.Object toNumber(java.lang.Class,java.lang.Class,java.lang.Number)\u003e",
    "stmt": "if $z8 \u003d\u003d 0 goto $r143 \u003d new java.lang.StringBuilder",
    "preds": [
      "$z8 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/math/BigInteger;\")",
      "if $z7 \u003d\u003d 0 goto $z8 \u003d virtualinvoke r0.\u003cjava.lang.Object: boolean equals(java.lang.Object)\u003e(class \"Ljava/math/BigInteger;\")"
    ],
    "succs": [
      "specialinvoke $r143.\u003cjava.lang.StringBuilder: void \u003cinit\u003e()\u003e()",
      "if $z10 \u003d\u003d 0 goto $l0 \u003d virtualinvoke r1.\u003cjava.lang.Number: long longValue()\u003e()",
      "$r143 \u003d new java.lang.StringBuilder",
      "$z10 \u003d r1 instanceof java.math.BigDecimal"
    ]
  },
  "4809": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if r61 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4810)",
    "preds": [
      "$r29[1] \u003d $r30",
      "r61 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(null, $r29)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r31, 0)",
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4812)]",
      "$r40 :\u003d @caughtexception",
      "$r31 \u003d virtualinvoke r61.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "8908": {
    "className": "org.springframework.util.Assert",
    "methodSignature": "\u003corg.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8910)",
    "preds": [
      "r2 :\u003d @parameter1: java.lang.String",
      "$z0 \u003d staticinvoke \u003corg.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)\u003e(r0)"
    ],
    "succs": [
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(r2)",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "return"
    ]
  },
  "4813": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if r61 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4810)",
    "preds": [
      "$r29[1] \u003d $r30",
      "r61 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(null, $r29)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r31, 0)",
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4812)]",
      "$r40 :\u003d @caughtexception",
      "$r31 \u003d virtualinvoke r61.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "4814": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if r61 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4810)",
    "preds": [
      "$r29[1] \u003d $r30",
      "r61 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(null, $r29)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r31, 0)",
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4812)]",
      "$r40 :\u003d @caughtexception",
      "$r31 \u003d virtualinvoke r61.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "7886": {
    "className": "net.sf.ezmorph.array.CharArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.CharArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7887)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.CharArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.CharArrayMorpher: java.lang.Class CHAR_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.CharArrayMorpher: java.lang.Class CHAR_ARRAY_CLASS\u003e \u003d $r6]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "r0[0] \u003d \"[C\"",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "4815": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if r61 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4810)",
    "preds": [
      "$r29[1] \u003d $r30",
      "r61 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(null, $r29)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r31, 0)",
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4812)]",
      "$r40 :\u003d @caughtexception",
      "$r31 \u003d virtualinvoke r61.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "4816": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if r61 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4810)",
    "preds": [
      "$r29[1] \u003d $r30",
      "r61 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(null, $r29)"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r31, 0)",
      "$r43 :\u003d @caughtexception",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4812)]",
      "$r40 :\u003d @caughtexception",
      "$r31 \u003d virtualinvoke r61.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()",
      "$r42 :\u003d @caughtexception",
      "$r41 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]"
    ]
  },
  "4817": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $z4 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4818)",
    "preds": [
      "$r40 :\u003d @caughtexception",
      "goto [?\u003d $z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()]",
      "$z4 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(4)]",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.awt.font.TextAttribute\", 0)",
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(4)"
    ]
  },
  "7889": {
    "className": "net.sf.ezmorph.array.CharArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.CharArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7887)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.CharArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.CharArrayMorpher: java.lang.Class CHAR_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.CharArrayMorpher: java.lang.Class CHAR_ARRAY_CLASS\u003e \u003d $r6]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "r0[0] \u003d \"[C\"",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "4820": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $z1 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4821)",
    "preds": [
      "goto [?\u003d $z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(4)]",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.awt.font.TextAttribute\", 0)",
      "$z1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(4)"
    ],
    "succs": [
      "goto [?\u003d $z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)]",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.nio.charset.Charset\", 1)",
      "$z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.util.Currency\", 1)"
    ]
  },
  "4824": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $z2 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4825)",
    "preds": [
      "goto [?\u003d $z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)]",
      "$z2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.util.Currency\", 1)"
    ],
    "succs": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.util.UUID\", 1)",
      "goto [?\u003d $r32 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e]",
      "$r32 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e"
    ]
  },
  "4827": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $r32 !\u003d null goto $r62 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e",
    "preds": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.util.UUID\", 1)",
      "goto [?\u003d $r32 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e]",
      "$r32 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e"
    ],
    "succs": [
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r62, 1)",
      "$r62 \u003d staticinvoke \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$(java.lang.String)\u003e(\"java.net.URI\")",
      "\u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e \u003d $r62",
      "$r62 \u003d \u003ccom.thoughtworks.xstream.XStream: java.lang.Class class$java$net$URI\u003e"
    ]
  },
  "4833": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setupImmutableTypes()\u003e",
    "stmt": "if $z3 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4834)",
    "preds": [
      "$z3 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(8)",
      "virtualinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e($r38, 1)"
    ],
    "succs": [
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.time.Duration\", 0)",
      "specialinvoke r0.\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e(\"java.time.Instant\", 0)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4866)]",
      "return"
    ]
  },
  "15087": {
    "className": "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15088)",
    "preds": [
      "r7 \u003d null",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)"
    ],
    "succs": [
      "$r1 \u003d virtualinvoke r8.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "r8 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"com.thoughtworks.xstream.converters.extended.StackTraceElementFactory15\", 0)",
      "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15094)",
      "goto [?\u003d (branch)]",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception"
    ]
  },
  "15091": {
    "className": "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15088)",
    "preds": [
      "r7 \u003d null",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)"
    ],
    "succs": [
      "$r1 \u003d virtualinvoke r8.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "r8 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"com.thoughtworks.xstream.converters.extended.StackTraceElementFactory15\", 0)",
      "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15094)",
      "goto [?\u003d (branch)]",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception"
    ]
  },
  "15092": {
    "className": "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15088)",
    "preds": [
      "r7 \u003d null",
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e(5)"
    ],
    "succs": [
      "$r1 \u003d virtualinvoke r8.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "r8 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"com.thoughtworks.xstream.converters.extended.StackTraceElementFactory15\", 0)",
      "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15094)",
      "goto [?\u003d (branch)]",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception"
    ]
  },
  "15094": {
    "className": "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15094)",
    "preds": [
      "$r1 \u003d virtualinvoke r8.\u003cjava.lang.Class: java.lang.Object newInstance()\u003e()",
      "r8 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"com.thoughtworks.xstream.converters.extended.StackTraceElementFactory15\", 0)",
      "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15088)",
      "goto [?\u003d (branch)]",
      "r7 \u003d (com.thoughtworks.xstream.converters.extended.StackTraceElementFactory) $r1",
      "$r6 :\u003d @caughtexception",
      "$r5 :\u003d @caughtexception"
    ],
    "succs": [
      "goto [?\u003d virtualinvoke r7.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)\u003e(\"a\", \"b\")]",
      "virtualinvoke r7.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)\u003e(\"a\", \"b\")",
      "$r2 \u003d new com.thoughtworks.xstream.converters.extended.StackTraceElementFactory",
      "$r4 :\u003d @caughtexception",
      "specialinvoke $r2.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: void \u003cinit\u003e()\u003e()",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "15097": {
    "className": "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d virtualinvoke r7.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)\u003e(\"a\", \"b\")]",
    "preds": [
      "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15094)",
      "goto [?\u003d (branch)]",
      "$r5 :\u003d @caughtexception"
    ],
    "succs": [
      "virtualinvoke r7.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)\u003e(\"a\", \"b\")",
      "$r4 :\u003d @caughtexception",
      "goto [?\u003d \u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: com.thoughtworks.xstream.converters.extended.StackTraceElementFactory FACTORY\u003e \u003d r7]",
      "r7 \u003d null",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "15098": {
    "className": "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d virtualinvoke r7.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)\u003e(\"a\", \"b\")]",
    "preds": [
      "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(15094)",
      "goto [?\u003d (branch)]",
      "$r5 :\u003d @caughtexception"
    ],
    "succs": [
      "virtualinvoke r7.\u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementFactory: java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)\u003e(\"a\", \"b\")",
      "$r4 :\u003d @caughtexception",
      "goto [?\u003d \u003ccom.thoughtworks.xstream.converters.extended.StackTraceElementConverter: com.thoughtworks.xstream.converters.extended.StackTraceElementFactory FACTORY\u003e \u003d r7]",
      "r7 \u003d null",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "7933": {
    "className": "net.sf.ezmorph.array.ByteArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ByteArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7934)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.ByteArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "r0 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.ByteArrayMorpher: java.lang.Class BYTE_ARRAY_CLASS\u003e \u003d $r6]",
      "\u003cnet.sf.ezmorph.array.ByteArrayMorpher: java.lang.Class BYTE_ARRAY_CLASS\u003e \u003d $r6",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception",
      "r0[0] \u003d \"[B\""
    ]
  },
  "7936": {
    "className": "net.sf.ezmorph.array.ByteArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ByteArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7934)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.ByteArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "r0 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.ByteArrayMorpher: java.lang.Class BYTE_ARRAY_CLASS\u003e \u003d $r6]",
      "\u003cnet.sf.ezmorph.array.ByteArrayMorpher: java.lang.Class BYTE_ARRAY_CLASS\u003e \u003d $r6",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception",
      "r0[0] \u003d \"[B\""
    ]
  },
  "4867": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void addImmutableTypeDynamically(java.lang.String,boolean)\u003e",
    "stmt": "if r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4868)",
    "preds": [
      "r1 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(r0)",
      "z0 :\u003d @parameter1: boolean"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4870)]",
      "virtualinvoke r2.\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e(r1, z0)",
      "return"
    ]
  },
  "9999": {
    "className": "com.thoughtworks.xstream.core.util.CustomObjectOutputStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r0 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.Class class$com$thoughtworks$xstream$core$util$CustomObjectOutputStream\u003e",
    "preds": [
      "$r0 \u003d \u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.Class class$com$thoughtworks$xstream$core$util$CustomObjectOutputStream\u003e"
    ],
    "succs": [
      "$r2 \u003d \u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.Class class$com$thoughtworks$xstream$core$util$CustomObjectOutputStream\u003e",
      "$r1 \u003d virtualinvoke $r2.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
      "$r2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.util.CustomObjectOutputStream\")",
      "\u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.Class class$com$thoughtworks$xstream$core$util$CustomObjectOutputStream\u003e \u003d $r2"
    ]
  },
  "12058": {
    "className": "com.thoughtworks.xstream.mapper.FieldAliasingMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper)\u003e",
    "stmt": "if $r4 !\u003d null goto $r7 \u003d \u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e",
    "preds": [
      "$r4 \u003d \u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e",
      "r0.\u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map aliasToFieldMap\u003e \u003d $r3"
    ],
    "succs": [
      "$r7 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.ElementIgnoringMapper\")",
      "\u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e \u003d $r7",
      "$r7 \u003d \u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$ElementIgnoringMapper\u003e",
      "$r5 \u003d virtualinvoke r0.\u003ccom.thoughtworks.xstream.mapper.FieldAliasingMapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e($r7)"
    ]
  },
  "11042": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r0 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(\"java.specification.version\")",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAndroid()\u003e()"
    ],
    "succs": [
      "$f0 \u003d staticinvoke \u003cjava.lang.Float: float parseFloat(java.lang.String)\u003e($r0)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11044)]",
      "$r1 :\u003d @caughtexception",
      "$r0 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(\"java.specification.version\")",
      "$f0 \u003d 1.5F",
      "return 1.4F"
    ]
  },
  "11045": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: float getMajorJavaVersion()\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r0 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(\"java.specification.version\")",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean isAndroid()\u003e()"
    ],
    "succs": [
      "$f0 \u003d staticinvoke \u003cjava.lang.Float: float parseFloat(java.lang.String)\u003e($r0)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11044)]",
      "$r1 :\u003d @caughtexception",
      "$r0 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(\"java.specification.version\")",
      "$f0 \u003d 1.5F",
      "return 1.4F"
    ]
  },
  "7980": {
    "className": "net.sf.ezmorph.array.ShortArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ShortArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7981)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.ShortArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "goto [?\u003d \u003cnet.sf.ezmorph.array.ShortArrayMorpher: java.lang.Class SHORT_ARRAY_CLASS\u003e \u003d $r6]",
      "\u003cnet.sf.ezmorph.array.ShortArrayMorpher: java.lang.Class SHORT_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "r0[0] \u003d \"[S\"",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "11055": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e",
    "stmt": "if i0 \u003e\u003d 1 goto $f0 \u003d \u003ccom.thoughtworks.xstream.core.JVM: float majorJavaVersion\u003e",
    "preds": [
      "i0 :\u003d @parameter0: int"
    ],
    "succs": [
      "$f0 \u003d \u003ccom.thoughtworks.xstream.core.JVM: float majorJavaVersion\u003e",
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"Java version range starts with at least 1.\")",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "$b1 \u003d $f0 cmpg 9.0F"
    ]
  },
  "7983": {
    "className": "net.sf.ezmorph.array.ShortArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.ShortArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(7981)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.ShortArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "goto [?\u003d \u003cnet.sf.ezmorph.array.ShortArrayMorpher: java.lang.Class SHORT_ARRAY_CLASS\u003e \u003d $r6]",
      "\u003cnet.sf.ezmorph.array.ShortArrayMorpher: java.lang.Class SHORT_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "r0[0] \u003d \"[S\"",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "11057": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e",
    "stmt": "if $i3 \u003e\u003d 0 goto $f4 \u003d (float) i0",
    "preds": [
      "$i3 \u003d (int) $b1",
      "$b1 \u003d $f0 cmpg 9.0F"
    ],
    "succs": [
      "$f3 \u003d $f2 * 0.1F",
      "$f1 \u003d \u003ccom.thoughtworks.xstream.core.JVM: float majorJavaVersion\u003e",
      "$f4 \u003d (float) i0",
      "$f2 \u003d (float) i0"
    ]
  },
  "9009": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean hasLength(java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto $z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d 0]",
      "$z1 \u003d 0",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "if $z0 \u003d\u003d 0 goto $z1 \u003d 1"
    ]
  },
  "9010": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean hasLength(java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d 1",
    "preds": [
      "if r0 !\u003d null goto $z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()"
    ],
    "succs": [
      "goto [?\u003d $z1 \u003d 0]",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9013)]",
      "$z1 \u003d 1",
      "$z1 \u003d 0"
    ]
  },
  "11060": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: boolean isVersion(int)\u003e",
    "stmt": "if $i4 \u003c 0 goto $z0 \u003d 0",
    "preds": [
      "$b2 \u003d $f1 cmpl $f4",
      "$i4 \u003d (int) $b2"
    ],
    "succs": [
      "return $z0",
      "$z0 \u003d 0",
      "$z0 \u003d 1",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11061)]"
    ]
  },
  "11065": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: boolean isAndroid()\u003e",
    "stmt": "if $i0 \u003d\u003d $i2 goto $z0 \u003d 0",
    "preds": [
      "$i2 \u003d (int) -1",
      "$i0 \u003d virtualinvoke $r0.\u003cjava.lang.String: int indexOf(java.lang.String)\u003e(\"Android\")"
    ],
    "succs": [
      "return $z0",
      "$z0 \u003d 0",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11067)]",
      "$z0 \u003d 1"
    ]
  },
  "4921": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)\u003e",
    "stmt": "if $r1 !\u003d null goto $r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e",
    "preds": [
      "r3 :\u003d @parameter1: java.lang.Class",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e"
    ],
    "succs": [
      "virtualinvoke $r4.\u003ccom.thoughtworks.xstream.mapper.ClassAliasingMapper: void addClassAlias(java.lang.String,java.lang.Class)\u003e(r2, r3)",
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e",
      "$r5 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r6 \u003d new java.lang.StringBuffer"
    ]
  },
  "9020": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean hasText(java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto $z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "if $z0 \u003d\u003d 0 goto $z1 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e(r0)",
      "goto [?\u003d $z2 \u003d 0]",
      "$z2 \u003d 0",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()"
    ]
  },
  "9021": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean hasText(java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $z1 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e(r0)",
    "preds": [
      "if r0 !\u003d null goto $z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.String: boolean isEmpty()\u003e()"
    ],
    "succs": [
      "$z1 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e(r0)",
      "goto [?\u003d $z2 \u003d 0]",
      "$z2 \u003d 0",
      "if $z1 !\u003d 0 goto $z2 \u003d 1"
    ]
  },
  "9022": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean hasText(java.lang.String)\u003e",
    "stmt": "if $z1 !\u003d 0 goto $z2 \u003d 1",
    "preds": [
      "$z1 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e(r0)",
      "if $z0 \u003d\u003d 0 goto $z1 \u003d staticinvoke \u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e(r0)"
    ],
    "succs": [
      "$z2 \u003d 1",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9025)]",
      "goto [?\u003d $z2 \u003d 0]",
      "$z2 \u003d 0"
    ]
  },
  "11071": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e",
    "stmt": "if $r1 !\u003d null goto $r14 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM\u003e",
    "preds": [
      "$r1 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM\u003e",
      "z0 :\u003d @parameter1: boolean"
    ],
    "succs": [
      "$r14 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM\")",
      "$r13 :\u003d @caughtexception",
      "$r12 :\u003d @caughtexception",
      "$r14 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM\u003e",
      "$r2 \u003d virtualinvoke $r14.\u003cjava.lang.Class: java.lang.ClassLoader getClassLoader()\u003e()",
      "return null",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM\u003e \u003d $r14"
    ]
  },
  "4927": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)\u003e",
    "stmt": "if $r1 !\u003d null goto $r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e",
    "preds": [
      "r3 :\u003d @parameter1: java.lang.Class",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e"
    ],
    "succs": [
      "virtualinvoke $r4.\u003ccom.thoughtworks.xstream.mapper.ClassAliasingMapper: void addTypeAlias(java.lang.String,java.lang.Class)\u003e(r2, r3)",
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper\u003e",
      "$r5 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r6 \u003d new java.lang.StringBuffer"
    ]
  },
  "11072": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e",
    "stmt": "goto [?\u003d $r2 \u003d virtualinvoke $r14.\u003cjava.lang.Class: java.lang.ClassLoader getClassLoader()\u003e()]",
    "preds": [
      "$r14 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM\u003e \u003d $r14"
    ],
    "succs": [
      "$r2 \u003d virtualinvoke $r14.\u003cjava.lang.Class: java.lang.ClassLoader getClassLoader()\u003e()",
      "return null",
      "$r13 :\u003d @caughtexception",
      "$r10 \u003d newarray (java.lang.Object)[3]",
      "$r12 :\u003d @caughtexception"
    ]
  },
  "10048": {
    "className": "com.thoughtworks.xstream.mapper.DefaultMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultMapper: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r0 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultMapper\u003e",
    "preds": [
      "$r0 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultMapper\u003e"
    ],
    "succs": [
      "$r1 \u003d virtualinvoke $r2.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
      "$r2 \u003d \u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultMapper\u003e",
      "$r2 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.mapper.DefaultMapper\")",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.Class class$com$thoughtworks$xstream$mapper$DefaultMapper\u003e \u003d $r2"
    ]
  },
  "11073": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e",
    "stmt": "goto [?\u003d $r2 \u003d virtualinvoke $r14.\u003cjava.lang.Class: java.lang.ClassLoader getClassLoader()\u003e()]",
    "preds": [
      "$r14 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM\u003e \u003d $r14"
    ],
    "succs": [
      "$r2 \u003d virtualinvoke $r14.\u003cjava.lang.Class: java.lang.ClassLoader getClassLoader()\u003e()",
      "return null",
      "$r13 :\u003d @caughtexception",
      "$r10 \u003d newarray (java.lang.Object)[3]",
      "$r12 :\u003d @caughtexception"
    ]
  },
  "10052": {
    "className": "com.thoughtworks.xstream.mapper.DefaultMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.DefaultMapper: void \u003cclinit\u003e()\u003e",
    "stmt": "if $i1 \u003c\u003d 0 goto $r3 \u003d \".N/A\"",
    "preds": [
      "$r1 \u003d virtualinvoke $r2.\u003cjava.lang.Class: java.lang.String getName()\u003e()",
      "$i1 \u003d virtualinvoke $r1.\u003cjava.lang.String: int indexOf(java.lang.String)\u003e(\".xstream.\")"
    ],
    "succs": [
      "goto [?\u003d \u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.String XSTREAM_PACKAGE_ROOT\u003e \u003d $r3]",
      "$r3 \u003d virtualinvoke $r1.\u003cjava.lang.String: java.lang.String substring(int,int)\u003e(0, $i0)",
      "\u003ccom.thoughtworks.xstream.mapper.DefaultMapper: java.lang.String XSTREAM_PACKAGE_ROOT\u003e \u003d $r3",
      "$r3 \u003d \".N/A\""
    ]
  },
  "9029": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e",
    "stmt": "if $z0 !\u003d 0 goto i2 \u003d i2 + 1",
    "preds": [
      "$z0 \u003d staticinvoke \u003cjava.lang.Character: boolean isWhitespace(char)\u003e($c1)",
      "$c1 \u003d interfaceinvoke r0.\u003cjava.lang.CharSequence: char charAt(int)\u003e(i2)"
    ],
    "succs": [
      "i2 \u003d i2 + 1",
      "return 1",
      "goto [?\u003d (branch)]"
    ]
  },
  "9030": {
    "className": "org.springframework.util.StringUtils",
    "methodSignature": "\u003corg.springframework.util.StringUtils: boolean containsText(java.lang.CharSequence)\u003e",
    "stmt": "if i2 \u003e\u003d i0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(9030)",
    "preds": [
      "i2 \u003d i2 + 1",
      "i0 \u003d interfaceinvoke r0.\u003cjava.lang.CharSequence: int length()\u003e()",
      "goto [?\u003d (branch)]",
      "i2 \u003d 0"
    ],
    "succs": [
      "return 0",
      "$z0 \u003d staticinvoke \u003cjava.lang.Character: boolean isWhitespace(char)\u003e($c1)",
      "$c1 \u003d interfaceinvoke r0.\u003cjava.lang.CharSequence: char charAt(int)\u003e(i2)"
    ]
  },
  "6988": {
    "className": "net.sf.json.util.JSONUtils",
    "methodSignature": "\u003cnet.sf.json.util.JSONUtils: boolean isJavaIdentifier(java.lang.String)\u003e",
    "stmt": "if $i0 !\u003d 0 goto $c1 \u003d virtualinvoke r0.\u003cjava.lang.String: char charAt(int)\u003e(0)",
    "preds": [
      "$i0 \u003d virtualinvoke r0.\u003cjava.lang.String: int length()\u003e()",
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(6990)]",
      "return 0",
      "$c1 \u003d virtualinvoke r0.\u003cjava.lang.String: char charAt(int)\u003e(0)",
      "$z0 \u003d staticinvoke \u003cjava.lang.Character: boolean isJavaIdentifierStart(char)\u003e($c1)"
    ]
  },
  "6989": {
    "className": "net.sf.json.util.JSONUtils",
    "methodSignature": "\u003cnet.sf.json.util.JSONUtils: boolean isJavaIdentifier(java.lang.String)\u003e",
    "stmt": "if $z0 !\u003d 0 goto i4 \u003d 1",
    "preds": [
      "$z0 \u003d staticinvoke \u003cjava.lang.Character: boolean isJavaIdentifierStart(char)\u003e($c1)",
      "$c1 \u003d virtualinvoke r0.\u003cjava.lang.String: char charAt(int)\u003e(0)"
    ],
    "succs": [
      "i4 \u003d 1",
      "return 0",
      "$i2 \u003d virtualinvoke r0.\u003cjava.lang.String: int length()\u003e()"
    ]
  },
  "6993": {
    "className": "net.sf.json.util.JSONUtils",
    "methodSignature": "\u003cnet.sf.json.util.JSONUtils: boolean isJavaIdentifier(java.lang.String)\u003e",
    "stmt": "if $z1 !\u003d 0 goto i4 \u003d i4 + 1",
    "preds": [
      "$z1 \u003d staticinvoke \u003cjava.lang.Character: boolean isJavaIdentifierPart(char)\u003e($c3)",
      "$c3 \u003d virtualinvoke r0.\u003cjava.lang.String: char charAt(int)\u003e(i4)"
    ],
    "succs": [
      "i4 \u003d i4 + 1",
      "return 0",
      "goto [?\u003d $i2 \u003d virtualinvoke r0.\u003cjava.lang.String: int length()\u003e()]"
    ]
  },
  "8027": {
    "className": "net.sf.ezmorph.array.IntArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.IntArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8028)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.IntArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.IntArrayMorpher: java.lang.Class INT_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "r0[0] \u003d \"[I\"",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.IntArrayMorpher: java.lang.Class INT_ARRAY_CLASS\u003e \u003d $r6]"
    ]
  },
  "8030": {
    "className": "net.sf.ezmorph.array.IntArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.IntArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8028)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.IntArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.IntArrayMorpher: java.lang.Class INT_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "r0[0] \u003d \"[I\"",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.IntArrayMorpher: java.lang.Class INT_ARRAY_CLASS\u003e \u003d $r6]"
    ]
  },
  "22373": {
    "className": "org.slf4j.helpers.Util",
    "methodSignature": "\u003corg.slf4j.helpers.Util: java.lang.String safeGetSystemProperty(java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto r3 \u003d null",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "r3 \u003d null",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "$r2 :\u003d @caughtexception",
      "r3 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(r0)",
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"null input\")"
    ]
  },
  "22377": {
    "className": "org.slf4j.helpers.Util",
    "methodSignature": "\u003corg.slf4j.helpers.Util: java.lang.String safeGetSystemProperty(java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto r3 \u003d null",
    "preds": [
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "r3 \u003d null",
      "$r1 \u003d new java.lang.IllegalArgumentException",
      "$r2 :\u003d @caughtexception",
      "r3 \u003d staticinvoke \u003cjava.lang.System: java.lang.String getProperty(java.lang.String)\u003e(r0)",
      "specialinvoke $r1.\u003cjava.lang.IllegalArgumentException: void \u003cinit\u003e(java.lang.String)\u003e(\"null input\")"
    ]
  },
  "22380": {
    "className": "org.slf4j.helpers.Util",
    "methodSignature": "\u003corg.slf4j.helpers.Util: boolean safeGetBooleanSystemProperty(java.lang.String)\u003e",
    "stmt": "if r1 !\u003d null goto $z0 \u003d virtualinvoke r1.\u003cjava.lang.String: boolean equalsIgnoreCase(java.lang.String)\u003e(\"true\")",
    "preds": [
      "r1 \u003d staticinvoke \u003corg.slf4j.helpers.Util: java.lang.String safeGetSystemProperty(java.lang.String)\u003e(r0)",
      "r0 :\u003d @parameter0: java.lang.String"
    ],
    "succs": [
      "return $z0",
      "return 0",
      "$z0 \u003d virtualinvoke r1.\u003cjava.lang.String: boolean equalsIgnoreCase(java.lang.String)\u003e(\"true\")"
    ]
  },
  "4979": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e",
    "stmt": "if $r1 !\u003d null goto $r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper\u003e",
    "preds": [
      "r3 :\u003d @parameter1: java.lang.Class",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper\u003e"
    ],
    "succs": [
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper\u003e",
      "virtualinvoke $r4.\u003ccom.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)\u003e(r2, r3)",
      "$r5 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r6 \u003d new java.lang.StringBuffer"
    ]
  },
  "12150": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if r0 !\u003d null goto r36 \u003d r0",
    "preds": [
      "r16 :\u003d @parameter4: java.lang.String",
      "r35 \u003d null"
    ],
    "succs": [
      "r36 \u003d r0",
      "$r30 \u003d r36",
      "goto [?\u003d (branch)]",
      "if r35 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e"
    ]
  },
  "14200": {
    "className": "com.thoughtworks.xstream.converters.collections.CollectionConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,java.lang.Class)\u003e",
    "stmt": "if $r3 !\u003d null goto $r11 \u003d \u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$java$util$Collection\u003e",
    "preds": [
      "if r2 !\u003d null goto $r3 \u003d \u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$java$util$Collection\u003e",
      "$r3 \u003d \u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$java$util$Collection\u003e"
    ],
    "succs": [
      "$r11 \u003d \u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$java$util$Collection\u003e",
      "$r11 \u003d staticinvoke \u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$(java.lang.String)\u003e(\"java.util.Collection\")",
      "\u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$java$util$Collection\u003e \u003d $r11",
      "$z0 \u003d virtualinvoke $r11.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)"
    ]
  },
  "4986": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class,boolean)\u003e",
    "stmt": "if $r1 !\u003d null goto $r3 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper\u003e",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper\u003e",
      "z0 :\u003d @parameter1: boolean"
    ],
    "succs": [
      "$r4 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r3 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper\u003e",
      "virtualinvoke $r3.\u003ccom.thoughtworks.xstream.mapper.ImmutableTypesMapper: void addImmutableType(java.lang.Class,boolean)\u003e(r2, z0)",
      "$r5 \u003d new java.lang.StringBuffer"
    ]
  },
  "14202": {
    "className": "com.thoughtworks.xstream.converters.collections.CollectionConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,java.lang.Class)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14202)",
    "preds": [
      "$r11 \u003d \u003ccom.thoughtworks.xstream.converters.collections.CollectionConverter: java.lang.Class class$java$util$Collection\u003e",
      "goto [?\u003d $z0 \u003d virtualinvoke $r11.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)]",
      "$z0 \u003d virtualinvoke $r11.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14206)]",
      "$r4 \u003d new java.lang.IllegalArgumentException",
      "return",
      "$r5 \u003d new java.lang.StringBuffer"
    ]
  },
  "12154": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $r30 !\u003d $r38 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12155)",
    "preds": [
      "if $r37 !\u003d null goto $r38 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e",
      "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e \u003d $r38",
      "goto [?\u003d (branch)]",
      "$r38 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "$r32 :\u003d @caughtexception",
      "$i0 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: int getModifiers()\u003e()",
      "r36 \u003d virtualinvoke r36.\u003cjava.lang.Class: java.lang.Class getSuperclass()\u003e()",
      "goto [?\u003d (branch)]",
      "if r35 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e",
      "$r33 \u003d new com.thoughtworks.xstream.InitializationException",
      "r35 \u003d virtualinvoke r36.\u003cjava.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)\u003e(r1)",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "12157": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12158)",
    "preds": [
      "$i0 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: int getModifiers()\u003e()",
      "$z0 \u003d staticinvoke \u003cjava.lang.reflect.Modifier: boolean isStatic(int)\u003e($i0)"
    ],
    "succs": [
      "$r32 :\u003d @caughtexception",
      "goto [?\u003d r35 \u003d null]",
      "r36 \u003d virtualinvoke r36.\u003cjava.lang.Class: java.lang.Class getSuperclass()\u003e()",
      "goto [?\u003d (branch)]",
      "if r35 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e",
      "$r33 \u003d new com.thoughtworks.xstream.InitializationException",
      "r35 \u003d null",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "12160": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12158)",
    "preds": [
      "$i0 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: int getModifiers()\u003e()",
      "$z0 \u003d staticinvoke \u003cjava.lang.reflect.Modifier: boolean isStatic(int)\u003e($i0)"
    ],
    "succs": [
      "$r32 :\u003d @caughtexception",
      "goto [?\u003d r35 \u003d null]",
      "r36 \u003d virtualinvoke r36.\u003cjava.lang.Class: java.lang.Class getSuperclass()\u003e()",
      "goto [?\u003d (branch)]",
      "if r35 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e",
      "$r33 \u003d new com.thoughtworks.xstream.InitializationException",
      "r35 \u003d null",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "4993": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)\u003e",
    "stmt": "if $r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4994)",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.ConverterRegistry converterRegistry\u003e",
      "i0 :\u003d @parameter1: int"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4996)]",
      "$r3 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.ConverterRegistry converterRegistry\u003e",
      "interfaceinvoke $r3.\u003ccom.thoughtworks.xstream.converters.ConverterRegistry: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)\u003e(r2, i0)",
      "return"
    ]
  },
  "12162": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12158)",
    "preds": [
      "$i0 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: int getModifiers()\u003e()",
      "$z0 \u003d staticinvoke \u003cjava.lang.reflect.Modifier: boolean isStatic(int)\u003e($i0)"
    ],
    "succs": [
      "$r32 :\u003d @caughtexception",
      "goto [?\u003d r35 \u003d null]",
      "r36 \u003d virtualinvoke r36.\u003cjava.lang.Class: java.lang.Class getSuperclass()\u003e()",
      "goto [?\u003d (branch)]",
      "if r35 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e",
      "$r33 \u003d new com.thoughtworks.xstream.InitializationException",
      "r35 \u003d null",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "12164": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if r35 !\u003d null goto $r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e",
    "preds": [
      "if r0 !\u003d null goto r36 \u003d r0",
      "goto [?\u003d (branch)]",
      "if $r30 !\u003d $r38 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12155)",
      "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12158)"
    ],
    "succs": [
      "$r25 \u003d new java.lang.StringBuffer",
      "$r24 \u003d new com.thoughtworks.xstream.InitializationException",
      "if $r2 !\u003d null goto $r39 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e",
      "$r2 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map\u003e"
    ]
  },
  "10117": {
    "className": "com.thoughtworks.xstream.mapper.MapperWrapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper)\u003e",
    "stmt": "if i1 \u003e\u003d $i0 goto $r24 \u003d interfaceinvoke $r3.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e(\"aliasForAttribute\")",
    "preds": [
      "$i0 \u003d lengthof r23",
      "goto [?\u003d $i0 \u003d lengthof r23]",
      "i1 \u003d 0"
    ],
    "succs": [
      "r60 \u003d r23[i1]",
      "$r24 \u003d interfaceinvoke $r3.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e(\"aliasForAttribute\")",
      "$r25 \u003d (com.thoughtworks.xstream.mapper.Mapper) $r24",
      "$r62 \u003d virtualinvoke r60.\u003cjava.lang.reflect.Method: java.lang.Class getDeclaringClass()\u003e()"
    ]
  },
  "4998": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)\u003e",
    "stmt": "if $r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(4999)",
    "preds": [
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.ConverterRegistry converterRegistry\u003e",
      "i0 :\u003d @parameter1: int"
    ],
    "succs": [
      "$r2 \u003d new com.thoughtworks.xstream.converters.SingleValueConverterWrapper",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5001)]",
      "$r4 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.ConverterRegistry converterRegistry\u003e",
      "return"
    ]
  },
  "12168": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if r15 \u003d\u003d null goto (branch)",
    "preds": [
      "if $z1 \u003d\u003d 0 goto $r4 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Collection\u003e",
      "$z1 \u003d virtualinvoke $r39.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e($r3)"
    ],
    "succs": [
      "$r23 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)",
      "goto [?\u003d $r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)]",
      "if r16 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12170)"
    ]
  },
  "12169": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if r16 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12170)",
    "preds": [
      "if $z1 \u003d\u003d 0 goto $r4 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Collection\u003e",
      "if r15 \u003d\u003d null goto (branch)"
    ],
    "succs": [
      "if $r23 !\u003d null goto $r40 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)",
      "goto [?\u003d $r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)]"
    ]
  },
  "8074": {
    "className": "net.sf.ezmorph.array.LongArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.LongArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8075)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.LongArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.LongArrayMorpher: java.lang.Class LONG_ARRAY_CLASS\u003e \u003d $r6",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.LongArrayMorpher: java.lang.Class LONG_ARRAY_CLASS\u003e \u003d $r6]",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "r0[0] \u003d \"[J\"",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "12170": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if r16 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12170)",
    "preds": [
      "if $z1 \u003d\u003d 0 goto $r4 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Collection\u003e",
      "if r15 \u003d\u003d null goto (branch)"
    ],
    "succs": [
      "if $r23 !\u003d null goto $r40 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r23 \u003d \u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.lang.Class class$java$util$Map$Entry\u003e",
      "$r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)",
      "goto [?\u003d $r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)]"
    ]
  },
  "6028": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: org.jvnet.localizer.ResourceBundleHolder get(java.lang.Class)\u003e",
    "stmt": "if r3 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(6028)",
    "preds": [
      "r3 \u003d (java.lang.ref.WeakReference) $r2",
      "$r2 \u003d interfaceinvoke $r1.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e(r0)"
    ],
    "succs": [
      "goto [?\u003d $r5 \u003d new org.jvnet.localizer.ResourceBundleHolder]",
      "$r5 \u003d new org.jvnet.localizer.ResourceBundleHolder",
      "r8 \u003d (org.jvnet.localizer.ResourceBundleHolder) $r4",
      "$r4 \u003d virtualinvoke r3.\u003cjava.lang.ref.WeakReference: java.lang.Object get()\u003e()"
    ]
  },
  "8077": {
    "className": "net.sf.ezmorph.array.LongArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.LongArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8075)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.LongArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.LongArrayMorpher: java.lang.Class LONG_ARRAY_CLASS\u003e \u003d $r6",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.LongArrayMorpher: java.lang.Class LONG_ARRAY_CLASS\u003e \u003d $r6]",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "r0[0] \u003d \"[J\"",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "22415": {
    "className": "org.slf4j.jul.JDK14LoggerFactory",
    "methodSignature": "\u003corg.slf4j.jul.JDK14LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)\u003e",
    "stmt": "if $z0 !\u003d 0 goto r9 \u003d \u003corg.slf4j.jul.JDK14LoggerFactory: java.lang.String JUL_ROOT_LOGGER_NAME\u003e",
    "preds": [
      "r9 :\u003d @parameter0: java.lang.String",
      "$z0 \u003d virtualinvoke r9.\u003cjava.lang.String: boolean equalsIgnoreCase(java.lang.String)\u003e(\"ROOT\")"
    ],
    "succs": [
      "goto [?\u003d $r1 \u003d r0.\u003corg.slf4j.jul.JDK14LoggerFactory: java.util.concurrent.ConcurrentMap loggerMap\u003e]",
      "$r1 \u003d r0.\u003corg.slf4j.jul.JDK14LoggerFactory: java.util.concurrent.ConcurrentMap loggerMap\u003e",
      "r9 \u003d \u003corg.slf4j.jul.JDK14LoggerFactory: java.lang.String JUL_ROOT_LOGGER_NAME\u003e"
    ]
  },
  "22416": {
    "className": "org.slf4j.jul.JDK14LoggerFactory",
    "methodSignature": "\u003corg.slf4j.jul.JDK14LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)\u003e",
    "stmt": "if $r8 \u003d\u003d null goto r3 \u003d staticinvoke \u003cjava.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)\u003e(r9)",
    "preds": [
      "$r2 \u003d interfaceinvoke $r1.\u003cjava.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)\u003e(r9)",
      "$r8 \u003d (org.slf4j.Logger) $r2"
    ],
    "succs": [
      "return $r8",
      "$r4 \u003d new org.slf4j.jul.JDK14LoggerAdapter",
      "r3 \u003d staticinvoke \u003cjava.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)\u003e(r9)"
    ]
  },
  "12176": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z2 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(12177)",
    "preds": [
      "$r5 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: java.lang.Class getType()\u003e()",
      "$z2 \u003d virtualinvoke $r41.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e($r5)"
    ],
    "succs": [
      "$z3 \u003d virtualinvoke r42.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "$r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)",
      "goto [?\u003d $r47 \u003d specialinvoke r14.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)\u003e(r0)]",
      "r42 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: java.lang.Class getType()\u003e()"
    ]
  },
  "12179": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z3 !\u003d 0 goto r43 \u003d virtualinvoke r42.\u003cjava.lang.Class: java.lang.Class getComponentType()\u003e()",
    "preds": [
      "$z3 \u003d virtualinvoke r42.\u003cjava.lang.Class: boolean isArray()\u003e()",
      "r42 \u003d virtualinvoke r35.\u003cjava.lang.reflect.Field: java.lang.Class getType()\u003e()"
    ],
    "succs": [
      "$r17 \u003d new com.thoughtworks.xstream.InitializationException",
      "r43 \u003d virtualinvoke r42.\u003cjava.lang.Class: java.lang.Class getComponentType()\u003e()",
      "$r18 \u003d new java.lang.StringBuffer",
      "$z4 \u003d virtualinvoke r43.\u003cjava.lang.Class: boolean isPrimitive()\u003e()"
    ]
  },
  "5012": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setMode(int)\u003e",
    "stmt": "tableswitch(i0) {     case 1001: goto $r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy;     case 1002: goto $r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy;     case 1003: goto $r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1004: goto $r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1005: goto $r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1006: goto $r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     default: goto $r19 \u003d new java.lang.IllegalArgumentException; }",
    "preds": [
      "i0 :\u003d @parameter0: int",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$i7 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.TreeMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003ccom.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy",
      "$r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$i8 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r18 \u003d new java.lang.StringBuffer",
      "$i2 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "$r19 \u003d new java.lang.IllegalArgumentException",
      "$i5 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy",
      "$r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy"
    ]
  },
  "6036": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e",
    "stmt": "if r32 \u003d\u003d null goto entermonitor r0",
    "preds": [
      "$r3 \u003d interfaceinvoke $r2.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e(r1)",
      "r32 \u003d (java.util.ResourceBundle) $r3"
    ],
    "succs": [
      "entermonitor r0",
      "$r4 \u003d r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Map bundles\u003e",
      "return r32",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "22420": {
    "className": "org.slf4j.jul.JDK14LoggerFactory",
    "methodSignature": "\u003corg.slf4j.jul.JDK14LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)\u003e",
    "stmt": "if r7 !\u003d null goto $r10 \u003d r7",
    "preds": [
      "$r6 \u003d interfaceinvoke $r5.\u003cjava.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)\u003e(r9, $r4)",
      "r7 \u003d (org.slf4j.Logger) $r6"
    ],
    "succs": [
      "return $r10",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(22421)]",
      "$r10 \u003d r7",
      "$r10 \u003d $r4"
    ]
  },
  "5013": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setMode(int)\u003e",
    "stmt": "tableswitch(i0) {     case 1001: goto $r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy;     case 1002: goto $r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy;     case 1003: goto $r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1004: goto $r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1005: goto $r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1006: goto $r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     default: goto $r19 \u003d new java.lang.IllegalArgumentException; }",
    "preds": [
      "i0 :\u003d @parameter0: int",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$i7 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.TreeMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003ccom.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy",
      "$r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$i8 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r18 \u003d new java.lang.StringBuffer",
      "$i2 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "$r19 \u003d new java.lang.IllegalArgumentException",
      "$i5 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy",
      "$r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy"
    ]
  },
  "12182": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z4 \u003d\u003d 0 goto $r44 \u003d r43",
    "preds": [
      "r43 \u003d virtualinvoke r42.\u003cjava.lang.Class: java.lang.Class getComponentType()\u003e()",
      "$z4 \u003d virtualinvoke r43.\u003cjava.lang.Class: boolean isPrimitive()\u003e()"
    ],
    "succs": [
      "r45 \u003d $r44",
      "$r44 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.Primitives: java.lang.Class box(java.lang.Class)\u003e(r43)",
      "$r44 \u003d r43",
      "goto [?\u003d r45 \u003d $r44]"
    ]
  },
  "5015": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setMode(int)\u003e",
    "stmt": "tableswitch(i0) {     case 1001: goto $r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy;     case 1002: goto $r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy;     case 1003: goto $r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1004: goto $r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1005: goto $r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1006: goto $r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     default: goto $r19 \u003d new java.lang.IllegalArgumentException; }",
    "preds": [
      "i0 :\u003d @parameter0: int",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$i7 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.TreeMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003ccom.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy",
      "$r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$i8 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r18 \u003d new java.lang.StringBuffer",
      "$i2 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "$r19 \u003d new java.lang.IllegalArgumentException",
      "$i5 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy",
      "$r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy"
    ]
  },
  "6039": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e",
    "stmt": "if r33 !\u003d null goto exitmonitor r0",
    "preds": [
      "r33 \u003d (java.util.ResourceBundle) $r5",
      "$r5 \u003d interfaceinvoke $r4.\u003cjava.util.Map: java.lang.Object get(java.lang.Object)\u003e(r1)"
    ],
    "succs": [
      "exitmonitor r0",
      "goto [?\u003d r6 \u003d specialinvoke r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Locale getBaseLocale(java.util.Locale)\u003e(r1)]",
      "r6 \u003d specialinvoke r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Locale getBaseLocale(java.util.Locale)\u003e(r1)",
      "return r33",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "5016": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setMode(int)\u003e",
    "stmt": "tableswitch(i0) {     case 1001: goto $r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy;     case 1002: goto $r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy;     case 1003: goto $r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1004: goto $r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1005: goto $r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1006: goto $r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     default: goto $r19 \u003d new java.lang.IllegalArgumentException; }",
    "preds": [
      "i0 :\u003d @parameter0: int",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$i7 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.TreeMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003ccom.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy",
      "$r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$i8 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r18 \u003d new java.lang.StringBuffer",
      "$i2 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "$r19 \u003d new java.lang.IllegalArgumentException",
      "$i5 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy",
      "$r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy"
    ]
  },
  "5017": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setMode(int)\u003e",
    "stmt": "tableswitch(i0) {     case 1001: goto $r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy;     case 1002: goto $r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy;     case 1003: goto $r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1004: goto $r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1005: goto $r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1006: goto $r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     default: goto $r19 \u003d new java.lang.IllegalArgumentException; }",
    "preds": [
      "i0 :\u003d @parameter0: int",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$i7 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.TreeMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003ccom.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy",
      "$r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$i8 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r18 \u003d new java.lang.StringBuffer",
      "$i2 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "$r19 \u003d new java.lang.IllegalArgumentException",
      "$i5 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy",
      "$r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy"
    ]
  },
  "12185": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z5 \u003d\u003d 0 goto $r46 \u003d r34",
    "preds": [
      "if r34 !\u003d null goto $z5 \u003d virtualinvoke r34.\u003cjava.lang.Class: boolean isPrimitive()\u003e()",
      "$z5 \u003d virtualinvoke r34.\u003cjava.lang.Class: boolean isPrimitive()\u003e()"
    ],
    "succs": [
      "$r46 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.Primitives: java.lang.Class box(java.lang.Class)\u003e(r34)",
      "goto [?\u003d r34 \u003d $r46]",
      "$r46 \u003d r34",
      "r34 \u003d $r46"
    ]
  },
  "5018": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void setMode(int)\u003e",
    "stmt": "tableswitch(i0) {     case 1001: goto $r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy;     case 1002: goto $r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy;     case 1003: goto $r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1004: goto $r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1005: goto $r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     case 1006: goto $r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy;     default: goto $r19 \u003d new java.lang.IllegalArgumentException; }",
    "preds": [
      "i0 :\u003d @parameter0: int",
      "r0 :\u003d @this: com.thoughtworks.xstream.XStream"
    ],
    "succs": [
      "$i7 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "specialinvoke $r12.\u003ccom.thoughtworks.xstream.core.TreeMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "specialinvoke $r13.\u003ccom.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy: void \u003cinit\u003e()\u003e()",
      "$r14 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r13 \u003d new com.thoughtworks.xstream.core.ReferenceByIdMarshallingStrategy",
      "$r16 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$r15 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy",
      "$i8 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r18 \u003d new java.lang.StringBuffer",
      "$i2 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int ABSOLUTE\u003e",
      "$r19 \u003d new java.lang.IllegalArgumentException",
      "$i5 \u003d \u003ccom.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE\u003e",
      "$r12 \u003d new com.thoughtworks.xstream.core.TreeMarshallingStrategy",
      "$r17 \u003d new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy"
    ]
  },
  "12186": {
    "className": "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $z5 \u003d\u003d 0 goto $r46 \u003d r34",
    "preds": [
      "if r34 !\u003d null goto $z5 \u003d virtualinvoke r34.\u003cjava.lang.Class: boolean isPrimitive()\u003e()",
      "$z5 \u003d virtualinvoke r34.\u003cjava.lang.Class: boolean isPrimitive()\u003e()"
    ],
    "succs": [
      "$r46 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.Primitives: java.lang.Class box(java.lang.Class)\u003e(r34)",
      "goto [?\u003d r34 \u003d $r46]",
      "$r46 \u003d r34",
      "r34 \u003d $r46"
    ]
  },
  "6049": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e",
    "stmt": "if r6 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(6049)",
    "preds": [
      "r36 \u003d r35",
      "if r35 \u003d\u003d null goto (branch)"
    ],
    "succs": [
      "virtualinvoke r35.\u003corg.jvnet.localizer.ResourceBundleHolder$ResourceBundleImpl: void setParent(java.util.ResourceBundle)\u003e($r24)",
      "goto [?\u003d $r25 \u003d r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Map bundles\u003e]",
      "exitmonitor r0",
      "$r24 \u003d virtualinvoke r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e(r6)",
      "$r25 \u003d r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Map bundles\u003e",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "5027": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void addImplicitMap(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e",
    "stmt": "if $r1 !\u003d null goto $r7 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper\u003e",
    "preds": [
      "r6 :\u003d @parameter4: java.lang.String",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper\u003e"
    ],
    "succs": [
      "virtualinvoke $r7.\u003ccom.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class,java.lang.String)\u003e(r2, r3, r4, r5, r6)",
      "$r7 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper\u003e",
      "$r8 \u003d new com.thoughtworks.xstream.InitializationException",
      "$r9 \u003d new java.lang.StringBuffer"
    ]
  },
  "11172": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r5 !\u003d null goto $r58 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$java$lang$Class\u003e",
    "preds": [
      "$r4 \u003d newarray (java.lang.Class)[1]",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$java$lang$Class\u003e"
    ],
    "succs": [
      "$r58 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$java$lang$Class\u003e",
      "$r54 :\u003d @caughtexception",
      "$r58 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Class\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$java$lang$Class\u003e \u003d $r58",
      "z2 \u003d 0",
      "$r53 :\u003d @caughtexception",
      "$r4[0] \u003d $r58"
    ]
  },
  "6054": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e",
    "stmt": "if r6 \u003d\u003d null goto $r13 \u003d new java.util.MissingResourceException",
    "preds": [
      "goto [?\u003d (branch)]",
      "if r35 \u003d\u003d null goto (branch)",
      "r35 \u003d virtualinvoke r0.\u003corg.jvnet.localizer.ResourceBundleHolder: org.jvnet.localizer.ResourceBundleHolder$ResourceBundleImpl getFromXml(java.lang.String)\u003e($r29)"
    ],
    "succs": [
      "$r22 \u003d r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Map bundles\u003e",
      "exitmonitor r0",
      "$r13 \u003d new java.util.MissingResourceException",
      "$r14 \u003d new java.lang.StringBuilder",
      "$r23 \u003d virtualinvoke r0.\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e(r6)",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "6056": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.ResourceBundle get(java.util.Locale)\u003e",
    "stmt": "goto [?\u003d exitmonitor r0]",
    "preds": [
      "interfaceinvoke $r22.\u003cjava.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)\u003e(r1, $r23)",
      "r36 \u003d $r23"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(6057)]",
      "exitmonitor r0",
      "$r31 :\u003d @caughtexception"
    ]
  },
  "11176": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r7 !\u003d null goto $r59 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r7 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r6 \u003d newarray (java.lang.Object)[1]"
    ],
    "succs": [
      "$r6[0] \u003d $r59",
      "$r59 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r54 :\u003d @caughtexception",
      "$r59 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r59",
      "z2 \u003d 0",
      "$r53 :\u003d @caughtexception"
    ]
  },
  "12201": {
    "className": "com.thoughtworks.xstream.mapper.OuterClassMapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,java.lang.String)\u003e",
    "stmt": "if $r5 !\u003d null goto $r9 \u003d \u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.Class class$java$lang$Object\u003e",
    "preds": [
      "$r6 \u003d r0.\u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: java.util.Map innerFields\u003e",
      "$r5 \u003d \u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.Class class$java$lang$Object\u003e"
    ],
    "succs": [
      "$r9 \u003d \u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.Class class$java$lang$Object\u003e",
      "\u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.Class class$java$lang$Object\u003e \u003d $r9",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.Class class$(java.lang.String)\u003e(\"java.lang.Object\")",
      "$r8 \u003d virtualinvoke $r9.\u003cjava.lang.Class: java.lang.String getName()\u003e()"
    ]
  },
  "11178": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r8 \u003d\u003d null goto $z1 \u003d 0",
    "preds": [
      "$r6[0] \u003d $r59",
      "$r8 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(r57, $r6)"
    ],
    "succs": [
      "$r54 :\u003d @caughtexception",
      "$z1 \u003d 1",
      "goto [?\u003d z2 \u003d $z1]",
      "$z1 \u003d 0",
      "z2 \u003d 0",
      "$r53 :\u003d @caughtexception",
      "z2 \u003d $z1"
    ]
  },
  "11180": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r8 \u003d\u003d null goto $z1 \u003d 0",
    "preds": [
      "$r6[0] \u003d $r59",
      "$r8 \u003d virtualinvoke $r39.\u003cjava.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])\u003e(r57, $r6)"
    ],
    "succs": [
      "$r54 :\u003d @caughtexception",
      "$z1 \u003d 1",
      "goto [?\u003d z2 \u003d $z1]",
      "$z1 \u003d 0",
      "z2 \u003d 0",
      "$r53 :\u003d @caughtexception",
      "z2 \u003d $z1"
    ]
  },
  "11181": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d z2 \u003d $z1]",
    "preds": [
      "if $r8 \u003d\u003d null goto $z1 \u003d 0",
      "$z1 \u003d 1"
    ],
    "succs": [
      "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean canAllocateWithUnsafe\u003e \u003d z2]",
      "z2 \u003d 0",
      "z2 \u003d $z1",
      "$r53 :\u003d @caughtexception"
    ]
  },
  "11184": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r60 !\u003d null goto $r61 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$PureJavaReflectionProvider\u003e",
    "preds": [
      "$r60 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$PureJavaReflectionProvider\u003e",
      "z3 \u003d 0"
    ],
    "succs": [
      "$r61 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider\")",
      "$r61 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$PureJavaReflectionProvider\u003e",
      "r62 \u003d $r61",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$converters$reflection$PureJavaReflectionProvider\u003e \u003d $r61"
    ]
  },
  "6065": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: org.jvnet.localizer.ResourceBundleHolder$ResourceBundleImpl getFromProperties(java.lang.String)\u003e",
    "stmt": "goto [?\u003d r17 \u003d virtualinvoke r7.\u003cjava.net.URL: java.net.URLConnection openConnection()\u003e()]",
    "preds": [
      "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(6059)",
      "r7 \u003d staticinvoke \u003corg.jvnet.localizer.ResourceProvider: java.net.URL findResource(java.lang.String,java.lang.Class)\u003e($r6, $r5)"
    ],
    "succs": [
      "virtualinvoke r17.\u003cjava.net.URLConnection: void setUseCaches(boolean)\u003e(0)",
      "$r9 :\u003d @caughtexception",
      "r17 \u003d virtualinvoke r7.\u003cjava.net.URL: java.net.URLConnection openConnection()\u003e()",
      "$r10 \u003d new java.util.MissingResourceException"
    ]
  },
  "11186": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11187)",
    "preds": [
      "$z0 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: boolean canUseSunUnsafeReflectionProvider()\u003e()",
      "r62 \u003d $r61"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62",
      "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62]",
      "if r63 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11189)",
      "r63 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider\")"
    ]
  },
  "6068": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: org.jvnet.localizer.ResourceBundleHolder$ResourceBundleImpl getFromXml(java.lang.String)\u003e",
    "stmt": "if r7 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(6069)",
    "preds": [
      "r7 \u003d staticinvoke \u003corg.jvnet.localizer.ResourceProvider: java.net.URL findResource(java.lang.String,java.lang.Class)\u003e($r6, $r5)",
      "$r5 \u003d r4.\u003corg.jvnet.localizer.ResourceBundleHolder: java.lang.Class owner\u003e"
    ],
    "succs": [
      "goto [?\u003d r21 \u003d virtualinvoke r7.\u003cjava.net.URL: java.net.URLConnection openConnection()\u003e()]",
      "return null",
      "$r13 :\u003d @caughtexception",
      "r21 \u003d virtualinvoke r7.\u003cjava.net.URL: java.net.URLConnection openConnection()\u003e()"
    ]
  },
  "11188": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r63 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11189)",
    "preds": [
      "if $z0 !\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11187)",
      "r63 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider\")"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62",
      "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62]",
      "r64 \u003d (com.thoughtworks.xstream.converters.reflection.ReflectionProvider) $r9",
      "$r50 :\u003d @caughtexception",
      "$r9 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.util.DependencyInjectionFactory: java.lang.Object newInstance(java.lang.Class,java.lang.Object[])\u003e(r63, null)"
    ]
  },
  "14260": {
    "className": "com.thoughtworks.xstream.converters.collections.MapConverter",
    "methodSignature": "\u003ccom.thoughtworks.xstream.converters.collections.MapConverter: void \u003cinit\u003e(com.thoughtworks.xstream.mapper.Mapper,java.lang.Class)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14260)",
    "preds": [
      "goto [?\u003d $z0 \u003d virtualinvoke $r11.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)]",
      "$r11 \u003d \u003ccom.thoughtworks.xstream.converters.collections.MapConverter: java.lang.Class class$java$util$Map\u003e",
      "$z0 \u003d virtualinvoke $r11.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e(r2)"
    ],
    "succs": [
      "$r4 \u003d new java.lang.IllegalArgumentException",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(14264)]",
      "return",
      "$r5 \u003d new java.lang.StringBuffer"
    ]
  },
  "10167": {
    "className": "com.thoughtworks.xstream.mapper.MapperWrapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r3 \u003d r1.\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped\u003e",
    "preds": [
      "$r2 \u003d virtualinvoke r1.\u003cjava.lang.Object: java.lang.Class getClass()\u003e()",
      "$z0 \u003d virtualinvoke r0.\u003cjava.lang.Class: boolean isAssignableFrom(java.lang.Class)\u003e($r2)"
    ],
    "succs": [
      "$r3 \u003d r1.\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped\u003e",
      "$r4 \u003d r1",
      "$r4 \u003d interfaceinvoke $r3.\u003ccom.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e(r0)",
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(10168)]"
    ]
  },
  "11191": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r10 !\u003d null goto $r65 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r10 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "r64 \u003d (com.thoughtworks.xstream.converters.reflection.ReflectionProvider) $r9"
    ],
    "succs": [
      "$r11 \u003d interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)\u003e($r65)",
      "$r65 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62",
      "$r65 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r65",
      "$r50 :\u003d @caughtexception"
    ]
  },
  "10168": {
    "className": "com.thoughtworks.xstream.mapper.MapperWrapper",
    "methodSignature": "\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)\u003e",
    "stmt": "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(10168)]",
    "preds": [
      "if $z0 \u003d\u003d 0 goto $r3 \u003d r1.\u003ccom.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped\u003e",
      "$r4 \u003d r1"
    ],
    "succs": [
      "return $r4"
    ]
  },
  "8121": {
    "className": "net.sf.ezmorph.array.FloatArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.FloatArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8122)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.FloatArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "r0[0] \u003d \"[F\"",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.FloatArrayMorpher: java.lang.Class FLOAT_ARRAY_CLASS\u003e \u003d $r6]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "\u003cnet.sf.ezmorph.array.FloatArrayMorpher: java.lang.Class FLOAT_ARRAY_CLASS\u003e \u003d $r6",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "11194": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r12 !\u003d null goto $r66 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r38 \u003d (com.thoughtworks.xstream.core.JVM$Test) $r11",
      "$r12 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e"
    ],
    "succs": [
      "$r66 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r66 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "r63 \u003d null",
      "$r51 :\u003d @caughtexception",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"o\", \"object\", $r66)",
      "$r52 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r66"
    ]
  },
  "8124": {
    "className": "net.sf.ezmorph.array.FloatArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.FloatArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8122)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.FloatArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "r0[0] \u003d \"[F\"",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.FloatArrayMorpher: java.lang.Class FLOAT_ARRAY_CLASS\u003e \u003d $r6]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "\u003cnet.sf.ezmorph.array.FloatArrayMorpher: java.lang.Class FLOAT_ARRAY_CLASS\u003e \u003d $r6",
      "$r3 :\u003d @caughtexception"
    ]
  },
  "11197": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r14 !\u003d null goto $r67 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r14 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "specialinvoke $r83.\u003cjava.lang.Character: void \u003cinit\u003e(char)\u003e(99)"
    ],
    "succs": [
      "$r67 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"c\", $r83, $r67)",
      "r63 \u003d null",
      "$r51 :\u003d @caughtexception",
      "$r67 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r67",
      "$r52 :\u003d @caughtexception"
    ]
  },
  "11200": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r16 !\u003d null goto $r68 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "specialinvoke $r84.\u003cjava.lang.Byte: void \u003cinit\u003e(byte)\u003e(1)",
      "$r16 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e"
    ],
    "succs": [
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"b\", $r84, $r68)",
      "$r68 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "r63 \u003d null",
      "$r51 :\u003d @caughtexception",
      "$r68 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r68",
      "$r52 :\u003d @caughtexception"
    ]
  },
  "11203": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r18 !\u003d null goto $r69 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r18 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "specialinvoke $r85.\u003cjava.lang.Short: void \u003cinit\u003e(short)\u003e(1)"
    ],
    "succs": [
      "$r69 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"s\", $r85, $r69)",
      "r63 \u003d null",
      "$r51 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r69",
      "$r52 :\u003d @caughtexception",
      "$r69 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")"
    ]
  },
  "6086": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Locale getBaseLocale(java.util.Locale)\u003e",
    "stmt": "if $i0 \u003c\u003d 0 goto $r2 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getCountry()\u003e()",
    "preds": [
      "$i0 \u003d virtualinvoke $r1.\u003cjava.lang.String: int length()\u003e()",
      "$r1 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getVariant()\u003e()"
    ],
    "succs": [
      "$r2 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getCountry()\u003e()",
      "$i1 \u003d virtualinvoke $r2.\u003cjava.lang.String: int length()\u003e()",
      "$r7 \u003d new java.util.Locale",
      "$r9 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getLanguage()\u003e()"
    ]
  },
  "11206": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r20 !\u003d null goto $r70 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "specialinvoke $r86.\u003cjava.lang.Integer: void \u003cinit\u003e(int)\u003e(1)",
      "$r20 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e"
    ],
    "succs": [
      "$r70 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "r63 \u003d null",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"i\", $r86, $r70)",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r70",
      "$r51 :\u003d @caughtexception",
      "$r70 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "$r52 :\u003d @caughtexception"
    ]
  },
  "6088": {
    "className": "org.jvnet.localizer.ResourceBundleHolder",
    "methodSignature": "\u003corg.jvnet.localizer.ResourceBundleHolder: java.util.Locale getBaseLocale(java.util.Locale)\u003e",
    "stmt": "if $i1 \u003c\u003d 0 goto $r3 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getLanguage()\u003e()",
    "preds": [
      "$r2 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getCountry()\u003e()",
      "$i1 \u003d virtualinvoke $r2.\u003cjava.lang.String: int length()\u003e()"
    ],
    "succs": [
      "$r5 \u003d new java.util.Locale",
      "$r6 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getLanguage()\u003e()",
      "$r3 \u003d virtualinvoke r0.\u003cjava.util.Locale: java.lang.String getLanguage()\u003e()",
      "$i2 \u003d virtualinvoke $r3.\u003cjava.lang.String: int length()\u003e()"
    ]
  },
  "11209": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r22 !\u003d null goto $r71 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "specialinvoke $r87.\u003cjava.lang.Long: void \u003cinit\u003e(long)\u003e(1L)",
      "$r22 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e"
    ],
    "succs": [
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"l\", $r87, $r71)",
      "r63 \u003d null",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r71",
      "$r71 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r51 :\u003d @caughtexception",
      "$r71 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "$r52 :\u003d @caughtexception"
    ]
  },
  "11212": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r24 !\u003d null goto $r72 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r24 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "specialinvoke $r88.\u003cjava.lang.Float: void \u003cinit\u003e(float)\u003e(1.0F)"
    ],
    "succs": [
      "$r72 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"f\", $r88, $r72)",
      "r63 \u003d null",
      "$r72 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r72",
      "$r51 :\u003d @caughtexception",
      "$r52 :\u003d @caughtexception"
    ]
  },
  "11215": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r26 !\u003d null goto $r73 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "specialinvoke $r89.\u003cjava.lang.Double: void \u003cinit\u003e(double)\u003e(1.0)",
      "$r26 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e"
    ],
    "succs": [
      "$r73 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"d\", $r89, $r73)",
      "r63 \u003d null",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r73",
      "$r51 :\u003d @caughtexception",
      "$r52 :\u003d @caughtexception",
      "$r73 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")"
    ]
  },
  "11218": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r27 !\u003d null goto $r74 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r28 \u003d \u003cjava.lang.Boolean: java.lang.Boolean TRUE\u003e"
    ],
    "succs": [
      "$r74 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "r63 \u003d null",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"bool\", $r28, $r74)",
      "$r51 :\u003d @caughtexception",
      "$r74 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r52 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r74"
    ]
  },
  "6099": {
    "className": "org.jvnet.localizer.Localizable",
    "methodSignature": "\u003corg.jvnet.localizer.Localizable: void \u003cinit\u003e(org.jvnet.localizer.ResourceBundleHolder,java.lang.String,java.lang.Object[])\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r7 \u003d r0.\u003corg.jvnet.localizer.Localizable: java.io.Serializable[] args\u003e",
    "preds": [
      "$r5 \u003d r3[i2]",
      "$z0 \u003d $r5 instanceof java.io.Serializable"
    ],
    "succs": [
      "$r6 \u003d r3[i2]",
      "$r7 \u003d r0.\u003corg.jvnet.localizer.Localizable: java.io.Serializable[] args\u003e",
      "$r11 \u003d r0.\u003corg.jvnet.localizer.Localizable: java.io.Serializable[] args\u003e",
      "$r9 \u003d r3[i2]"
    ]
  },
  "6100": {
    "className": "org.jvnet.localizer.Localizable",
    "methodSignature": "\u003corg.jvnet.localizer.Localizable: void \u003cinit\u003e(org.jvnet.localizer.ResourceBundleHolder,java.lang.String,java.lang.Object[])\u003e",
    "stmt": "if $z0 \u003d\u003d 0 goto $r7 \u003d r0.\u003corg.jvnet.localizer.Localizable: java.io.Serializable[] args\u003e",
    "preds": [
      "$r5 \u003d r3[i2]",
      "$z0 \u003d $r5 instanceof java.io.Serializable"
    ],
    "succs": [
      "$r6 \u003d r3[i2]",
      "$r7 \u003d r0.\u003corg.jvnet.localizer.Localizable: java.io.Serializable[] args\u003e",
      "$r11 \u003d r0.\u003corg.jvnet.localizer.Localizable: java.io.Serializable[] args\u003e",
      "$r9 \u003d r3[i2]"
    ]
  },
  "11221": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r27 !\u003d null goto $r74 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r28 \u003d \u003cjava.lang.Boolean: java.lang.Boolean TRUE\u003e"
    ],
    "succs": [
      "$r74 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "r63 \u003d null",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"bool\", $r28, $r74)",
      "$r51 :\u003d @caughtexception",
      "$r74 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r52 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r74"
    ]
  },
  "11222": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r27 !\u003d null goto $r74 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
    "preds": [
      "$r27 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r28 \u003d \u003cjava.lang.Boolean: java.lang.Boolean TRUE\u003e"
    ],
    "succs": [
      "$r74 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$(java.lang.String)\u003e(\"com.thoughtworks.xstream.core.JVM$Test\")",
      "r63 \u003d null",
      "interfaceinvoke r64.\u003ccom.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)\u003e($r38, \"bool\", $r28, $r74)",
      "$r51 :\u003d @caughtexception",
      "$r74 \u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e",
      "$r52 :\u003d @caughtexception",
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class class$com$thoughtworks$xstream$core$JVM$Test\u003e \u003d $r74"
    ]
  },
  "5079": {
    "className": "com.thoughtworks.xstream.XStream",
    "methodSignature": "\u003ccom.thoughtworks.xstream.XStream: void addPermission(com.thoughtworks.xstream.security.TypePermission)\u003e",
    "stmt": "if $r1 !\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5080)",
    "preds": [
      "r2 :\u003d @parameter0: com.thoughtworks.xstream.security.TypePermission",
      "$r1 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.SecurityMapper securityMapper\u003e"
    ],
    "succs": [
      "goto [?\u003d staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(5082)]",
      "virtualinvoke $r3.\u003ccom.thoughtworks.xstream.mapper.SecurityMapper: void addPermission(com.thoughtworks.xstream.security.TypePermission)\u003e(r2)",
      "$r3 \u003d r0.\u003ccom.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.SecurityMapper securityMapper\u003e",
      "return"
    ]
  },
  "11224": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r63 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11224)",
    "preds": [
      "$r51 :\u003d @caughtexception",
      "goto [?\u003d (branch)]",
      "z3 \u003d 1",
      "r63 \u003d null"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62",
      "$r50 :\u003d @caughtexception",
      "r62 \u003d r63",
      "goto [?\u003d r62 \u003d r63]",
      "r63 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider\")"
    ]
  },
  "11227": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if r63 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(11224)",
    "preds": [
      "$r51 :\u003d @caughtexception",
      "goto [?\u003d (branch)]",
      "z3 \u003d 1",
      "r63 \u003d null"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62",
      "$r50 :\u003d @caughtexception",
      "r62 \u003d r63",
      "goto [?\u003d r62 \u003d r63]",
      "r63 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider\")"
    ]
  },
  "11234": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62]",
    "preds": [
      "r62 \u003d r63",
      "goto [?\u003d r62 \u003d r63]",
      "r63 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider\")"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class reflectionProviderType\u003e \u003d r62",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean canWriteWithUnsafe\u003e \u003d z3"
    ]
  },
  "11239": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean optimizedTreeMapPutAll\u003e \u003d z4]",
    "preds": [
      "virtualinvoke $r92.\u003cjava.util.TreeMap: void putAll(java.util.Map)\u003e($r91)",
      "z4 \u003d 1"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean optimizedTreeMapPutAll\u003e \u003d z4",
      "$r93 \u003d new com.thoughtworks.xstream.core.util.PresortedSet"
    ]
  },
  "8168": {
    "className": "net.sf.ezmorph.array.DoubleArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.DoubleArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8169)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.DoubleArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.DoubleArrayMorpher: java.lang.Class DOUBLE_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.DoubleArrayMorpher: java.lang.Class DOUBLE_ARRAY_CLASS\u003e \u003d $r6]",
      "$r3 :\u003d @caughtexception",
      "r0[0] \u003d \"[D\""
    ]
  },
  "11242": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean optimizedTreeSetAddAll\u003e \u003d z5]",
    "preds": [
      "z5 \u003d 1",
      "virtualinvoke $r94.\u003cjava.util.TreeSet: boolean addAll(java.util.Collection)\u003e($r93)"
    ],
    "succs": [
      "$r46 :\u003d @caughtexception",
      "$r95 \u003d new java.text.SimpleDateFormat",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean optimizedTreeSetAddAll\u003e \u003d z5",
      "$r47 :\u003d @caughtexception"
    ]
  },
  "8171": {
    "className": "net.sf.ezmorph.array.DoubleArrayMorpher",
    "methodSignature": "\u003cnet.sf.ezmorph.array.DoubleArrayMorpher: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r6 \u003d\u003d null goto staticinvoke \u003ccom.code_intelligence.jazzer.runtime.CoverageMap: void recordCoverage(int)\u003e(8169)",
    "preds": [
      "$r6 \u003d \u003cnet.sf.ezmorph.array.DoubleArrayMorpher: java.lang.Class class$0\u003e"
    ],
    "succs": [
      "\u003cnet.sf.ezmorph.array.DoubleArrayMorpher: java.lang.Class DOUBLE_ARRAY_CLASS\u003e \u003d $r6",
      "r0 \u003d newarray (java.lang.Object)[1]",
      "$r4 \u003d new java.lang.NoClassDefFoundError",
      "goto [?\u003d \u003cnet.sf.ezmorph.array.DoubleArrayMorpher: java.lang.Class DOUBLE_ARRAY_CLASS\u003e \u003d $r6]",
      "$r3 :\u003d @caughtexception",
      "r0[0] \u003d \"[D\""
    ]
  },
  "11243": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean optimizedTreeSetAddAll\u003e \u003d z5]",
    "preds": [
      "z5 \u003d 1",
      "virtualinvoke $r94.\u003cjava.util.TreeSet: boolean addAll(java.util.Collection)\u003e($r93)"
    ],
    "succs": [
      "$r46 :\u003d @caughtexception",
      "$r95 \u003d new java.text.SimpleDateFormat",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean optimizedTreeSetAddAll\u003e \u003d z5",
      "$r47 :\u003d @caughtexception"
    ]
  },
  "11246": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat\u003e \u003d z6]",
    "preds": [
      "z6 \u003d 1",
      "virtualinvoke $r95.\u003cjava.text.SimpleDateFormat: java.util.Date parse(java.lang.String)\u003e(\"UTC\")"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat\u003e \u003d z6",
      "$r45 :\u003d @caughtexception",
      "$r96 \u003d new java.text.SimpleDateFormat",
      "$r44 :\u003d @caughtexception"
    ]
  },
  "11247": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat\u003e \u003d z6]",
    "preds": [
      "z6 \u003d 1",
      "virtualinvoke $r95.\u003cjava.text.SimpleDateFormat: java.util.Date parse(java.lang.String)\u003e(\"UTC\")"
    ],
    "succs": [
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean canParseUTCDateFormat\u003e \u003d z6",
      "$r45 :\u003d @caughtexception",
      "$r96 \u003d new java.text.SimpleDateFormat",
      "$r44 :\u003d @caughtexception"
    ]
  },
  "11250": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r97 \u003d\u003d null goto $z8 \u003d 0",
    "preds": [
      "$r97 \u003d new com.thoughtworks.xstream.core.util.CustomObjectOutputStream",
      "specialinvoke $r97.\u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: void \u003cinit\u003e(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)\u003e(null)"
    ],
    "succs": [
      "goto [?\u003d z9 \u003d $z8]",
      "$z8 \u003d 1",
      "z9 \u003d $z8",
      "$r43 :\u003d @caughtexception",
      "$z8 \u003d 0",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "11252": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r97 \u003d\u003d null goto $z8 \u003d 0",
    "preds": [
      "$r97 \u003d new com.thoughtworks.xstream.core.util.CustomObjectOutputStream",
      "specialinvoke $r97.\u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: void \u003cinit\u003e(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)\u003e(null)"
    ],
    "succs": [
      "goto [?\u003d z9 \u003d $z8]",
      "$z8 \u003d 1",
      "z9 \u003d $z8",
      "$r43 :\u003d @caughtexception",
      "$z8 \u003d 0",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "11253": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r97 \u003d\u003d null goto $z8 \u003d 0",
    "preds": [
      "$r97 \u003d new com.thoughtworks.xstream.core.util.CustomObjectOutputStream",
      "specialinvoke $r97.\u003ccom.thoughtworks.xstream.core.util.CustomObjectOutputStream: void \u003cinit\u003e(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)\u003e(null)"
    ],
    "succs": [
      "goto [?\u003d z9 \u003d $z8]",
      "$z8 \u003d 1",
      "z9 \u003d $z8",
      "$r43 :\u003d @caughtexception",
      "$z8 \u003d 0",
      "$r42 :\u003d @caughtexception"
    ]
  },
  "11256": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r80 \u003d\u003d null goto $z10 \u003d 0",
    "preds": [
      "$r80 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"java.awt.Color\", 0)",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean canCreateDerivedObjectOutputStream\u003e \u003d z9"
    ],
    "succs": [
      "$z10 \u003d 1",
      "$z10 \u003d 0",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable\u003e \u003d $z10",
      "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable\u003e \u003d $z10]"
    ]
  },
  "11259": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r33 \u003d\u003d null goto $z11 \u003d 0",
    "preds": [
      "$r33 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String,boolean)\u003e(\"javax.swing.LookAndFeel\", 0)",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean isAWTAvailable\u003e \u003d $z10"
    ],
    "succs": [
      "$z11 \u003d 0",
      "$z11 \u003d 1",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable\u003e \u003d $z11",
      "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable\u003e \u003d $z11]"
    ]
  },
  "11262": {
    "className": "com.thoughtworks.xstream.core.JVM",
    "methodSignature": "\u003ccom.thoughtworks.xstream.core.JVM: void \u003cclinit\u003e()\u003e",
    "stmt": "if $r34 \u003d\u003d null goto $z12 \u003d 0",
    "preds": [
      "$r34 \u003d staticinvoke \u003ccom.thoughtworks.xstream.core.JVM: java.lang.Class loadClassForName(java.lang.String)\u003e(\"java.sql.Date\")",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean isSwingAvailable\u003e \u003d $z11"
    ],
    "succs": [
      "goto [?\u003d \u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable\u003e \u003d $z12]",
      "$z12 \u003d 0",
      "$z12 \u003d 1",
      "\u003ccom.thoughtworks.xstream.core.JVM: boolean isSQLAvailable\u003e \u003d $z12"
    ]
  }
}